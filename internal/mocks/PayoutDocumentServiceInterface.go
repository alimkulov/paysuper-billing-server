// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// PayoutDocumentServiceInterface is an autogenerated mock type for the PayoutDocumentServiceInterface type
type PayoutDocumentServiceInterface struct {
	mock.Mock
}

// CountByQuery provides a mock function with given fields: ctx, query
func (_m *PayoutDocumentServiceInterface) CountByQuery(ctx context.Context, query primitive.M) (int64, error) {
	ret := _m.Called(ctx, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M) int64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.M) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByQuery provides a mock function with given fields: ctx, query, sorts, limit, offset
func (_m *PayoutDocumentServiceInterface) FindByQuery(ctx context.Context, query primitive.M, sorts []string, limit int64, offset int64) ([]*billing.PayoutDocument, error) {
	ret := _m.Called(ctx, query, sorts, limit, offset)

	var r0 []*billing.PayoutDocument
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, []string, int64, int64) []*billing.PayoutDocument); ok {
		r0 = rf(ctx, query, sorts, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.PayoutDocument)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.M, []string, int64, int64) error); ok {
		r1 = rf(ctx, query, sorts, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalanceAmount provides a mock function with given fields: ctx, merchantId, currency
func (_m *PayoutDocumentServiceInterface) GetBalanceAmount(ctx context.Context, merchantId string, currency string) (float64, error) {
	ret := _m.Called(ctx, merchantId, currency)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) float64); ok {
		r0 = rf(ctx, merchantId, currency)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *PayoutDocumentServiceInterface) GetById(ctx context.Context, id string) (*billing.PayoutDocument, error) {
	ret := _m.Called(ctx, id)

	var r0 *billing.PayoutDocument
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.PayoutDocument); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PayoutDocument)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdAndMerchant provides a mock function with given fields: ctx, id, merchantId
func (_m *PayoutDocumentServiceInterface) GetByIdAndMerchant(ctx context.Context, id string, merchantId string) (*billing.PayoutDocument, error) {
	ret := _m.Called(ctx, id, merchantId)

	var r0 *billing.PayoutDocument
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *billing.PayoutDocument); ok {
		r0 = rf(ctx, id, merchantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PayoutDocument)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, merchantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLast provides a mock function with given fields: ctx, merchantId, currency
func (_m *PayoutDocumentServiceInterface) GetLast(ctx context.Context, merchantId string, currency string) (*billing.PayoutDocument, error) {
	ret := _m.Called(ctx, merchantId, currency)

	var r0 *billing.PayoutDocument
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *billing.PayoutDocument); ok {
		r0 = rf(ctx, merchantId, currency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PayoutDocument)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, document, ip, source
func (_m *PayoutDocumentServiceInterface) Insert(ctx context.Context, document *billing.PayoutDocument, ip string, source string) error {
	ret := _m.Called(ctx, document, ip, source)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PayoutDocument, string, string) error); ok {
		r0 = rf(ctx, document, ip, source)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, document, ip, source
func (_m *PayoutDocumentServiceInterface) Update(ctx context.Context, document *billing.PayoutDocument, ip string, source string) error {
	ret := _m.Called(ctx, document, ip, source)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PayoutDocument, string, string) error); ok {
		r0 = rf(ctx, document, ip, source)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
