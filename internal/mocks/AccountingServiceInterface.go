// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import context "context"
import mock "github.com/stretchr/testify/mock"

import time "time"

// AccountingServiceInterface is an autogenerated mock type for the AccountingServiceInterface type
type AccountingServiceInterface struct {
	mock.Mock
}

// GetCorrectionsForRoyaltyReport provides a mock function with given fields: ctx, merchantId, operatingCompanyId, currency, from, to
func (_m *AccountingServiceInterface) GetCorrectionsForRoyaltyReport(ctx context.Context, merchantId string, operatingCompanyId string, currency string, from time.Time, to time.Time) ([]*billing.AccountingEntry, error) {
	ret := _m.Called(ctx, merchantId, operatingCompanyId, currency, from, to)

	var r0 []*billing.AccountingEntry
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Time, time.Time) []*billing.AccountingEntry); ok {
		r0 = rf(ctx, merchantId, operatingCompanyId, currency, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.AccountingEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, merchantId, operatingCompanyId, currency, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRollingReservesForRoyaltyReport provides a mock function with given fields: ctx, merchantId, operatingCompanyId, currency, from, to
func (_m *AccountingServiceInterface) GetRollingReservesForRoyaltyReport(ctx context.Context, merchantId string, operatingCompanyId string, currency string, from time.Time, to time.Time) ([]*billing.AccountingEntry, error) {
	ret := _m.Called(ctx, merchantId, operatingCompanyId, currency, from, to)

	var r0 []*billing.AccountingEntry
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Time, time.Time) []*billing.AccountingEntry); ok {
		r0 = rf(ctx, merchantId, operatingCompanyId, currency, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.AccountingEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, merchantId, operatingCompanyId, currency, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
