// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"

	mock "github.com/stretchr/testify/mock"
)

// CountryRepositoryInterface is an autogenerated mock type for the CountryRepositoryInterface type
type CountryRepositoryInterface struct {
	mock.Mock
}

// FindByHighRisk provides a mock function with given fields: ctx, isHighRiskOrder
func (_m *CountryRepositoryInterface) FindByHighRisk(ctx context.Context, isHighRiskOrder bool) (*billing.CountriesList, error) {
	ret := _m.Called(ctx, isHighRiskOrder)

	var r0 *billing.CountriesList
	if rf, ok := ret.Get(0).(func(context.Context, bool) *billing.CountriesList); ok {
		r0 = rf(ctx, isHighRiskOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.CountriesList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, isHighRiskOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByVatEnabled provides a mock function with given fields: _a0
func (_m *CountryRepositoryInterface) FindByVatEnabled(_a0 context.Context) (*billing.CountriesList, error) {
	ret := _m.Called(_a0)

	var r0 *billing.CountriesList
	if rf, ok := ret.Get(0).(func(context.Context) *billing.CountriesList); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.CountriesList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0
func (_m *CountryRepositoryInterface) GetAll(_a0 context.Context) (*billing.CountriesList, error) {
	ret := _m.Called(_a0)

	var r0 *billing.CountriesList
	if rf, ok := ret.Get(0).(func(context.Context) *billing.CountriesList); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.CountriesList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIsoCodeA2 provides a mock function with given fields: _a0, _a1
func (_m *CountryRepositoryInterface) GetByIsoCodeA2(_a0 context.Context, _a1 string) (*billing.Country, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billing.Country
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.Country); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Country)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *CountryRepositoryInterface) Insert(_a0 context.Context, _a1 *billing.Country) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Country) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsTariffRegionSupported provides a mock function with given fields: _a0
func (_m *CountryRepositoryInterface) IsTariffRegionSupported(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MultipleInsert provides a mock function with given fields: _a0, _a1
func (_m *CountryRepositoryInterface) MultipleInsert(_a0 context.Context, _a1 []*billing.Country) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*billing.Country) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *CountryRepositoryInterface) Update(_a0 context.Context, _a1 *billing.Country) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Country) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
