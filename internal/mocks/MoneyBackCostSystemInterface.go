// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"
import pkg "github.com/paysuper/paysuper-billing-server/internal/pkg"

// MoneyBackCostSystemInterface is an autogenerated mock type for the MoneyBackCostSystemInterface type
type MoneyBackCostSystemInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: obj
func (_m *MoneyBackCostSystemInterface) Delete(obj *billing.MoneyBackCostSystem) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.MoneyBackCostSystem) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name, payout_currency, undo_reason, region, country, mcc_code, operating_company_id, payment_stage
func (_m *MoneyBackCostSystemInterface) Get(name string, payout_currency string, undo_reason string, region string, country string, mcc_code string, operating_company_id string, payment_stage int32) ([]*pkg.MoneyBackCostSystemSet, error) {
	ret := _m.Called(name, payout_currency, undo_reason, region, country, mcc_code, operating_company_id, payment_stage)

	var r0 []*pkg.MoneyBackCostSystemSet
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, int32) []*pkg.MoneyBackCostSystemSet); ok {
		r0 = rf(name, payout_currency, undo_reason, region, country, mcc_code, operating_company_id, payment_stage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.MoneyBackCostSystemSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string, int32) error); ok {
		r1 = rf(name, payout_currency, undo_reason, region, country, mcc_code, operating_company_id, payment_stage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MoneyBackCostSystemInterface) GetAll() (*billing.MoneyBackCostSystemList, error) {
	ret := _m.Called()

	var r0 *billing.MoneyBackCostSystemList
	if rf, ok := ret.Get(0).(func() *billing.MoneyBackCostSystemList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.MoneyBackCostSystemList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *MoneyBackCostSystemInterface) GetById(id string) (*billing.MoneyBackCostSystem, error) {
	ret := _m.Called(id)

	var r0 *billing.MoneyBackCostSystem
	if rf, ok := ret.Get(0).(func(string) *billing.MoneyBackCostSystem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.MoneyBackCostSystem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultipleInsert provides a mock function with given fields: obj
func (_m *MoneyBackCostSystemInterface) MultipleInsert(obj []*billing.MoneyBackCostSystem) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*billing.MoneyBackCostSystem) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: obj
func (_m *MoneyBackCostSystemInterface) Update(obj *billing.MoneyBackCostSystem) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.MoneyBackCostSystem) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
