// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"

// PaymentMethodInterface is an autogenerated mock type for the PaymentMethodInterface type
type PaymentMethodInterface struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *PaymentMethodInterface) GetAll() (map[string]*billing.PaymentMethod, error) {
	ret := _m.Called()

	var r0 map[string]*billing.PaymentMethod
	if rf, ok := ret.Get(0).(func() map[string]*billing.PaymentMethod); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*billing.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByGroupAndCurrency provides a mock function with given fields: project, group, currency
func (_m *PaymentMethodInterface) GetByGroupAndCurrency(project *billing.Project, group string, currency string) (*billing.PaymentMethod, error) {
	ret := _m.Called(project, group, currency)

	var r0 *billing.PaymentMethod
	if rf, ok := ret.Get(0).(func(*billing.Project, string, string) *billing.PaymentMethod); ok {
		r0 = rf(project, group, currency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*billing.Project, string, string) error); ok {
		r1 = rf(project, group, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *PaymentMethodInterface) GetById(_a0 string) (*billing.PaymentMethod, error) {
	ret := _m.Called(_a0)

	var r0 *billing.PaymentMethod
	if rf, ok := ret.Get(0).(func(string) *billing.PaymentMethod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentSettings provides a mock function with given fields: paymentMethod, currency, mccCode, operatingCompanyId, project
func (_m *PaymentMethodInterface) GetPaymentSettings(paymentMethod *billing.PaymentMethod, currency string, mccCode string, operatingCompanyId string, project *billing.Project) (*billing.PaymentMethodParams, error) {
	ret := _m.Called(paymentMethod, currency, mccCode, operatingCompanyId, project)

	var r0 *billing.PaymentMethodParams
	if rf, ok := ret.Get(0).(func(*billing.PaymentMethod, string, string, string, *billing.Project) *billing.PaymentMethodParams); ok {
		r0 = rf(paymentMethod, currency, mccCode, operatingCompanyId, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PaymentMethodParams)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*billing.PaymentMethod, string, string, string, *billing.Project) error); ok {
		r1 = rf(paymentMethod, currency, mccCode, operatingCompanyId, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *PaymentMethodInterface) Insert(_a0 *billing.PaymentMethod) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.PaymentMethod) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListByParams provides a mock function with given fields: project, currency, mccCode, operatingCompanyId
func (_m *PaymentMethodInterface) ListByParams(project *billing.Project, currency string, mccCode string, operatingCompanyId string) ([]*billing.PaymentMethod, error) {
	ret := _m.Called(project, currency, mccCode, operatingCompanyId)

	var r0 []*billing.PaymentMethod
	if rf, ok := ret.Get(0).(func(*billing.Project, string, string, string) []*billing.PaymentMethod); ok {
		r0 = rf(project, currency, mccCode, operatingCompanyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*billing.Project, string, string, string) error); ok {
		r1 = rf(project, currency, mccCode, operatingCompanyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultipleInsert provides a mock function with given fields: _a0
func (_m *PaymentMethodInterface) MultipleInsert(_a0 []*billing.PaymentMethod) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*billing.PaymentMethod) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *PaymentMethodInterface) Update(_a0 *billing.PaymentMethod) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.PaymentMethod) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
