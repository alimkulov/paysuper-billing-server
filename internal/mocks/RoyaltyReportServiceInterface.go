// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"

import time "time"

// RoyaltyReportServiceInterface is an autogenerated mock type for the RoyaltyReportServiceInterface type
type RoyaltyReportServiceInterface struct {
	mock.Mock
}

// CheckReportExists provides a mock function with given fields: merchantId, currency, from, to
func (_m *RoyaltyReportServiceInterface) CheckReportExists(merchantId string, currency string, from time.Time, to time.Time) (bool, error) {
	ret := _m.Called(merchantId, currency, from, to)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, time.Time, time.Time) bool); ok {
		r0 = rf(merchantId, currency, from, to)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, time.Time, time.Time) error); ok {
		r1 = rf(merchantId, currency, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalanceAmount provides a mock function with given fields: merchantId, currency
func (_m *RoyaltyReportServiceInterface) GetBalanceAmount(merchantId string, currency string) (float64, error) {
	ret := _m.Called(merchantId, currency)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = rf(merchantId, currency)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(merchantId, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *RoyaltyReportServiceInterface) GetById(id string) (*billing.RoyaltyReport, error) {
	ret := _m.Called(id)

	var r0 *billing.RoyaltyReport
	if rf, ok := ret.Get(0).(func(string) *billing.RoyaltyReport); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.RoyaltyReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNonPayoutReports provides a mock function with given fields: merchantId, currency, excludeIdsString
func (_m *RoyaltyReportServiceInterface) GetNonPayoutReports(merchantId string, currency string, excludeIdsString []string) ([]*billing.RoyaltyReport, error) {
	ret := _m.Called(merchantId, currency, excludeIdsString)

	var r0 []*billing.RoyaltyReport
	if rf, ok := ret.Get(0).(func(string, string, []string) []*billing.RoyaltyReport); ok {
		r0 = rf(merchantId, currency, excludeIdsString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.RoyaltyReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(merchantId, currency, excludeIdsString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: document, ip, source
func (_m *RoyaltyReportServiceInterface) Insert(document *billing.RoyaltyReport, ip string, source string) error {
	ret := _m.Called(document, ip, source)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.RoyaltyReport, string, string) error); ok {
		r0 = rf(document, ip, source)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: document, ip, source
func (_m *RoyaltyReportServiceInterface) Update(document *billing.RoyaltyReport, ip string, source string) error {
	ret := _m.Called(document, ip, source)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.RoyaltyReport, string, string) error); ok {
		r0 = rf(document, ip, source)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
