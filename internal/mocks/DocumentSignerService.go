// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import client "github.com/micro/go-micro/client"
import context "context"
import mock "github.com/stretchr/testify/mock"
import proto "github.com/paysuper/document-signer/pkg/proto"

// DocumentSignerService is an autogenerated mock type for the DocumentSignerService type
type DocumentSignerService struct {
	mock.Mock
}

// CreateSignature provides a mock function with given fields: ctx, in, opts
func (_m *DocumentSignerService) CreateSignature(ctx context.Context, in *proto.CreateSignatureRequest, opts ...client.CallOption) (*proto.CreateSignatureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.CreateSignatureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateSignatureRequest, ...client.CallOption) *proto.CreateSignatureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateSignatureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateSignatureRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSignatureUrl provides a mock function with given fields: ctx, in, opts
func (_m *DocumentSignerService) GetSignatureUrl(ctx context.Context, in *proto.GetSignatureUrlRequest, opts ...client.CallOption) (*proto.GetSignatureUrlResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.GetSignatureUrlResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetSignatureUrlRequest, ...client.CallOption) *proto.GetSignatureUrlResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetSignatureUrlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetSignatureUrlRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
