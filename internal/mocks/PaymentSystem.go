// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"
import proto "github.com/golang/protobuf/proto"

// PaymentSystem is an autogenerated mock type for the PaymentSystem type
type PaymentSystem struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: _a0
func (_m *PaymentSystem) CreatePayment(_a0 map[string]string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefund provides a mock function with given fields: refund
func (_m *PaymentSystem) CreateRefund(refund *billing.Refund) error {
	ret := _m.Called(refund)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.Refund) error); ok {
		r0 = rf(refund)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecurringId provides a mock function with given fields: request
func (_m *PaymentSystem) GetRecurringId(request proto.Message) string {
	ret := _m.Called(request)

	var r0 string
	if rf, ok := ret.Get(0).(func(proto.Message) string); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsRecurringCallback provides a mock function with given fields: request
func (_m *PaymentSystem) IsRecurringCallback(request proto.Message) bool {
	ret := _m.Called(request)

	var r0 bool
	if rf, ok := ret.Get(0).(func(proto.Message) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ProcessPayment provides a mock function with given fields: request, rawRequest, signature
func (_m *PaymentSystem) ProcessPayment(request proto.Message, rawRequest string, signature string) error {
	ret := _m.Called(request, rawRequest, signature)

	var r0 error
	if rf, ok := ret.Get(0).(func(proto.Message, string, string) error); ok {
		r0 = rf(request, rawRequest, signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessRefund provides a mock function with given fields: refund, message, raw, signature
func (_m *PaymentSystem) ProcessRefund(refund *billing.Refund, message proto.Message, raw string, signature string) error {
	ret := _m.Called(refund, message, raw, signature)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.Refund, proto.Message, string, string) error); ok {
		r0 = rf(refund, message, raw, signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
