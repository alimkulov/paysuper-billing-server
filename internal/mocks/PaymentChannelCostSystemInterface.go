// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"

// PaymentChannelCostSystemInterface is an autogenerated mock type for the PaymentChannelCostSystemInterface type
type PaymentChannelCostSystemInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: obj
func (_m *PaymentChannelCostSystemInterface) Delete(obj *billing.PaymentChannelCostSystem) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.PaymentChannelCostSystem) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name, region, country, mccCode, operatingCompanyId
func (_m *PaymentChannelCostSystemInterface) Get(name string, region string, country string, mccCode string, operatingCompanyId string) (*billing.PaymentChannelCostSystem, error) {
	ret := _m.Called(name, region, country, mccCode, operatingCompanyId)

	var r0 *billing.PaymentChannelCostSystem
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) *billing.PaymentChannelCostSystem); ok {
		r0 = rf(name, region, country, mccCode, operatingCompanyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PaymentChannelCostSystem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(name, region, country, mccCode, operatingCompanyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *PaymentChannelCostSystemInterface) GetAll() (*billing.PaymentChannelCostSystemList, error) {
	ret := _m.Called()

	var r0 *billing.PaymentChannelCostSystemList
	if rf, ok := ret.Get(0).(func() *billing.PaymentChannelCostSystemList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PaymentChannelCostSystemList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *PaymentChannelCostSystemInterface) GetById(id string) (*billing.PaymentChannelCostSystem, error) {
	ret := _m.Called(id)

	var r0 *billing.PaymentChannelCostSystem
	if rf, ok := ret.Get(0).(func(string) *billing.PaymentChannelCostSystem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PaymentChannelCostSystem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultipleInsert provides a mock function with given fields: obj
func (_m *PaymentChannelCostSystemInterface) MultipleInsert(obj []*billing.PaymentChannelCostSystem) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*billing.PaymentChannelCostSystem) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: obj
func (_m *PaymentChannelCostSystemInterface) Update(obj *billing.PaymentChannelCostSystem) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.PaymentChannelCostSystem) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
