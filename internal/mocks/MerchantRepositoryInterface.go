// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"

// MerchantRepositoryInterface is an autogenerated mock type for the MerchantRepositoryInterface type
type MerchantRepositoryInterface struct {
	mock.Mock
}

// GetById provides a mock function with given fields: id
func (_m *MerchantRepositoryInterface) GetById(id string) (*billing.Merchant, error) {
	ret := _m.Called(id)

	var r0 *billing.Merchant
	if rf, ok := ret.Get(0).(func(string) *billing.Merchant); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Merchant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethod provides a mock function with given fields: merchantId, method
func (_m *MerchantRepositoryInterface) GetPaymentMethod(merchantId string, method string) (*billing.MerchantPaymentMethod, error) {
	ret := _m.Called(merchantId, method)

	var r0 *billing.MerchantPaymentMethod
	if rf, ok := ret.Get(0).(func(string, string) *billing.MerchantPaymentMethod); ok {
		r0 = rf(merchantId, method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.MerchantPaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(merchantId, method)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethodTerminalCallbackPassword provides a mock function with given fields: merchantId, pmId
func (_m *MerchantRepositoryInterface) GetPaymentMethodTerminalCallbackPassword(merchantId string, pmId string) (string, error) {
	ret := _m.Called(merchantId, pmId)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(merchantId, pmId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(merchantId, pmId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethodTerminalId provides a mock function with given fields: merchantId, pmId
func (_m *MerchantRepositoryInterface) GetPaymentMethodTerminalId(merchantId string, pmId string) (string, error) {
	ret := _m.Called(merchantId, pmId)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(merchantId, pmId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(merchantId, pmId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethodTerminalPassword provides a mock function with given fields: merchantId, pmId
func (_m *MerchantRepositoryInterface) GetPaymentMethodTerminalPassword(merchantId string, pmId string) (string, error) {
	ret := _m.Called(merchantId, pmId)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(merchantId, pmId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(merchantId, pmId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: merchant
func (_m *MerchantRepositoryInterface) Insert(merchant *billing.Merchant) error {
	ret := _m.Called(merchant)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.Merchant) error); ok {
		r0 = rf(merchant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MultipleInsert provides a mock function with given fields: merchants
func (_m *MerchantRepositoryInterface) MultipleInsert(merchants []*billing.Merchant) error {
	ret := _m.Called(merchants)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*billing.Merchant) error); ok {
		r0 = rf(merchants)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: merchant
func (_m *MerchantRepositoryInterface) Update(merchant *billing.Merchant) error {
	ret := _m.Called(merchant)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.Merchant) error); ok {
		r0 = rf(merchant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: merchant
func (_m *MerchantRepositoryInterface) Upsert(merchant *billing.Merchant) error {
	ret := _m.Called(merchant)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.Merchant) error); ok {
		r0 = rf(merchant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
