// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import context "context"
import mock "github.com/stretchr/testify/mock"

// MerchantRepositoryInterface is an autogenerated mock type for the MerchantRepositoryInterface type
type MerchantRepositoryInterface struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *MerchantRepositoryInterface) GetAll(ctx context.Context) ([]*billing.Merchant, error) {
	ret := _m.Called(ctx)

	var r0 []*billing.Merchant
	if rf, ok := ret.Get(0).(func(context.Context) []*billing.Merchant); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.Merchant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MerchantRepositoryInterface) GetById(ctx context.Context, id string) (*billing.Merchant, error) {
	ret := _m.Called(ctx, id)

	var r0 *billing.Merchant
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.Merchant); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Merchant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommonById provides a mock function with given fields: ctx, id
func (_m *MerchantRepositoryInterface) GetCommonById(ctx context.Context, id string) (*billing.MerchantCommon, error) {
	ret := _m.Called(ctx, id)

	var r0 *billing.MerchantCommon
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.MerchantCommon); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.MerchantCommon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantsWithAutoPayouts provides a mock function with given fields: ctx
func (_m *MerchantRepositoryInterface) GetMerchantsWithAutoPayouts(ctx context.Context) ([]*billing.Merchant, error) {
	ret := _m.Called(ctx)

	var r0 []*billing.Merchant
	if rf, ok := ret.Get(0).(func(context.Context) []*billing.Merchant); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.Merchant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethod provides a mock function with given fields: ctx, merchantId, method
func (_m *MerchantRepositoryInterface) GetPaymentMethod(ctx context.Context, merchantId string, method string) (*billing.MerchantPaymentMethod, error) {
	ret := _m.Called(ctx, merchantId, method)

	var r0 *billing.MerchantPaymentMethod
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *billing.MerchantPaymentMethod); ok {
		r0 = rf(ctx, merchantId, method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.MerchantPaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, method)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, merchant
func (_m *MerchantRepositoryInterface) Insert(ctx context.Context, merchant *billing.Merchant) error {
	ret := _m.Called(ctx, merchant)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Merchant) error); ok {
		r0 = rf(ctx, merchant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MultipleInsert provides a mock function with given fields: ctx, merchants
func (_m *MerchantRepositoryInterface) MultipleInsert(ctx context.Context, merchants []*billing.Merchant) error {
	ret := _m.Called(ctx, merchants)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*billing.Merchant) error); ok {
		r0 = rf(ctx, merchants)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, merchant
func (_m *MerchantRepositoryInterface) Update(ctx context.Context, merchant *billing.Merchant) error {
	ret := _m.Called(ctx, merchant)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Merchant) error); ok {
		r0 = rf(ctx, merchant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: ctx, merchant
func (_m *MerchantRepositoryInterface) Upsert(ctx context.Context, merchant *billing.Merchant) error {
	ret := _m.Called(ctx, merchant)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Merchant) error); ok {
		r0 = rf(ctx, merchant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
