// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import bson "github.com/globalsign/mgo/bson"
import mock "github.com/stretchr/testify/mock"
import paylink "github.com/paysuper/paysuper-billing-server/pkg/proto/paylink"

// PaylinkServiceInterface is an autogenerated mock type for the PaylinkServiceInterface type
type PaylinkServiceInterface struct {
	mock.Mock
}

// CountByQuery provides a mock function with given fields: query
func (_m *PaylinkServiceInterface) CountByQuery(query bson.M) (int, error) {
	ret := _m.Called(query)

	var r0 int
	if rf, ok := ret.Get(0).(func(bson.M) int); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.M) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id, merchantId
func (_m *PaylinkServiceInterface) Delete(id string, merchantId string) error {
	ret := _m.Called(id, merchantId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, merchantId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: id
func (_m *PaylinkServiceInterface) GetById(id string) (*paylink.Paylink, error) {
	ret := _m.Called(id)

	var r0 *paylink.Paylink
	if rf, ok := ret.Get(0).(func(string) *paylink.Paylink); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paylink.Paylink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdAndMerchant provides a mock function with given fields: id, merchantId
func (_m *PaylinkServiceInterface) GetByIdAndMerchant(id string, merchantId string) (*paylink.Paylink, error) {
	ret := _m.Called(id, merchantId)

	var r0 *paylink.Paylink
	if rf, ok := ret.Get(0).(func(string, string) *paylink.Paylink); ok {
		r0 = rf(id, merchantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paylink.Paylink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, merchantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByQuery provides a mock function with given fields: query, limit, offset
func (_m *PaylinkServiceInterface) GetListByQuery(query bson.M, limit int, offset int) ([]*paylink.Paylink, error) {
	ret := _m.Called(query, limit, offset)

	var r0 []*paylink.Paylink
	if rf, ok := ret.Get(0).(func(bson.M, int, int) []*paylink.Paylink); ok {
		r0 = rf(query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*paylink.Paylink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.M, int, int) error); ok {
		r1 = rf(query, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaylinkVisits provides a mock function with given fields: id, from, to
func (_m *PaylinkServiceInterface) GetPaylinkVisits(id string, from int64, to int64) (int, error) {
	ret := _m.Called(id, from, to)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, int64, int64) int); ok {
		r0 = rf(id, from, to)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = rf(id, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrl provides a mock function with given fields: id, merchantId, urlMask, utmSource, utmMedium, utmCampaign
func (_m *PaylinkServiceInterface) GetUrl(id string, merchantId string, urlMask string, utmSource string, utmMedium string, utmCampaign string) (string, error) {
	ret := _m.Called(id, merchantId, urlMask, utmSource, utmMedium, utmCampaign)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) string); ok {
		r0 = rf(id, merchantId, urlMask, utmSource, utmMedium, utmCampaign)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(id, merchantId, urlMask, utmSource, utmMedium, utmCampaign)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrVisits provides a mock function with given fields: id
func (_m *PaylinkServiceInterface) IncrVisits(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: pl
func (_m *PaylinkServiceInterface) Insert(pl *paylink.Paylink) error {
	ret := _m.Called(pl)

	var r0 error
	if rf, ok := ret.Get(0).(func(*paylink.Paylink) error); ok {
		r0 = rf(pl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: pl
func (_m *PaylinkServiceInterface) Update(pl *paylink.Paylink) error {
	ret := _m.Called(pl)

	var r0 error
	if rf, ok := ret.Get(0).(func(*paylink.Paylink) error); ok {
		r0 = rf(pl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePaylinkTotalStat provides a mock function with given fields: id, merchantId
func (_m *PaylinkServiceInterface) UpdatePaylinkTotalStat(id string, merchantId string) error {
	ret := _m.Called(id, merchantId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, merchantId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
