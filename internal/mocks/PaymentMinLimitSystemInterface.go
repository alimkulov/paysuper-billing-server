// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"

// PaymentMinLimitSystemInterface is an autogenerated mock type for the PaymentMinLimitSystemInterface type
type PaymentMinLimitSystemInterface struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *PaymentMinLimitSystemInterface) GetAll() ([]*billing.PaymentMinLimitSystem, error) {
	ret := _m.Called()

	var r0 []*billing.PaymentMinLimitSystem
	if rf, ok := ret.Get(0).(func() []*billing.PaymentMinLimitSystem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.PaymentMinLimitSystem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCurrency provides a mock function with given fields: currency
func (_m *PaymentMinLimitSystemInterface) GetByCurrency(currency string) (*billing.PaymentMinLimitSystem, error) {
	ret := _m.Called(currency)

	var r0 *billing.PaymentMinLimitSystem
	if rf, ok := ret.Get(0).(func(string) *billing.PaymentMinLimitSystem); ok {
		r0 = rf(currency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PaymentMinLimitSystem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultipleInsert provides a mock function with given fields: pmlsArray
func (_m *PaymentMinLimitSystemInterface) MultipleInsert(pmlsArray []*billing.PaymentMinLimitSystem) error {
	ret := _m.Called(pmlsArray)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*billing.PaymentMinLimitSystem) error); ok {
		r0 = rf(pmlsArray)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: pmls
func (_m *PaymentMinLimitSystemInterface) Upsert(pmls *billing.PaymentMinLimitSystem) error {
	ret := _m.Called(pmls)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.PaymentMinLimitSystem) error); ok {
		r0 = rf(pmls)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
