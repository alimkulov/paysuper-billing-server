// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import database "gopkg.in/paysuper/paysuper-database-mongo.v1"
import grpc "github.com/paysuper/paysuper-billing-server/pkg/proto/grpc"
import mock "github.com/stretchr/testify/mock"
import pkg "github.com/paysuper/paysuper-billing-server/internal/pkg"

// DashboardRepositoryInterface is an autogenerated mock type for the DashboardRepositoryInterface type
type DashboardRepositoryInterface struct {
	mock.Mock
}

// GetBaseReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *DashboardRepositoryInterface) GetBaseReport(_a0 context.Context, _a1 string, _a2 string) (*grpc.DashboardBaseReports, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *grpc.DashboardBaseReports
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *grpc.DashboardBaseReports); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.DashboardBaseReports)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseRevenueByCountryReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *DashboardRepositoryInterface) GetBaseRevenueByCountryReport(_a0 context.Context, _a1 string, _a2 string) (*grpc.DashboardRevenueByCountryReport, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *grpc.DashboardRevenueByCountryReport
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *grpc.DashboardRevenueByCountryReport); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.DashboardRevenueByCountryReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseSalesTodayReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *DashboardRepositoryInterface) GetBaseSalesTodayReport(_a0 context.Context, _a1 string, _a2 string) (*grpc.DashboardSalesTodayReport, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *grpc.DashboardSalesTodayReport
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *grpc.DashboardSalesTodayReport); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.DashboardSalesTodayReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseSourcesReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *DashboardRepositoryInterface) GetBaseSourcesReport(_a0 context.Context, _a1 string, _a2 string) (*grpc.DashboardSourcesReport, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *grpc.DashboardSourcesReport
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *grpc.DashboardSourcesReport); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.DashboardSourcesReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMainReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *DashboardRepositoryInterface) GetMainReport(_a0 context.Context, _a1 string, _a2 string) (*grpc.DashboardMainReport, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *grpc.DashboardMainReport
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *grpc.DashboardMainReport); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.DashboardMainReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRevenueDynamicsReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *DashboardRepositoryInterface) GetRevenueDynamicsReport(_a0 context.Context, _a1 string, _a2 string) (*grpc.DashboardRevenueDynamicReport, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *grpc.DashboardRevenueDynamicReport
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *grpc.DashboardRevenueDynamicReport); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.DashboardRevenueDynamicReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDashboardReportProcessor provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m *DashboardRepositoryInterface) NewDashboardReportProcessor(_a0 string, _a1 string, _a2 string, _a3 interface{}, _a4 *database.Source, _a5 pkg.CacheInterface, _a6 context.Context) (*pkg.DashboardReportProcessor, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	var r0 *pkg.DashboardReportProcessor
	if rf, ok := ret.Get(0).(func(string, string, string, interface{}, *database.Source, pkg.CacheInterface, context.Context) *pkg.DashboardReportProcessor); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.DashboardReportProcessor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, interface{}, *database.Source, pkg.CacheInterface, context.Context) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
