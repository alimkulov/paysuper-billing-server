// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"

// OperatingCompanyInterface is an autogenerated mock type for the OperatingCompanyInterface type
type OperatingCompanyInterface struct {
	mock.Mock
}

// Exists provides a mock function with given fields: id
func (_m *OperatingCompanyInterface) Exists(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *OperatingCompanyInterface) GetAll() ([]*billing.OperatingCompany, error) {
	ret := _m.Called()

	var r0 []*billing.OperatingCompany
	if rf, ok := ret.Get(0).(func() []*billing.OperatingCompany); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.OperatingCompany)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *OperatingCompanyInterface) GetById(id string) (*billing.OperatingCompany, error) {
	ret := _m.Called(id)

	var r0 *billing.OperatingCompany
	if rf, ok := ret.Get(0).(func(string) *billing.OperatingCompany); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.OperatingCompany)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: oc
func (_m *OperatingCompanyInterface) Insert(oc *billing.OperatingCompany) error {
	ret := _m.Called(oc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.OperatingCompany) error); ok {
		r0 = rf(oc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
