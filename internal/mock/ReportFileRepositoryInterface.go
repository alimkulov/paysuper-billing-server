// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"

// ReportFileRepositoryInterface is an autogenerated mock type for the ReportFileRepositoryInterface type
type ReportFileRepositoryInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *ReportFileRepositoryInterface) Delete(_a0 *billing.ReportFile) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.ReportFile) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOldestByDays provides a mock function with given fields: _a0
func (_m *ReportFileRepositoryInterface) DeleteOldestByDays(_a0 int32) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(int32) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *ReportFileRepositoryInterface) GetById(_a0 string) (*billing.ReportFile, error) {
	ret := _m.Called(_a0)

	var r0 *billing.ReportFile
	if rf, ok := ret.Get(0).(func(string) *billing.ReportFile); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.ReportFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *ReportFileRepositoryInterface) Insert(_a0 *billing.ReportFile) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.ReportFile) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *ReportFileRepositoryInterface) Update(_a0 *billing.ReportFile) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.ReportFile) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
