// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"

// CurrencyServiceInterface is an autogenerated mock type for the CurrencyServiceInterface type
type CurrencyServiceInterface struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *CurrencyServiceInterface) GetAll(_a0 int, _a1 int) ([]*billing.Currency, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*billing.Currency
	if rf, ok := ret.Get(0).(func(int, int) []*billing.Currency); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.Currency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCodeA3 provides a mock function with given fields: _a0
func (_m *CurrencyServiceInterface) GetByCodeA3(_a0 string) (*billing.Currency, error) {
	ret := _m.Called(_a0)

	var r0 *billing.Currency
	if rf, ok := ret.Get(0).(func(string) *billing.Currency); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Currency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCodeInt provides a mock function with given fields: _a0
func (_m *CurrencyServiceInterface) GetByCodeInt(_a0 int) (*billing.Currency, error) {
	ret := _m.Called(_a0)

	var r0 *billing.Currency
	if rf, ok := ret.Get(0).(func(int) *billing.Currency); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Currency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *CurrencyServiceInterface) Insert(_a0 *billing.Currency) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.Currency) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MultipleInsert provides a mock function with given fields: _a0
func (_m *CurrencyServiceInterface) MultipleInsert(_a0 []*billing.Currency) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*billing.Currency) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
