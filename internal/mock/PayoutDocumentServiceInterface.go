// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import bson "github.com/globalsign/mgo/bson"
import mock "github.com/stretchr/testify/mock"

// PayoutDocumentServiceInterface is an autogenerated mock type for the PayoutDocumentServiceInterface type
type PayoutDocumentServiceInterface struct {
	mock.Mock
}

// CountByQuery provides a mock function with given fields: query
func (_m *PayoutDocumentServiceInterface) CountByQuery(query bson.M) (int, error) {
	ret := _m.Called(query)

	var r0 int
	if rf, ok := ret.Get(0).(func(bson.M) int); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.M) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByQuery provides a mock function with given fields: query, sorts, limit, offset
func (_m *PayoutDocumentServiceInterface) FindByQuery(query bson.M, sorts []string, limit int, offset int) ([]*billing.PayoutDocument, error) {
	ret := _m.Called(query, sorts, limit, offset)

	var r0 []*billing.PayoutDocument
	if rf, ok := ret.Get(0).(func(bson.M, []string, int, int) []*billing.PayoutDocument); ok {
		r0 = rf(query, sorts, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.PayoutDocument)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.M, []string, int, int) error); ok {
		r1 = rf(query, sorts, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSourcesIdHex provides a mock function with given fields: merchantId, currency
func (_m *PayoutDocumentServiceInterface) GetAllSourcesIdHex(merchantId string, currency string) ([]string, error) {
	ret := _m.Called(merchantId, currency)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(merchantId, currency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(merchantId, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalanceAmount provides a mock function with given fields: merchantId, currency
func (_m *PayoutDocumentServiceInterface) GetBalanceAmount(merchantId string, currency string) (float64, error) {
	ret := _m.Called(merchantId, currency)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = rf(merchantId, currency)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(merchantId, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *PayoutDocumentServiceInterface) GetById(id string) (*billing.PayoutDocument, error) {
	ret := _m.Called(id)

	var r0 *billing.PayoutDocument
	if rf, ok := ret.Get(0).(func(string) *billing.PayoutDocument); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PayoutDocument)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLast provides a mock function with given fields: merchantId, currency
func (_m *PayoutDocumentServiceInterface) GetLast(merchantId string, currency string) (*billing.PayoutDocument, error) {
	ret := _m.Called(merchantId, currency)

	var r0 *billing.PayoutDocument
	if rf, ok := ret.Get(0).(func(string, string) *billing.PayoutDocument); ok {
		r0 = rf(merchantId, currency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PayoutDocument)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(merchantId, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: document, ip, source
func (_m *PayoutDocumentServiceInterface) Insert(document *billing.PayoutDocument, ip string, source string) error {
	ret := _m.Called(document, ip, source)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.PayoutDocument, string, string) error); ok {
		r0 = rf(document, ip, source)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: document, ip, source
func (_m *PayoutDocumentServiceInterface) Update(document *billing.PayoutDocument, ip string, source string) error {
	ret := _m.Called(document, ip, source)

	var r0 error
	if rf, ok := ret.Get(0).(func(*billing.PayoutDocument, string, string) error); ok {
		r0 = rf(document, ip, source)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
