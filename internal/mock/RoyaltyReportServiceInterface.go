// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import mock "github.com/stretchr/testify/mock"

// RoyaltyReportServiceInterface is an autogenerated mock type for the RoyaltyReportServiceInterface type
type RoyaltyReportServiceInterface struct {
	mock.Mock
}

// GetBalanceAmount provides a mock function with given fields: merchantId, currency
func (_m *RoyaltyReportServiceInterface) GetBalanceAmount(merchantId string, currency string) (float64, error) {
	ret := _m.Called(merchantId, currency)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = rf(merchantId, currency)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(merchantId, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNonPayoutReports provides a mock function with given fields: merchantId, currency
func (_m *RoyaltyReportServiceInterface) GetNonPayoutReports(merchantId string, currency string) ([]*billing.RoyaltyReport, error) {
	ret := _m.Called(merchantId, currency)

	var r0 []*billing.RoyaltyReport
	if rf, ok := ret.Get(0).(func(string, string) []*billing.RoyaltyReport); ok {
		r0 = rf(merchantId, currency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.RoyaltyReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(merchantId, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
