// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: grpc/grpc.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	grpc/grpc.proto

It has these top-level messages:
	EmptyRequest
	EmptyResponse
	PaymentCreateRequest
	PaymentCreateResponse
	PaymentFormJsonDataRequest
	PaymentFormJsonDataProject
	PaymentFormJsonDataResponse
	PaymentNotifyRequest
	PaymentNotifyResponse
	ConvertRateRequest
	ConvertRateResponse
	OnboardingBanking
	OnboardingRequest
	FindByIdRequest
	MerchantListingRequest
	MerchantListingResponse
	MerchantChangeStatusRequest
	NotificationRequest
	Notifications
	ListingNotificationRequest
	ListingMerchantPaymentMethod
	GetMerchantPaymentMethodRequest
	GetMerchantPaymentMethodResponse
	ListMerchantPaymentMethodsRequest
	MerchantPaymentMethodRequest
	MerchantPaymentMethodResponse
	GetMerchantResponse
	GetNotificationRequest
	CreateRefundRequest
	CreateRefundResponse
	ListRefundsRequest
	ListRefundsResponse
	GetRefundRequest
	CallbackRequest
	PaymentFormDataChangedRequest
	PaymentFormUserChangeLangRequest
	PaymentFormUserChangePaymentAccountRequest
	UserIpData
	PaymentFormDataChangeResponseItem
	PaymentFormDataChangeResponse
	ProcessBillingAddressRequest
	ProcessBillingAddressResponseItem
	ProcessBillingAddressResponse
	GetMerchantByRequest
	ChangeMerchantDataRequest
	ChangeMerchantDataResponse
	ChangeMerchantResponse
	ChangeMerchantStatusResponse
	CreateNotificationResponse
	OrderCreateProcessResponse
	SetMerchantS3AgreementRequest
	Product
	ProductPrice
	ListProductsRequest
	GetProductsForOrderRequest
	ListProductsResponse
	RequestProduct
	I18NTextSearchable
	ChangeProjectResponse
	GetProjectRequest
	ListProjectsRequest
	ListProjectsResponse
	TokenRequest
	TokenResponse
	CheckProjectRequestSignatureRequest
	CheckProjectRequestSignatureResponse
	ListOrdersRequest
	GetOrderRequest
	IsOrderCanBePayingRequest
	IsOrderCanBePayingResponse
	SetUserNotifyRequest
	NotifyUserSales
	NotifyUserNewRegion
	GetPaymentMethodProductionSettingsRequest
	ChangePaymentMethodRequest
	ChangePaymentMethodParamsRequest
	ChangePaymentMethodResponse
	ChangePaymentMethodParamsResponse
	FindByZipCodeRequest
	FindByZipCodeResponse
	ResponseError
	ResponseErrorMessage
	CreateAccountingEntryRequest
	CreateAccountingEntryResponse
	CreateRoyaltyReportRequest
	ListRoyaltyReportsRequest
	ListRoyaltyReportsResponse
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = billing.PaymentCostDeleteRequest{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BillingService service

type BillingService interface {
	OrderCreateProcess(ctx context.Context, in *billing.OrderCreateRequest, opts ...client.CallOption) (*OrderCreateProcessResponse, error)
	PaymentFormJsonDataProcess(ctx context.Context, in *PaymentFormJsonDataRequest, opts ...client.CallOption) (*PaymentFormJsonDataResponse, error)
	PaymentCreateProcess(ctx context.Context, in *PaymentCreateRequest, opts ...client.CallOption) (*PaymentCreateResponse, error)
	PaymentCallbackProcess(ctx context.Context, in *PaymentNotifyRequest, opts ...client.CallOption) (*PaymentNotifyResponse, error)
	UpdateOrder(ctx context.Context, in *billing.Order, opts ...client.CallOption) (*EmptyResponse, error)
	UpdateMerchant(ctx context.Context, in *billing.Merchant, opts ...client.CallOption) (*EmptyResponse, error)
	GetConvertRate(ctx context.Context, in *ConvertRateRequest, opts ...client.CallOption) (*ConvertRateResponse, error)
	GetMerchantBy(ctx context.Context, in *GetMerchantByRequest, opts ...client.CallOption) (*GetMerchantResponse, error)
	ListMerchants(ctx context.Context, in *MerchantListingRequest, opts ...client.CallOption) (*MerchantListingResponse, error)
	ChangeMerchant(ctx context.Context, in *OnboardingRequest, opts ...client.CallOption) (*ChangeMerchantResponse, error)
	ChangeMerchantStatus(ctx context.Context, in *MerchantChangeStatusRequest, opts ...client.CallOption) (*ChangeMerchantStatusResponse, error)
	ChangeMerchantData(ctx context.Context, in *ChangeMerchantDataRequest, opts ...client.CallOption) (*ChangeMerchantDataResponse, error)
	SetMerchantS3Agreement(ctx context.Context, in *SetMerchantS3AgreementRequest, opts ...client.CallOption) (*ChangeMerchantDataResponse, error)
	CreateNotification(ctx context.Context, in *NotificationRequest, opts ...client.CallOption) (*CreateNotificationResponse, error)
	GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...client.CallOption) (*billing.Notification, error)
	ListNotifications(ctx context.Context, in *ListingNotificationRequest, opts ...client.CallOption) (*Notifications, error)
	MarkNotificationAsRead(ctx context.Context, in *GetNotificationRequest, opts ...client.CallOption) (*billing.Notification, error)
	ListMerchantPaymentMethods(ctx context.Context, in *ListMerchantPaymentMethodsRequest, opts ...client.CallOption) (*ListingMerchantPaymentMethod, error)
	GetMerchantPaymentMethod(ctx context.Context, in *GetMerchantPaymentMethodRequest, opts ...client.CallOption) (*GetMerchantPaymentMethodResponse, error)
	ChangeMerchantPaymentMethod(ctx context.Context, in *MerchantPaymentMethodRequest, opts ...client.CallOption) (*MerchantPaymentMethodResponse, error)
	CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...client.CallOption) (*CreateRefundResponse, error)
	ListRefunds(ctx context.Context, in *ListRefundsRequest, opts ...client.CallOption) (*ListRefundsResponse, error)
	GetRefund(ctx context.Context, in *GetRefundRequest, opts ...client.CallOption) (*CreateRefundResponse, error)
	ProcessRefundCallback(ctx context.Context, in *CallbackRequest, opts ...client.CallOption) (*PaymentNotifyResponse, error)
	PaymentFormLanguageChanged(ctx context.Context, in *PaymentFormUserChangeLangRequest, opts ...client.CallOption) (*PaymentFormDataChangeResponse, error)
	PaymentFormPaymentAccountChanged(ctx context.Context, in *PaymentFormUserChangePaymentAccountRequest, opts ...client.CallOption) (*PaymentFormDataChangeResponse, error)
	ProcessBillingAddress(ctx context.Context, in *ProcessBillingAddressRequest, opts ...client.CallOption) (*ProcessBillingAddressResponse, error)
	CreateOrUpdateProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*Product, error)
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...client.CallOption) (*ListProductsResponse, error)
	GetProduct(ctx context.Context, in *RequestProduct, opts ...client.CallOption) (*Product, error)
	DeleteProduct(ctx context.Context, in *RequestProduct, opts ...client.CallOption) (*EmptyResponse, error)
	GetProductsForOrder(ctx context.Context, in *GetProductsForOrderRequest, opts ...client.CallOption) (*ListProductsResponse, error)
	ChangeProject(ctx context.Context, in *billing.Project, opts ...client.CallOption) (*ChangeProjectResponse, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...client.CallOption) (*ChangeProjectResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...client.CallOption) (*ListProjectsResponse, error)
	DeleteProject(ctx context.Context, in *GetProjectRequest, opts ...client.CallOption) (*ChangeProjectResponse, error)
	CreateToken(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error)
	CheckProjectRequestSignature(ctx context.Context, in *CheckProjectRequestSignatureRequest, opts ...client.CallOption) (*CheckProjectRequestSignatureResponse, error)
	GetCountriesList(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*billing.CountriesList, error)
	GetCountry(ctx context.Context, in *billing.GetCountryRequest, opts ...client.CallOption) (*billing.Country, error)
	UpdateCountry(ctx context.Context, in *billing.Country, opts ...client.CallOption) (*billing.Country, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...client.CallOption) (*billing.Order, error)
	FindAllOrders(ctx context.Context, in *ListOrdersRequest, opts ...client.CallOption) (*billing.OrderPaginate, error)
	IsOrderCanBePaying(ctx context.Context, in *IsOrderCanBePayingRequest, opts ...client.CallOption) (*IsOrderCanBePayingResponse, error)
	GetPriceGroup(ctx context.Context, in *billing.GetPriceGroupRequest, opts ...client.CallOption) (*billing.PriceGroup, error)
	UpdatePriceGroup(ctx context.Context, in *billing.PriceGroup, opts ...client.CallOption) (*billing.PriceGroup, error)
	SetUserNotifySales(ctx context.Context, in *SetUserNotifyRequest, opts ...client.CallOption) (*EmptyResponse, error)
	SetUserNotifyNewRegion(ctx context.Context, in *SetUserNotifyRequest, opts ...client.CallOption) (*EmptyResponse, error)
	CreateOrUpdatePaymentMethod(ctx context.Context, in *billing.PaymentMethod, opts ...client.CallOption) (*ChangePaymentMethodResponse, error)
	CreateOrUpdatePaymentMethodProductionSettings(ctx context.Context, in *ChangePaymentMethodParamsRequest, opts ...client.CallOption) (*ChangePaymentMethodParamsResponse, error)
	GetPaymentMethodProductionSettings(ctx context.Context, in *GetPaymentMethodProductionSettingsRequest, opts ...client.CallOption) (*billing.PaymentMethodParams, error)
	DeletePaymentMethodProductionSettings(ctx context.Context, in *GetPaymentMethodProductionSettingsRequest, opts ...client.CallOption) (*ChangePaymentMethodParamsResponse, error)
	GetCurrencyList(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*billing.CurrencyList, error)
	GetCurrency(ctx context.Context, in *billing.GetCurrencyRequest, opts ...client.CallOption) (*billing.Currency, error)
	FindByZipCode(ctx context.Context, in *FindByZipCodeRequest, opts ...client.CallOption) (*FindByZipCodeResponse, error)
	GetAllPaymentChannelCostSystem(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*billing.PaymentChannelCostSystemList, error)
	GetPaymentChannelCostSystem(ctx context.Context, in *billing.PaymentChannelCostSystemRequest, opts ...client.CallOption) (*billing.PaymentChannelCostSystem, error)
	SetPaymentChannelCostSystem(ctx context.Context, in *billing.PaymentChannelCostSystem, opts ...client.CallOption) (*billing.PaymentChannelCostSystem, error)
	DeletePaymentChannelCostSystem(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*EmptyResponse, error)
	GetAllPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchantListRequest, opts ...client.CallOption) (*billing.PaymentChannelCostMerchantList, error)
	GetPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchantRequest, opts ...client.CallOption) (*billing.PaymentChannelCostMerchant, error)
	SetPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchant, opts ...client.CallOption) (*billing.PaymentChannelCostMerchant, error)
	DeletePaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*EmptyResponse, error)
	GetAllMoneyBackCostSystem(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*billing.MoneyBackCostSystemList, error)
	GetMoneyBackCostSystem(ctx context.Context, in *billing.MoneyBackCostSystemRequest, opts ...client.CallOption) (*billing.MoneyBackCostSystem, error)
	SetMoneyBackCostSystem(ctx context.Context, in *billing.MoneyBackCostSystem, opts ...client.CallOption) (*billing.MoneyBackCostSystem, error)
	DeleteMoneyBackCostSystem(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*EmptyResponse, error)
	GetAllMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchantListRequest, opts ...client.CallOption) (*billing.MoneyBackCostMerchantList, error)
	GetMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchantRequest, opts ...client.CallOption) (*billing.MoneyBackCostMerchant, error)
	SetMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchant, opts ...client.CallOption) (*billing.MoneyBackCostMerchant, error)
	DeleteMoneyBackCostMerchant(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*EmptyResponse, error)
	CreateAccountingEntry(ctx context.Context, in *CreateAccountingEntryRequest, opts ...client.CallOption) (*CreateAccountingEntryResponse, error)
	CreateRoyaltyReport(ctx context.Context, in *CreateRoyaltyReportRequest, opts ...client.CallOption) (*CreateRoyaltyReportRequest, error)
	// /////
	ListRoyaltyReports(ctx context.Context, in *ListRoyaltyReportsRequest, opts ...client.CallOption) (*ListRoyaltyReportsResponse, error)
	ChangeRoyaltyReportStatus(ctx context.Context, in *CreateRoyaltyReportRequest, opts ...client.CallOption) (*CreateRoyaltyReportRequest, error)
	ListRoyaltyReportOrders(ctx context.Context, in *CreateRoyaltyReportRequest, opts ...client.CallOption) (*CreateRoyaltyReportRequest, error)
}

type billingService struct {
	c    client.Client
	name string
}

func NewBillingService(name string, c client.Client) BillingService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "grpc"
	}
	return &billingService{
		c:    c,
		name: name,
	}
}

func (c *billingService) OrderCreateProcess(ctx context.Context, in *billing.OrderCreateRequest, opts ...client.CallOption) (*OrderCreateProcessResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.OrderCreateProcess", in)
	out := new(OrderCreateProcessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) PaymentFormJsonDataProcess(ctx context.Context, in *PaymentFormJsonDataRequest, opts ...client.CallOption) (*PaymentFormJsonDataResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.PaymentFormJsonDataProcess", in)
	out := new(PaymentFormJsonDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) PaymentCreateProcess(ctx context.Context, in *PaymentCreateRequest, opts ...client.CallOption) (*PaymentCreateResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.PaymentCreateProcess", in)
	out := new(PaymentCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) PaymentCallbackProcess(ctx context.Context, in *PaymentNotifyRequest, opts ...client.CallOption) (*PaymentNotifyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.PaymentCallbackProcess", in)
	out := new(PaymentNotifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) UpdateOrder(ctx context.Context, in *billing.Order, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.UpdateOrder", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) UpdateMerchant(ctx context.Context, in *billing.Merchant, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.UpdateMerchant", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetConvertRate(ctx context.Context, in *ConvertRateRequest, opts ...client.CallOption) (*ConvertRateResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetConvertRate", in)
	out := new(ConvertRateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetMerchantBy(ctx context.Context, in *GetMerchantByRequest, opts ...client.CallOption) (*GetMerchantResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetMerchantBy", in)
	out := new(GetMerchantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ListMerchants(ctx context.Context, in *MerchantListingRequest, opts ...client.CallOption) (*MerchantListingResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ListMerchants", in)
	out := new(MerchantListingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ChangeMerchant(ctx context.Context, in *OnboardingRequest, opts ...client.CallOption) (*ChangeMerchantResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ChangeMerchant", in)
	out := new(ChangeMerchantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ChangeMerchantStatus(ctx context.Context, in *MerchantChangeStatusRequest, opts ...client.CallOption) (*ChangeMerchantStatusResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ChangeMerchantStatus", in)
	out := new(ChangeMerchantStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ChangeMerchantData(ctx context.Context, in *ChangeMerchantDataRequest, opts ...client.CallOption) (*ChangeMerchantDataResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ChangeMerchantData", in)
	out := new(ChangeMerchantDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) SetMerchantS3Agreement(ctx context.Context, in *SetMerchantS3AgreementRequest, opts ...client.CallOption) (*ChangeMerchantDataResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.SetMerchantS3Agreement", in)
	out := new(ChangeMerchantDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) CreateNotification(ctx context.Context, in *NotificationRequest, opts ...client.CallOption) (*CreateNotificationResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.CreateNotification", in)
	out := new(CreateNotificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...client.CallOption) (*billing.Notification, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetNotification", in)
	out := new(billing.Notification)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ListNotifications(ctx context.Context, in *ListingNotificationRequest, opts ...client.CallOption) (*Notifications, error) {
	req := c.c.NewRequest(c.name, "BillingService.ListNotifications", in)
	out := new(Notifications)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) MarkNotificationAsRead(ctx context.Context, in *GetNotificationRequest, opts ...client.CallOption) (*billing.Notification, error) {
	req := c.c.NewRequest(c.name, "BillingService.MarkNotificationAsRead", in)
	out := new(billing.Notification)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ListMerchantPaymentMethods(ctx context.Context, in *ListMerchantPaymentMethodsRequest, opts ...client.CallOption) (*ListingMerchantPaymentMethod, error) {
	req := c.c.NewRequest(c.name, "BillingService.ListMerchantPaymentMethods", in)
	out := new(ListingMerchantPaymentMethod)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetMerchantPaymentMethod(ctx context.Context, in *GetMerchantPaymentMethodRequest, opts ...client.CallOption) (*GetMerchantPaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetMerchantPaymentMethod", in)
	out := new(GetMerchantPaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ChangeMerchantPaymentMethod(ctx context.Context, in *MerchantPaymentMethodRequest, opts ...client.CallOption) (*MerchantPaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ChangeMerchantPaymentMethod", in)
	out := new(MerchantPaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...client.CallOption) (*CreateRefundResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.CreateRefund", in)
	out := new(CreateRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ListRefunds(ctx context.Context, in *ListRefundsRequest, opts ...client.CallOption) (*ListRefundsResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ListRefunds", in)
	out := new(ListRefundsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetRefund(ctx context.Context, in *GetRefundRequest, opts ...client.CallOption) (*CreateRefundResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetRefund", in)
	out := new(CreateRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ProcessRefundCallback(ctx context.Context, in *CallbackRequest, opts ...client.CallOption) (*PaymentNotifyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ProcessRefundCallback", in)
	out := new(PaymentNotifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) PaymentFormLanguageChanged(ctx context.Context, in *PaymentFormUserChangeLangRequest, opts ...client.CallOption) (*PaymentFormDataChangeResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.PaymentFormLanguageChanged", in)
	out := new(PaymentFormDataChangeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) PaymentFormPaymentAccountChanged(ctx context.Context, in *PaymentFormUserChangePaymentAccountRequest, opts ...client.CallOption) (*PaymentFormDataChangeResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.PaymentFormPaymentAccountChanged", in)
	out := new(PaymentFormDataChangeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ProcessBillingAddress(ctx context.Context, in *ProcessBillingAddressRequest, opts ...client.CallOption) (*ProcessBillingAddressResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ProcessBillingAddress", in)
	out := new(ProcessBillingAddressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) CreateOrUpdateProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*Product, error) {
	req := c.c.NewRequest(c.name, "BillingService.CreateOrUpdateProduct", in)
	out := new(Product)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...client.CallOption) (*ListProductsResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ListProducts", in)
	out := new(ListProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetProduct(ctx context.Context, in *RequestProduct, opts ...client.CallOption) (*Product, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetProduct", in)
	out := new(Product)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) DeleteProduct(ctx context.Context, in *RequestProduct, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.DeleteProduct", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetProductsForOrder(ctx context.Context, in *GetProductsForOrderRequest, opts ...client.CallOption) (*ListProductsResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetProductsForOrder", in)
	out := new(ListProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ChangeProject(ctx context.Context, in *billing.Project, opts ...client.CallOption) (*ChangeProjectResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ChangeProject", in)
	out := new(ChangeProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetProject(ctx context.Context, in *GetProjectRequest, opts ...client.CallOption) (*ChangeProjectResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetProject", in)
	out := new(ChangeProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...client.CallOption) (*ListProjectsResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ListProjects", in)
	out := new(ListProjectsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) DeleteProject(ctx context.Context, in *GetProjectRequest, opts ...client.CallOption) (*ChangeProjectResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.DeleteProject", in)
	out := new(ChangeProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) CreateToken(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.CreateToken", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) CheckProjectRequestSignature(ctx context.Context, in *CheckProjectRequestSignatureRequest, opts ...client.CallOption) (*CheckProjectRequestSignatureResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.CheckProjectRequestSignature", in)
	out := new(CheckProjectRequestSignatureResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetCountriesList(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*billing.CountriesList, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetCountriesList", in)
	out := new(billing.CountriesList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetCountry(ctx context.Context, in *billing.GetCountryRequest, opts ...client.CallOption) (*billing.Country, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetCountry", in)
	out := new(billing.Country)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) UpdateCountry(ctx context.Context, in *billing.Country, opts ...client.CallOption) (*billing.Country, error) {
	req := c.c.NewRequest(c.name, "BillingService.UpdateCountry", in)
	out := new(billing.Country)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...client.CallOption) (*billing.Order, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetOrder", in)
	out := new(billing.Order)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) FindAllOrders(ctx context.Context, in *ListOrdersRequest, opts ...client.CallOption) (*billing.OrderPaginate, error) {
	req := c.c.NewRequest(c.name, "BillingService.FindAllOrders", in)
	out := new(billing.OrderPaginate)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) IsOrderCanBePaying(ctx context.Context, in *IsOrderCanBePayingRequest, opts ...client.CallOption) (*IsOrderCanBePayingResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.IsOrderCanBePaying", in)
	out := new(IsOrderCanBePayingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetPriceGroup(ctx context.Context, in *billing.GetPriceGroupRequest, opts ...client.CallOption) (*billing.PriceGroup, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetPriceGroup", in)
	out := new(billing.PriceGroup)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) UpdatePriceGroup(ctx context.Context, in *billing.PriceGroup, opts ...client.CallOption) (*billing.PriceGroup, error) {
	req := c.c.NewRequest(c.name, "BillingService.UpdatePriceGroup", in)
	out := new(billing.PriceGroup)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) SetUserNotifySales(ctx context.Context, in *SetUserNotifyRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.SetUserNotifySales", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) SetUserNotifyNewRegion(ctx context.Context, in *SetUserNotifyRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.SetUserNotifyNewRegion", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) CreateOrUpdatePaymentMethod(ctx context.Context, in *billing.PaymentMethod, opts ...client.CallOption) (*ChangePaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.CreateOrUpdatePaymentMethod", in)
	out := new(ChangePaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) CreateOrUpdatePaymentMethodProductionSettings(ctx context.Context, in *ChangePaymentMethodParamsRequest, opts ...client.CallOption) (*ChangePaymentMethodParamsResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.CreateOrUpdatePaymentMethodProductionSettings", in)
	out := new(ChangePaymentMethodParamsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetPaymentMethodProductionSettings(ctx context.Context, in *GetPaymentMethodProductionSettingsRequest, opts ...client.CallOption) (*billing.PaymentMethodParams, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetPaymentMethodProductionSettings", in)
	out := new(billing.PaymentMethodParams)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) DeletePaymentMethodProductionSettings(ctx context.Context, in *GetPaymentMethodProductionSettingsRequest, opts ...client.CallOption) (*ChangePaymentMethodParamsResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.DeletePaymentMethodProductionSettings", in)
	out := new(ChangePaymentMethodParamsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetCurrencyList(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*billing.CurrencyList, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetCurrencyList", in)
	out := new(billing.CurrencyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetCurrency(ctx context.Context, in *billing.GetCurrencyRequest, opts ...client.CallOption) (*billing.Currency, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetCurrency", in)
	out := new(billing.Currency)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) FindByZipCode(ctx context.Context, in *FindByZipCodeRequest, opts ...client.CallOption) (*FindByZipCodeResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.FindByZipCode", in)
	out := new(FindByZipCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetAllPaymentChannelCostSystem(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*billing.PaymentChannelCostSystemList, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetAllPaymentChannelCostSystem", in)
	out := new(billing.PaymentChannelCostSystemList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetPaymentChannelCostSystem(ctx context.Context, in *billing.PaymentChannelCostSystemRequest, opts ...client.CallOption) (*billing.PaymentChannelCostSystem, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetPaymentChannelCostSystem", in)
	out := new(billing.PaymentChannelCostSystem)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) SetPaymentChannelCostSystem(ctx context.Context, in *billing.PaymentChannelCostSystem, opts ...client.CallOption) (*billing.PaymentChannelCostSystem, error) {
	req := c.c.NewRequest(c.name, "BillingService.SetPaymentChannelCostSystem", in)
	out := new(billing.PaymentChannelCostSystem)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) DeletePaymentChannelCostSystem(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.DeletePaymentChannelCostSystem", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetAllPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchantListRequest, opts ...client.CallOption) (*billing.PaymentChannelCostMerchantList, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetAllPaymentChannelCostMerchant", in)
	out := new(billing.PaymentChannelCostMerchantList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchantRequest, opts ...client.CallOption) (*billing.PaymentChannelCostMerchant, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetPaymentChannelCostMerchant", in)
	out := new(billing.PaymentChannelCostMerchant)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) SetPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchant, opts ...client.CallOption) (*billing.PaymentChannelCostMerchant, error) {
	req := c.c.NewRequest(c.name, "BillingService.SetPaymentChannelCostMerchant", in)
	out := new(billing.PaymentChannelCostMerchant)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) DeletePaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.DeletePaymentChannelCostMerchant", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetAllMoneyBackCostSystem(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*billing.MoneyBackCostSystemList, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetAllMoneyBackCostSystem", in)
	out := new(billing.MoneyBackCostSystemList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetMoneyBackCostSystem(ctx context.Context, in *billing.MoneyBackCostSystemRequest, opts ...client.CallOption) (*billing.MoneyBackCostSystem, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetMoneyBackCostSystem", in)
	out := new(billing.MoneyBackCostSystem)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) SetMoneyBackCostSystem(ctx context.Context, in *billing.MoneyBackCostSystem, opts ...client.CallOption) (*billing.MoneyBackCostSystem, error) {
	req := c.c.NewRequest(c.name, "BillingService.SetMoneyBackCostSystem", in)
	out := new(billing.MoneyBackCostSystem)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) DeleteMoneyBackCostSystem(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.DeleteMoneyBackCostSystem", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetAllMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchantListRequest, opts ...client.CallOption) (*billing.MoneyBackCostMerchantList, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetAllMoneyBackCostMerchant", in)
	out := new(billing.MoneyBackCostMerchantList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) GetMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchantRequest, opts ...client.CallOption) (*billing.MoneyBackCostMerchant, error) {
	req := c.c.NewRequest(c.name, "BillingService.GetMoneyBackCostMerchant", in)
	out := new(billing.MoneyBackCostMerchant)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) SetMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchant, opts ...client.CallOption) (*billing.MoneyBackCostMerchant, error) {
	req := c.c.NewRequest(c.name, "BillingService.SetMoneyBackCostMerchant", in)
	out := new(billing.MoneyBackCostMerchant)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) DeleteMoneyBackCostMerchant(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.DeleteMoneyBackCostMerchant", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) CreateAccountingEntry(ctx context.Context, in *CreateAccountingEntryRequest, opts ...client.CallOption) (*CreateAccountingEntryResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.CreateAccountingEntry", in)
	out := new(CreateAccountingEntryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) CreateRoyaltyReport(ctx context.Context, in *CreateRoyaltyReportRequest, opts ...client.CallOption) (*CreateRoyaltyReportRequest, error) {
	req := c.c.NewRequest(c.name, "BillingService.CreateRoyaltyReport", in)
	out := new(CreateRoyaltyReportRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ListRoyaltyReports(ctx context.Context, in *ListRoyaltyReportsRequest, opts ...client.CallOption) (*ListRoyaltyReportsResponse, error) {
	req := c.c.NewRequest(c.name, "BillingService.ListRoyaltyReports", in)
	out := new(ListRoyaltyReportsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ChangeRoyaltyReportStatus(ctx context.Context, in *CreateRoyaltyReportRequest, opts ...client.CallOption) (*CreateRoyaltyReportRequest, error) {
	req := c.c.NewRequest(c.name, "BillingService.ChangeRoyaltyReportStatus", in)
	out := new(CreateRoyaltyReportRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingService) ListRoyaltyReportOrders(ctx context.Context, in *CreateRoyaltyReportRequest, opts ...client.CallOption) (*CreateRoyaltyReportRequest, error) {
	req := c.c.NewRequest(c.name, "BillingService.ListRoyaltyReportOrders", in)
	out := new(CreateRoyaltyReportRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BillingService service

type BillingServiceHandler interface {
	OrderCreateProcess(context.Context, *billing.OrderCreateRequest, *OrderCreateProcessResponse) error
	PaymentFormJsonDataProcess(context.Context, *PaymentFormJsonDataRequest, *PaymentFormJsonDataResponse) error
	PaymentCreateProcess(context.Context, *PaymentCreateRequest, *PaymentCreateResponse) error
	PaymentCallbackProcess(context.Context, *PaymentNotifyRequest, *PaymentNotifyResponse) error
	UpdateOrder(context.Context, *billing.Order, *EmptyResponse) error
	UpdateMerchant(context.Context, *billing.Merchant, *EmptyResponse) error
	GetConvertRate(context.Context, *ConvertRateRequest, *ConvertRateResponse) error
	GetMerchantBy(context.Context, *GetMerchantByRequest, *GetMerchantResponse) error
	ListMerchants(context.Context, *MerchantListingRequest, *MerchantListingResponse) error
	ChangeMerchant(context.Context, *OnboardingRequest, *ChangeMerchantResponse) error
	ChangeMerchantStatus(context.Context, *MerchantChangeStatusRequest, *ChangeMerchantStatusResponse) error
	ChangeMerchantData(context.Context, *ChangeMerchantDataRequest, *ChangeMerchantDataResponse) error
	SetMerchantS3Agreement(context.Context, *SetMerchantS3AgreementRequest, *ChangeMerchantDataResponse) error
	CreateNotification(context.Context, *NotificationRequest, *CreateNotificationResponse) error
	GetNotification(context.Context, *GetNotificationRequest, *billing.Notification) error
	ListNotifications(context.Context, *ListingNotificationRequest, *Notifications) error
	MarkNotificationAsRead(context.Context, *GetNotificationRequest, *billing.Notification) error
	ListMerchantPaymentMethods(context.Context, *ListMerchantPaymentMethodsRequest, *ListingMerchantPaymentMethod) error
	GetMerchantPaymentMethod(context.Context, *GetMerchantPaymentMethodRequest, *GetMerchantPaymentMethodResponse) error
	ChangeMerchantPaymentMethod(context.Context, *MerchantPaymentMethodRequest, *MerchantPaymentMethodResponse) error
	CreateRefund(context.Context, *CreateRefundRequest, *CreateRefundResponse) error
	ListRefunds(context.Context, *ListRefundsRequest, *ListRefundsResponse) error
	GetRefund(context.Context, *GetRefundRequest, *CreateRefundResponse) error
	ProcessRefundCallback(context.Context, *CallbackRequest, *PaymentNotifyResponse) error
	PaymentFormLanguageChanged(context.Context, *PaymentFormUserChangeLangRequest, *PaymentFormDataChangeResponse) error
	PaymentFormPaymentAccountChanged(context.Context, *PaymentFormUserChangePaymentAccountRequest, *PaymentFormDataChangeResponse) error
	ProcessBillingAddress(context.Context, *ProcessBillingAddressRequest, *ProcessBillingAddressResponse) error
	CreateOrUpdateProduct(context.Context, *Product, *Product) error
	ListProducts(context.Context, *ListProductsRequest, *ListProductsResponse) error
	GetProduct(context.Context, *RequestProduct, *Product) error
	DeleteProduct(context.Context, *RequestProduct, *EmptyResponse) error
	GetProductsForOrder(context.Context, *GetProductsForOrderRequest, *ListProductsResponse) error
	ChangeProject(context.Context, *billing.Project, *ChangeProjectResponse) error
	GetProject(context.Context, *GetProjectRequest, *ChangeProjectResponse) error
	ListProjects(context.Context, *ListProjectsRequest, *ListProjectsResponse) error
	DeleteProject(context.Context, *GetProjectRequest, *ChangeProjectResponse) error
	CreateToken(context.Context, *TokenRequest, *TokenResponse) error
	CheckProjectRequestSignature(context.Context, *CheckProjectRequestSignatureRequest, *CheckProjectRequestSignatureResponse) error
	GetCountriesList(context.Context, *EmptyRequest, *billing.CountriesList) error
	GetCountry(context.Context, *billing.GetCountryRequest, *billing.Country) error
	UpdateCountry(context.Context, *billing.Country, *billing.Country) error
	GetOrder(context.Context, *GetOrderRequest, *billing.Order) error
	FindAllOrders(context.Context, *ListOrdersRequest, *billing.OrderPaginate) error
	IsOrderCanBePaying(context.Context, *IsOrderCanBePayingRequest, *IsOrderCanBePayingResponse) error
	GetPriceGroup(context.Context, *billing.GetPriceGroupRequest, *billing.PriceGroup) error
	UpdatePriceGroup(context.Context, *billing.PriceGroup, *billing.PriceGroup) error
	SetUserNotifySales(context.Context, *SetUserNotifyRequest, *EmptyResponse) error
	SetUserNotifyNewRegion(context.Context, *SetUserNotifyRequest, *EmptyResponse) error
	CreateOrUpdatePaymentMethod(context.Context, *billing.PaymentMethod, *ChangePaymentMethodResponse) error
	CreateOrUpdatePaymentMethodProductionSettings(context.Context, *ChangePaymentMethodParamsRequest, *ChangePaymentMethodParamsResponse) error
	GetPaymentMethodProductionSettings(context.Context, *GetPaymentMethodProductionSettingsRequest, *billing.PaymentMethodParams) error
	DeletePaymentMethodProductionSettings(context.Context, *GetPaymentMethodProductionSettingsRequest, *ChangePaymentMethodParamsResponse) error
	GetCurrencyList(context.Context, *EmptyRequest, *billing.CurrencyList) error
	GetCurrency(context.Context, *billing.GetCurrencyRequest, *billing.Currency) error
	FindByZipCode(context.Context, *FindByZipCodeRequest, *FindByZipCodeResponse) error
	GetAllPaymentChannelCostSystem(context.Context, *EmptyRequest, *billing.PaymentChannelCostSystemList) error
	GetPaymentChannelCostSystem(context.Context, *billing.PaymentChannelCostSystemRequest, *billing.PaymentChannelCostSystem) error
	SetPaymentChannelCostSystem(context.Context, *billing.PaymentChannelCostSystem, *billing.PaymentChannelCostSystem) error
	DeletePaymentChannelCostSystem(context.Context, *billing.PaymentCostDeleteRequest, *EmptyResponse) error
	GetAllPaymentChannelCostMerchant(context.Context, *billing.PaymentChannelCostMerchantListRequest, *billing.PaymentChannelCostMerchantList) error
	GetPaymentChannelCostMerchant(context.Context, *billing.PaymentChannelCostMerchantRequest, *billing.PaymentChannelCostMerchant) error
	SetPaymentChannelCostMerchant(context.Context, *billing.PaymentChannelCostMerchant, *billing.PaymentChannelCostMerchant) error
	DeletePaymentChannelCostMerchant(context.Context, *billing.PaymentCostDeleteRequest, *EmptyResponse) error
	GetAllMoneyBackCostSystem(context.Context, *EmptyRequest, *billing.MoneyBackCostSystemList) error
	GetMoneyBackCostSystem(context.Context, *billing.MoneyBackCostSystemRequest, *billing.MoneyBackCostSystem) error
	SetMoneyBackCostSystem(context.Context, *billing.MoneyBackCostSystem, *billing.MoneyBackCostSystem) error
	DeleteMoneyBackCostSystem(context.Context, *billing.PaymentCostDeleteRequest, *EmptyResponse) error
	GetAllMoneyBackCostMerchant(context.Context, *billing.MoneyBackCostMerchantListRequest, *billing.MoneyBackCostMerchantList) error
	GetMoneyBackCostMerchant(context.Context, *billing.MoneyBackCostMerchantRequest, *billing.MoneyBackCostMerchant) error
	SetMoneyBackCostMerchant(context.Context, *billing.MoneyBackCostMerchant, *billing.MoneyBackCostMerchant) error
	DeleteMoneyBackCostMerchant(context.Context, *billing.PaymentCostDeleteRequest, *EmptyResponse) error
	CreateAccountingEntry(context.Context, *CreateAccountingEntryRequest, *CreateAccountingEntryResponse) error
	CreateRoyaltyReport(context.Context, *CreateRoyaltyReportRequest, *CreateRoyaltyReportRequest) error
	// /////
	ListRoyaltyReports(context.Context, *ListRoyaltyReportsRequest, *ListRoyaltyReportsResponse) error
	ChangeRoyaltyReportStatus(context.Context, *CreateRoyaltyReportRequest, *CreateRoyaltyReportRequest) error
	ListRoyaltyReportOrders(context.Context, *CreateRoyaltyReportRequest, *CreateRoyaltyReportRequest) error
}

func RegisterBillingServiceHandler(s server.Server, hdlr BillingServiceHandler, opts ...server.HandlerOption) error {
	type billingService interface {
		OrderCreateProcess(ctx context.Context, in *billing.OrderCreateRequest, out *OrderCreateProcessResponse) error
		PaymentFormJsonDataProcess(ctx context.Context, in *PaymentFormJsonDataRequest, out *PaymentFormJsonDataResponse) error
		PaymentCreateProcess(ctx context.Context, in *PaymentCreateRequest, out *PaymentCreateResponse) error
		PaymentCallbackProcess(ctx context.Context, in *PaymentNotifyRequest, out *PaymentNotifyResponse) error
		UpdateOrder(ctx context.Context, in *billing.Order, out *EmptyResponse) error
		UpdateMerchant(ctx context.Context, in *billing.Merchant, out *EmptyResponse) error
		GetConvertRate(ctx context.Context, in *ConvertRateRequest, out *ConvertRateResponse) error
		GetMerchantBy(ctx context.Context, in *GetMerchantByRequest, out *GetMerchantResponse) error
		ListMerchants(ctx context.Context, in *MerchantListingRequest, out *MerchantListingResponse) error
		ChangeMerchant(ctx context.Context, in *OnboardingRequest, out *ChangeMerchantResponse) error
		ChangeMerchantStatus(ctx context.Context, in *MerchantChangeStatusRequest, out *ChangeMerchantStatusResponse) error
		ChangeMerchantData(ctx context.Context, in *ChangeMerchantDataRequest, out *ChangeMerchantDataResponse) error
		SetMerchantS3Agreement(ctx context.Context, in *SetMerchantS3AgreementRequest, out *ChangeMerchantDataResponse) error
		CreateNotification(ctx context.Context, in *NotificationRequest, out *CreateNotificationResponse) error
		GetNotification(ctx context.Context, in *GetNotificationRequest, out *billing.Notification) error
		ListNotifications(ctx context.Context, in *ListingNotificationRequest, out *Notifications) error
		MarkNotificationAsRead(ctx context.Context, in *GetNotificationRequest, out *billing.Notification) error
		ListMerchantPaymentMethods(ctx context.Context, in *ListMerchantPaymentMethodsRequest, out *ListingMerchantPaymentMethod) error
		GetMerchantPaymentMethod(ctx context.Context, in *GetMerchantPaymentMethodRequest, out *GetMerchantPaymentMethodResponse) error
		ChangeMerchantPaymentMethod(ctx context.Context, in *MerchantPaymentMethodRequest, out *MerchantPaymentMethodResponse) error
		CreateRefund(ctx context.Context, in *CreateRefundRequest, out *CreateRefundResponse) error
		ListRefunds(ctx context.Context, in *ListRefundsRequest, out *ListRefundsResponse) error
		GetRefund(ctx context.Context, in *GetRefundRequest, out *CreateRefundResponse) error
		ProcessRefundCallback(ctx context.Context, in *CallbackRequest, out *PaymentNotifyResponse) error
		PaymentFormLanguageChanged(ctx context.Context, in *PaymentFormUserChangeLangRequest, out *PaymentFormDataChangeResponse) error
		PaymentFormPaymentAccountChanged(ctx context.Context, in *PaymentFormUserChangePaymentAccountRequest, out *PaymentFormDataChangeResponse) error
		ProcessBillingAddress(ctx context.Context, in *ProcessBillingAddressRequest, out *ProcessBillingAddressResponse) error
		CreateOrUpdateProduct(ctx context.Context, in *Product, out *Product) error
		ListProducts(ctx context.Context, in *ListProductsRequest, out *ListProductsResponse) error
		GetProduct(ctx context.Context, in *RequestProduct, out *Product) error
		DeleteProduct(ctx context.Context, in *RequestProduct, out *EmptyResponse) error
		GetProductsForOrder(ctx context.Context, in *GetProductsForOrderRequest, out *ListProductsResponse) error
		ChangeProject(ctx context.Context, in *billing.Project, out *ChangeProjectResponse) error
		GetProject(ctx context.Context, in *GetProjectRequest, out *ChangeProjectResponse) error
		ListProjects(ctx context.Context, in *ListProjectsRequest, out *ListProjectsResponse) error
		DeleteProject(ctx context.Context, in *GetProjectRequest, out *ChangeProjectResponse) error
		CreateToken(ctx context.Context, in *TokenRequest, out *TokenResponse) error
		CheckProjectRequestSignature(ctx context.Context, in *CheckProjectRequestSignatureRequest, out *CheckProjectRequestSignatureResponse) error
		GetCountriesList(ctx context.Context, in *EmptyRequest, out *billing.CountriesList) error
		GetCountry(ctx context.Context, in *billing.GetCountryRequest, out *billing.Country) error
		UpdateCountry(ctx context.Context, in *billing.Country, out *billing.Country) error
		GetOrder(ctx context.Context, in *GetOrderRequest, out *billing.Order) error
		FindAllOrders(ctx context.Context, in *ListOrdersRequest, out *billing.OrderPaginate) error
		IsOrderCanBePaying(ctx context.Context, in *IsOrderCanBePayingRequest, out *IsOrderCanBePayingResponse) error
		GetPriceGroup(ctx context.Context, in *billing.GetPriceGroupRequest, out *billing.PriceGroup) error
		UpdatePriceGroup(ctx context.Context, in *billing.PriceGroup, out *billing.PriceGroup) error
		SetUserNotifySales(ctx context.Context, in *SetUserNotifyRequest, out *EmptyResponse) error
		SetUserNotifyNewRegion(ctx context.Context, in *SetUserNotifyRequest, out *EmptyResponse) error
		CreateOrUpdatePaymentMethod(ctx context.Context, in *billing.PaymentMethod, out *ChangePaymentMethodResponse) error
		CreateOrUpdatePaymentMethodProductionSettings(ctx context.Context, in *ChangePaymentMethodParamsRequest, out *ChangePaymentMethodParamsResponse) error
		GetPaymentMethodProductionSettings(ctx context.Context, in *GetPaymentMethodProductionSettingsRequest, out *billing.PaymentMethodParams) error
		DeletePaymentMethodProductionSettings(ctx context.Context, in *GetPaymentMethodProductionSettingsRequest, out *ChangePaymentMethodParamsResponse) error
		GetCurrencyList(ctx context.Context, in *EmptyRequest, out *billing.CurrencyList) error
		GetCurrency(ctx context.Context, in *billing.GetCurrencyRequest, out *billing.Currency) error
		FindByZipCode(ctx context.Context, in *FindByZipCodeRequest, out *FindByZipCodeResponse) error
		GetAllPaymentChannelCostSystem(ctx context.Context, in *EmptyRequest, out *billing.PaymentChannelCostSystemList) error
		GetPaymentChannelCostSystem(ctx context.Context, in *billing.PaymentChannelCostSystemRequest, out *billing.PaymentChannelCostSystem) error
		SetPaymentChannelCostSystem(ctx context.Context, in *billing.PaymentChannelCostSystem, out *billing.PaymentChannelCostSystem) error
		DeletePaymentChannelCostSystem(ctx context.Context, in *billing.PaymentCostDeleteRequest, out *EmptyResponse) error
		GetAllPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchantListRequest, out *billing.PaymentChannelCostMerchantList) error
		GetPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchantRequest, out *billing.PaymentChannelCostMerchant) error
		SetPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchant, out *billing.PaymentChannelCostMerchant) error
		DeletePaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentCostDeleteRequest, out *EmptyResponse) error
		GetAllMoneyBackCostSystem(ctx context.Context, in *EmptyRequest, out *billing.MoneyBackCostSystemList) error
		GetMoneyBackCostSystem(ctx context.Context, in *billing.MoneyBackCostSystemRequest, out *billing.MoneyBackCostSystem) error
		SetMoneyBackCostSystem(ctx context.Context, in *billing.MoneyBackCostSystem, out *billing.MoneyBackCostSystem) error
		DeleteMoneyBackCostSystem(ctx context.Context, in *billing.PaymentCostDeleteRequest, out *EmptyResponse) error
		GetAllMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchantListRequest, out *billing.MoneyBackCostMerchantList) error
		GetMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchantRequest, out *billing.MoneyBackCostMerchant) error
		SetMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchant, out *billing.MoneyBackCostMerchant) error
		DeleteMoneyBackCostMerchant(ctx context.Context, in *billing.PaymentCostDeleteRequest, out *EmptyResponse) error
		CreateAccountingEntry(ctx context.Context, in *CreateAccountingEntryRequest, out *CreateAccountingEntryResponse) error
		CreateRoyaltyReport(ctx context.Context, in *CreateRoyaltyReportRequest, out *CreateRoyaltyReportRequest) error
		ListRoyaltyReports(ctx context.Context, in *ListRoyaltyReportsRequest, out *ListRoyaltyReportsResponse) error
		ChangeRoyaltyReportStatus(ctx context.Context, in *CreateRoyaltyReportRequest, out *CreateRoyaltyReportRequest) error
		ListRoyaltyReportOrders(ctx context.Context, in *CreateRoyaltyReportRequest, out *CreateRoyaltyReportRequest) error
	}
	type BillingService struct {
		billingService
	}
	h := &billingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BillingService{h}, opts...))
}

type billingServiceHandler struct {
	BillingServiceHandler
}

func (h *billingServiceHandler) OrderCreateProcess(ctx context.Context, in *billing.OrderCreateRequest, out *OrderCreateProcessResponse) error {
	return h.BillingServiceHandler.OrderCreateProcess(ctx, in, out)
}

func (h *billingServiceHandler) PaymentFormJsonDataProcess(ctx context.Context, in *PaymentFormJsonDataRequest, out *PaymentFormJsonDataResponse) error {
	return h.BillingServiceHandler.PaymentFormJsonDataProcess(ctx, in, out)
}

func (h *billingServiceHandler) PaymentCreateProcess(ctx context.Context, in *PaymentCreateRequest, out *PaymentCreateResponse) error {
	return h.BillingServiceHandler.PaymentCreateProcess(ctx, in, out)
}

func (h *billingServiceHandler) PaymentCallbackProcess(ctx context.Context, in *PaymentNotifyRequest, out *PaymentNotifyResponse) error {
	return h.BillingServiceHandler.PaymentCallbackProcess(ctx, in, out)
}

func (h *billingServiceHandler) UpdateOrder(ctx context.Context, in *billing.Order, out *EmptyResponse) error {
	return h.BillingServiceHandler.UpdateOrder(ctx, in, out)
}

func (h *billingServiceHandler) UpdateMerchant(ctx context.Context, in *billing.Merchant, out *EmptyResponse) error {
	return h.BillingServiceHandler.UpdateMerchant(ctx, in, out)
}

func (h *billingServiceHandler) GetConvertRate(ctx context.Context, in *ConvertRateRequest, out *ConvertRateResponse) error {
	return h.BillingServiceHandler.GetConvertRate(ctx, in, out)
}

func (h *billingServiceHandler) GetMerchantBy(ctx context.Context, in *GetMerchantByRequest, out *GetMerchantResponse) error {
	return h.BillingServiceHandler.GetMerchantBy(ctx, in, out)
}

func (h *billingServiceHandler) ListMerchants(ctx context.Context, in *MerchantListingRequest, out *MerchantListingResponse) error {
	return h.BillingServiceHandler.ListMerchants(ctx, in, out)
}

func (h *billingServiceHandler) ChangeMerchant(ctx context.Context, in *OnboardingRequest, out *ChangeMerchantResponse) error {
	return h.BillingServiceHandler.ChangeMerchant(ctx, in, out)
}

func (h *billingServiceHandler) ChangeMerchantStatus(ctx context.Context, in *MerchantChangeStatusRequest, out *ChangeMerchantStatusResponse) error {
	return h.BillingServiceHandler.ChangeMerchantStatus(ctx, in, out)
}

func (h *billingServiceHandler) ChangeMerchantData(ctx context.Context, in *ChangeMerchantDataRequest, out *ChangeMerchantDataResponse) error {
	return h.BillingServiceHandler.ChangeMerchantData(ctx, in, out)
}

func (h *billingServiceHandler) SetMerchantS3Agreement(ctx context.Context, in *SetMerchantS3AgreementRequest, out *ChangeMerchantDataResponse) error {
	return h.BillingServiceHandler.SetMerchantS3Agreement(ctx, in, out)
}

func (h *billingServiceHandler) CreateNotification(ctx context.Context, in *NotificationRequest, out *CreateNotificationResponse) error {
	return h.BillingServiceHandler.CreateNotification(ctx, in, out)
}

func (h *billingServiceHandler) GetNotification(ctx context.Context, in *GetNotificationRequest, out *billing.Notification) error {
	return h.BillingServiceHandler.GetNotification(ctx, in, out)
}

func (h *billingServiceHandler) ListNotifications(ctx context.Context, in *ListingNotificationRequest, out *Notifications) error {
	return h.BillingServiceHandler.ListNotifications(ctx, in, out)
}

func (h *billingServiceHandler) MarkNotificationAsRead(ctx context.Context, in *GetNotificationRequest, out *billing.Notification) error {
	return h.BillingServiceHandler.MarkNotificationAsRead(ctx, in, out)
}

func (h *billingServiceHandler) ListMerchantPaymentMethods(ctx context.Context, in *ListMerchantPaymentMethodsRequest, out *ListingMerchantPaymentMethod) error {
	return h.BillingServiceHandler.ListMerchantPaymentMethods(ctx, in, out)
}

func (h *billingServiceHandler) GetMerchantPaymentMethod(ctx context.Context, in *GetMerchantPaymentMethodRequest, out *GetMerchantPaymentMethodResponse) error {
	return h.BillingServiceHandler.GetMerchantPaymentMethod(ctx, in, out)
}

func (h *billingServiceHandler) ChangeMerchantPaymentMethod(ctx context.Context, in *MerchantPaymentMethodRequest, out *MerchantPaymentMethodResponse) error {
	return h.BillingServiceHandler.ChangeMerchantPaymentMethod(ctx, in, out)
}

func (h *billingServiceHandler) CreateRefund(ctx context.Context, in *CreateRefundRequest, out *CreateRefundResponse) error {
	return h.BillingServiceHandler.CreateRefund(ctx, in, out)
}

func (h *billingServiceHandler) ListRefunds(ctx context.Context, in *ListRefundsRequest, out *ListRefundsResponse) error {
	return h.BillingServiceHandler.ListRefunds(ctx, in, out)
}

func (h *billingServiceHandler) GetRefund(ctx context.Context, in *GetRefundRequest, out *CreateRefundResponse) error {
	return h.BillingServiceHandler.GetRefund(ctx, in, out)
}

func (h *billingServiceHandler) ProcessRefundCallback(ctx context.Context, in *CallbackRequest, out *PaymentNotifyResponse) error {
	return h.BillingServiceHandler.ProcessRefundCallback(ctx, in, out)
}

func (h *billingServiceHandler) PaymentFormLanguageChanged(ctx context.Context, in *PaymentFormUserChangeLangRequest, out *PaymentFormDataChangeResponse) error {
	return h.BillingServiceHandler.PaymentFormLanguageChanged(ctx, in, out)
}

func (h *billingServiceHandler) PaymentFormPaymentAccountChanged(ctx context.Context, in *PaymentFormUserChangePaymentAccountRequest, out *PaymentFormDataChangeResponse) error {
	return h.BillingServiceHandler.PaymentFormPaymentAccountChanged(ctx, in, out)
}

func (h *billingServiceHandler) ProcessBillingAddress(ctx context.Context, in *ProcessBillingAddressRequest, out *ProcessBillingAddressResponse) error {
	return h.BillingServiceHandler.ProcessBillingAddress(ctx, in, out)
}

func (h *billingServiceHandler) CreateOrUpdateProduct(ctx context.Context, in *Product, out *Product) error {
	return h.BillingServiceHandler.CreateOrUpdateProduct(ctx, in, out)
}

func (h *billingServiceHandler) ListProducts(ctx context.Context, in *ListProductsRequest, out *ListProductsResponse) error {
	return h.BillingServiceHandler.ListProducts(ctx, in, out)
}

func (h *billingServiceHandler) GetProduct(ctx context.Context, in *RequestProduct, out *Product) error {
	return h.BillingServiceHandler.GetProduct(ctx, in, out)
}

func (h *billingServiceHandler) DeleteProduct(ctx context.Context, in *RequestProduct, out *EmptyResponse) error {
	return h.BillingServiceHandler.DeleteProduct(ctx, in, out)
}

func (h *billingServiceHandler) GetProductsForOrder(ctx context.Context, in *GetProductsForOrderRequest, out *ListProductsResponse) error {
	return h.BillingServiceHandler.GetProductsForOrder(ctx, in, out)
}

func (h *billingServiceHandler) ChangeProject(ctx context.Context, in *billing.Project, out *ChangeProjectResponse) error {
	return h.BillingServiceHandler.ChangeProject(ctx, in, out)
}

func (h *billingServiceHandler) GetProject(ctx context.Context, in *GetProjectRequest, out *ChangeProjectResponse) error {
	return h.BillingServiceHandler.GetProject(ctx, in, out)
}

func (h *billingServiceHandler) ListProjects(ctx context.Context, in *ListProjectsRequest, out *ListProjectsResponse) error {
	return h.BillingServiceHandler.ListProjects(ctx, in, out)
}

func (h *billingServiceHandler) DeleteProject(ctx context.Context, in *GetProjectRequest, out *ChangeProjectResponse) error {
	return h.BillingServiceHandler.DeleteProject(ctx, in, out)
}

func (h *billingServiceHandler) CreateToken(ctx context.Context, in *TokenRequest, out *TokenResponse) error {
	return h.BillingServiceHandler.CreateToken(ctx, in, out)
}

func (h *billingServiceHandler) CheckProjectRequestSignature(ctx context.Context, in *CheckProjectRequestSignatureRequest, out *CheckProjectRequestSignatureResponse) error {
	return h.BillingServiceHandler.CheckProjectRequestSignature(ctx, in, out)
}

func (h *billingServiceHandler) GetCountriesList(ctx context.Context, in *EmptyRequest, out *billing.CountriesList) error {
	return h.BillingServiceHandler.GetCountriesList(ctx, in, out)
}

func (h *billingServiceHandler) GetCountry(ctx context.Context, in *billing.GetCountryRequest, out *billing.Country) error {
	return h.BillingServiceHandler.GetCountry(ctx, in, out)
}

func (h *billingServiceHandler) UpdateCountry(ctx context.Context, in *billing.Country, out *billing.Country) error {
	return h.BillingServiceHandler.UpdateCountry(ctx, in, out)
}

func (h *billingServiceHandler) GetOrder(ctx context.Context, in *GetOrderRequest, out *billing.Order) error {
	return h.BillingServiceHandler.GetOrder(ctx, in, out)
}

func (h *billingServiceHandler) FindAllOrders(ctx context.Context, in *ListOrdersRequest, out *billing.OrderPaginate) error {
	return h.BillingServiceHandler.FindAllOrders(ctx, in, out)
}

func (h *billingServiceHandler) IsOrderCanBePaying(ctx context.Context, in *IsOrderCanBePayingRequest, out *IsOrderCanBePayingResponse) error {
	return h.BillingServiceHandler.IsOrderCanBePaying(ctx, in, out)
}

func (h *billingServiceHandler) GetPriceGroup(ctx context.Context, in *billing.GetPriceGroupRequest, out *billing.PriceGroup) error {
	return h.BillingServiceHandler.GetPriceGroup(ctx, in, out)
}

func (h *billingServiceHandler) UpdatePriceGroup(ctx context.Context, in *billing.PriceGroup, out *billing.PriceGroup) error {
	return h.BillingServiceHandler.UpdatePriceGroup(ctx, in, out)
}

func (h *billingServiceHandler) SetUserNotifySales(ctx context.Context, in *SetUserNotifyRequest, out *EmptyResponse) error {
	return h.BillingServiceHandler.SetUserNotifySales(ctx, in, out)
}

func (h *billingServiceHandler) SetUserNotifyNewRegion(ctx context.Context, in *SetUserNotifyRequest, out *EmptyResponse) error {
	return h.BillingServiceHandler.SetUserNotifyNewRegion(ctx, in, out)
}

func (h *billingServiceHandler) CreateOrUpdatePaymentMethod(ctx context.Context, in *billing.PaymentMethod, out *ChangePaymentMethodResponse) error {
	return h.BillingServiceHandler.CreateOrUpdatePaymentMethod(ctx, in, out)
}

func (h *billingServiceHandler) CreateOrUpdatePaymentMethodProductionSettings(ctx context.Context, in *ChangePaymentMethodParamsRequest, out *ChangePaymentMethodParamsResponse) error {
	return h.BillingServiceHandler.CreateOrUpdatePaymentMethodProductionSettings(ctx, in, out)
}

func (h *billingServiceHandler) GetPaymentMethodProductionSettings(ctx context.Context, in *GetPaymentMethodProductionSettingsRequest, out *billing.PaymentMethodParams) error {
	return h.BillingServiceHandler.GetPaymentMethodProductionSettings(ctx, in, out)
}

func (h *billingServiceHandler) DeletePaymentMethodProductionSettings(ctx context.Context, in *GetPaymentMethodProductionSettingsRequest, out *ChangePaymentMethodParamsResponse) error {
	return h.BillingServiceHandler.DeletePaymentMethodProductionSettings(ctx, in, out)
}

func (h *billingServiceHandler) GetCurrencyList(ctx context.Context, in *EmptyRequest, out *billing.CurrencyList) error {
	return h.BillingServiceHandler.GetCurrencyList(ctx, in, out)
}

func (h *billingServiceHandler) GetCurrency(ctx context.Context, in *billing.GetCurrencyRequest, out *billing.Currency) error {
	return h.BillingServiceHandler.GetCurrency(ctx, in, out)
}

func (h *billingServiceHandler) FindByZipCode(ctx context.Context, in *FindByZipCodeRequest, out *FindByZipCodeResponse) error {
	return h.BillingServiceHandler.FindByZipCode(ctx, in, out)
}

func (h *billingServiceHandler) GetAllPaymentChannelCostSystem(ctx context.Context, in *EmptyRequest, out *billing.PaymentChannelCostSystemList) error {
	return h.BillingServiceHandler.GetAllPaymentChannelCostSystem(ctx, in, out)
}

func (h *billingServiceHandler) GetPaymentChannelCostSystem(ctx context.Context, in *billing.PaymentChannelCostSystemRequest, out *billing.PaymentChannelCostSystem) error {
	return h.BillingServiceHandler.GetPaymentChannelCostSystem(ctx, in, out)
}

func (h *billingServiceHandler) SetPaymentChannelCostSystem(ctx context.Context, in *billing.PaymentChannelCostSystem, out *billing.PaymentChannelCostSystem) error {
	return h.BillingServiceHandler.SetPaymentChannelCostSystem(ctx, in, out)
}

func (h *billingServiceHandler) DeletePaymentChannelCostSystem(ctx context.Context, in *billing.PaymentCostDeleteRequest, out *EmptyResponse) error {
	return h.BillingServiceHandler.DeletePaymentChannelCostSystem(ctx, in, out)
}

func (h *billingServiceHandler) GetAllPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchantListRequest, out *billing.PaymentChannelCostMerchantList) error {
	return h.BillingServiceHandler.GetAllPaymentChannelCostMerchant(ctx, in, out)
}

func (h *billingServiceHandler) GetPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchantRequest, out *billing.PaymentChannelCostMerchant) error {
	return h.BillingServiceHandler.GetPaymentChannelCostMerchant(ctx, in, out)
}

func (h *billingServiceHandler) SetPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchant, out *billing.PaymentChannelCostMerchant) error {
	return h.BillingServiceHandler.SetPaymentChannelCostMerchant(ctx, in, out)
}

func (h *billingServiceHandler) DeletePaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentCostDeleteRequest, out *EmptyResponse) error {
	return h.BillingServiceHandler.DeletePaymentChannelCostMerchant(ctx, in, out)
}

func (h *billingServiceHandler) GetAllMoneyBackCostSystem(ctx context.Context, in *EmptyRequest, out *billing.MoneyBackCostSystemList) error {
	return h.BillingServiceHandler.GetAllMoneyBackCostSystem(ctx, in, out)
}

func (h *billingServiceHandler) GetMoneyBackCostSystem(ctx context.Context, in *billing.MoneyBackCostSystemRequest, out *billing.MoneyBackCostSystem) error {
	return h.BillingServiceHandler.GetMoneyBackCostSystem(ctx, in, out)
}

func (h *billingServiceHandler) SetMoneyBackCostSystem(ctx context.Context, in *billing.MoneyBackCostSystem, out *billing.MoneyBackCostSystem) error {
	return h.BillingServiceHandler.SetMoneyBackCostSystem(ctx, in, out)
}

func (h *billingServiceHandler) DeleteMoneyBackCostSystem(ctx context.Context, in *billing.PaymentCostDeleteRequest, out *EmptyResponse) error {
	return h.BillingServiceHandler.DeleteMoneyBackCostSystem(ctx, in, out)
}

func (h *billingServiceHandler) GetAllMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchantListRequest, out *billing.MoneyBackCostMerchantList) error {
	return h.BillingServiceHandler.GetAllMoneyBackCostMerchant(ctx, in, out)
}

func (h *billingServiceHandler) GetMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchantRequest, out *billing.MoneyBackCostMerchant) error {
	return h.BillingServiceHandler.GetMoneyBackCostMerchant(ctx, in, out)
}

func (h *billingServiceHandler) SetMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchant, out *billing.MoneyBackCostMerchant) error {
	return h.BillingServiceHandler.SetMoneyBackCostMerchant(ctx, in, out)
}

func (h *billingServiceHandler) DeleteMoneyBackCostMerchant(ctx context.Context, in *billing.PaymentCostDeleteRequest, out *EmptyResponse) error {
	return h.BillingServiceHandler.DeleteMoneyBackCostMerchant(ctx, in, out)
}

func (h *billingServiceHandler) CreateAccountingEntry(ctx context.Context, in *CreateAccountingEntryRequest, out *CreateAccountingEntryResponse) error {
	return h.BillingServiceHandler.CreateAccountingEntry(ctx, in, out)
}

func (h *billingServiceHandler) CreateRoyaltyReport(ctx context.Context, in *CreateRoyaltyReportRequest, out *CreateRoyaltyReportRequest) error {
	return h.BillingServiceHandler.CreateRoyaltyReport(ctx, in, out)
}

func (h *billingServiceHandler) ListRoyaltyReports(ctx context.Context, in *ListRoyaltyReportsRequest, out *ListRoyaltyReportsResponse) error {
	return h.BillingServiceHandler.ListRoyaltyReports(ctx, in, out)
}

func (h *billingServiceHandler) ChangeRoyaltyReportStatus(ctx context.Context, in *CreateRoyaltyReportRequest, out *CreateRoyaltyReportRequest) error {
	return h.BillingServiceHandler.ChangeRoyaltyReportStatus(ctx, in, out)
}

func (h *billingServiceHandler) ListRoyaltyReportOrders(ctx context.Context, in *CreateRoyaltyReportRequest, out *CreateRoyaltyReportRequest) error {
	return h.BillingServiceHandler.ListRoyaltyReportOrders(ctx, in, out)
}
