syntax = "proto3";

option go_package = "github.com/paysuper/paysuper-billing-server/pkg/proto/grpc";
package grpc;

import "billing/billing.proto";

service BillingService {
    rpc OrderCreateProcess (billing.OrderCreateRequest) returns (billing.Order) {}
    rpc PaymentFormJsonDataProcess (PaymentFormJsonDataRequest) returns (PaymentFormJsonDataResponse) {}
    rpc PaymentCreateProcess (PaymentCreateRequest) returns (PaymentCreateResponse) {}
    rpc PaymentCallbackProcess (PaymentNotifyRequest) returns (PaymentNotifyResponse) {}

    rpc RebuildCache (EmptyRequest) returns (EmptyResponse) {}
    rpc UpdateOrder (billing.Order) returns (EmptyResponse) {}
    rpc UpdateMerchant (billing.Merchant) returns (EmptyResponse) {}
    rpc GetConvertRate (ConvertRateRequest) returns (ConvertRateResponse) {}

    rpc GetMerchantById(FindByIdRequest) returns (MerchantPaymentMethodResponse) {}
    rpc ListMerchants(MerchantListingRequest) returns (Merchants) {}
    rpc ChangeMerchant(OnboardingRequest) returns (billing.Merchant) {}
    rpc ChangeMerchantStatus(MerchantChangeStatusRequest) returns (billing.Merchant) {}

    rpc CreateNotification(NotificationRequest) returns (billing.Notification) {}
    rpc GetNotification(FindByIdRequest) returns (billing.Notification) {}
    rpc ListNotifications(ListingNotificationRequest) returns (Notifications) {}
    rpc MarkNotificationAsRead(FindByIdRequest) returns (billing.Notification) {}

    rpc ListMerchantPaymentMethods(ListMerchantPaymentMethodsRequest) returns (ListingMerchantPaymentMethod) {}
    rpc GetMerchantPaymentMethod(GetMerchantPaymentMethodRequest) returns (billing.MerchantPaymentMethod) {}
    rpc ChangeMerchantPaymentMethod(MerchantPaymentMethodRequest) returns (MerchantPaymentMethodResponse) {}
}

message EmptyRequest {}
message EmptyResponse {}

message PaymentCreateRequest {
    map<string, string> data = 1;
}

message PaymentCreateResponse {
    int32 status = 1;
    string redirect_url = 2;
    string error = 3;
}

message PaymentFormJsonDataRequest {
    string order_id = 1;
    string scheme = 2;
    string host = 3;
}

message PaymentFormJsonDataProject {
    string name = 1; // project name
    // @inject_tag: json:"url_success,omitempty"
    string url_success = 2; // url to redirect user after successfully completed payment. may be NULL if not set in project settings
    // @inject_tag: json:"url_fail,omitempty"
    string url_fail = 3; // url to redirect user after failed payment. may be NULL if not set in project settings
}

message PaymentFormJsonDataResponse {
    string id = 1; // order unique identifier
    // @inject_tag: json:"account,omitempty"
    string account = 2; // user account, may be null
    bool has_vat = 3; // flag to show VAT commission amount in payment form
    bool has_user_commission = 4; // flag to show commission amount changed to user in payment form
    PaymentFormJsonDataProject project = 5; // contain data about project
    repeated billing.PaymentFormPaymentMethod payment_methods = 6; // contain data about payment methods
    string inline_form_redirect_url = 7; // url to redirect user to inline form in PSP side
    string token = 8; // access token to websocket private chanel
}

message PaymentNotifyRequest {
    string order_id = 1;
    bytes request = 2;
    string signature = 3;
}

message PaymentNotifyResponse {
    int32 status = 1;
    string error = 2;
}

message ConvertRateRequest {
    int32 from = 1;
    int32 to = 2;
}

message ConvertRateResponse {
    double rate = 1;
}

message OnboardingBanking {
    //@inject_tag: validate:"omitempty,len=3"
    string currency = 1;
    string name = 2;
    string address = 3;
    string account_number = 4;
    string swift = 5;
    string details = 6;
}

message OnboardingRequest {
    string id = 1;
    //@inject_tag: validate:"required"
    string name = 3;
    string alternative_name = 4;
    string website = 5;
    //@inject_tag: validate:"omitempty,len=2"
    string country = 6;
    string state = 7;
    string zip = 8;
    string city = 9;
    string address = 10;
    string address_additional = 11;
    string registration_number = 12;
    string tax_id = 13;
    // @inject_tag: validate:"required,dive"
    billing.MerchantContact contacts = 14;
    // @inject_tag: validate:"required,dive"
    OnboardingBanking banking = 15;
}

message FindByIdRequest {
    string id = 1;
}

message MerchantListingRequest {
    string name = 1;
    int32 is_signed = 2;
    int64 last_payout_date_from = 3;
    int64 last_payout_date_to = 4;
    double last_payout_amount = 5;
    repeated string sort = 6;
    int32 limit = 7;
    int32 offset = 8;
}

message Merchants {
    repeated billing.Merchant merchants = 1;
}

message MerchantChangeStatusRequest {
    // @inject_tag: validate:"required,hexadecimal"
    string merchant_id = 1;
    string user_id = 2;
    // @inject_tag: validate:"required,numeric"
    int32 status = 3;
    string message = 4;
}

message NotificationRequest {
    // @inject_tag: validate:"required,hexadecimal"
    string merchant_id = 1;
    string user_id = 2;
    // @inject_tag: validate:"required"
    string title = 3;
    // @inject_tag: validate:"required"
    string message = 4;
}

message Notifications {
    repeated billing.Notification notifications = 1;
}

message ListingNotificationRequest {
    string merchant_id = 1;
    string user_id = 2;
    int32 limit = 7;
    int32 offset = 8;
}

message ListingMerchantPaymentMethod {
    repeated billing.MerchantPaymentMethod payment_methods = 1;
}

message GetMerchantPaymentMethodRequest {
    // @inject_tag: query:"merchant_id", validate:"required,hexadecimal,len=24"
    string merchant_id = 1;
    // @inject_tag: query:"payment_method_id", validate:"required,hexadecimal,len=24"
    string payment_method_id = 2;
}

message ListMerchantPaymentMethodsRequest {
    // @inject_tag: query:"merchant_id", validate:"required,hexadecimal,len=24"
    string merchant_id = 1;
    // @inject_tag: query:"payment_method_name"
    string payment_method_name = 2;
}

message MerchantPaymentMethodRequest {
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string merchant_id = 2;
    // @inject_tag: validate:"required,dive"
    billing.MerchantPaymentMethodIdentification payment_method = 3;
    // @inject_tag: validate:"required,dive"
    billing.MerchantPaymentMethodCommissions commission = 4;
    // @inject_tag: validate:"required,dive"
    billing.MerchantPaymentMethodIntegration integration = 5;
    // @inject_tag: validate:"required"
    bool is_active = 6;
}

message MerchantPaymentMethodResponse {
    int32 status = 1;
    string message = 2;
    billing.Merchant item = 3;
}