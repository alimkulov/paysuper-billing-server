// Code generated by protoc-gen-go. DO NOT EDIT.
// source: billing/billing.proto

/*
Package billing is a generated protocol buffer package.

It is generated from these files:
	billing/billing.proto

It has these top-level messages:
	Name
	OrderCreateRequest
	Project
	ProjectOrder
	MerchantContact
	MerchantContactTechnical
	MerchantContactAuthorized
	MerchantBanking
	MerchantLastPayout
	MerchantUser
	MerchantCompanyInfo
	MerchantCompletedSteps
	MerchantAgreementSignatureDataSignUrl
	MerchantAgreementSignatureData
	MerchantTariff
	Merchant
	MerchantCommon
	SystemNotificationStatuses
	Notification
	OrderPlatformFee
	OrderTax
	OrderBillingAddress
	OrderUser
	OrderNotificationCancellation
	Order
	ParentOrder
	CountryRestriction
	OrderItem
	OrderPaginate
	PaymentMethodOrder
	PaymentMethodParams
	PaymentSystem
	PaymentMethodCard
	PaymentMethodWallet
	PaymentMethodCrypto
	ProjectPaymentMethod
	PaymentMethod
	Commission
	CardExpire
	SavedCard
	PaymentFormPaymentMethod
	MerchantPaymentMethodPerTransactionCommission
	MerchantPaymentMethodCommissions
	MerchantPaymentMethodIntegration
	MerchantPaymentMethodIdentification
	MerchantPaymentMethod
	RefundPayerData
	RefundOrder
	Refund
	MerchantPaymentMethodHistory
	CustomerIdentity
	CustomerIpHistory
	CustomerAddressHistory
	CustomerStringValueHistory
	Customer
	TokenUserEmailValue
	TokenUserPhoneValue
	TokenUserIpValue
	TokenUserLocaleValue
	TokenUserValue
	TokenUser
	TokenSettingsReturnUrl
	TokenSettingsItem
	TokenSettings
	OrderIssuer
	OrderNotificationRefund
	GetCountryRequest
	CountryVatThreshold
	Country
	CountriesList
	GetPriceGroupRequest
	PriceGroup
	ZipCodeState
	ZipCode
	PaymentChannelCostSystem
	PaymentChannelCostSystemRequest
	PaymentChannelCostSystemList
	PaymentChannelCostMerchant
	PaymentChannelCostMerchantRequest
	PaymentChannelCostMerchantList
	PaymentChannelCostMerchantListRequest
	MoneyBackCostSystem
	MoneyBackCostSystemRequest
	MoneyBackCostSystemList
	MoneyBackCostMerchant
	MoneyBackCostMerchantRequest
	PaymentCostDeleteRequest
	MoneyBackCostMerchantList
	MoneyBackCostMerchantListRequest
	PayoutCostSystem
	AccountingEntrySource
	AccountingEntry
	RoyaltyReportTotals
	RoyaltyReportProductSummaryItem
	RoyaltyReportCorrectionItem
	RoyaltyReportSummary
	RoyaltyReport
	RoyaltyReportChanges
	VatTransaction
	VatReport
	AnnualTurnover
	OrderViewMoney
	OrderViewPublic
	OrderViewPrivate
	RecommendedPrice
	PriceTable
	PriceTableRange
	Id
	RangeInt
	MerchantTariffRatesPayment
	MerchantTariffRatesSettingsItem
	MerchantTariffRatesSettings
	Key
	PayoutDocument
	PayoutDocumentChanges
	MerchantBalance
	OrderReceipt
	OrderReceiptItem
	HasCurrencyItem
	LocalizedUrl
	ImageCollection
	ProductPrice
	ProjectVirtualCurrency
	OrderCreateByPaylink
	UserIpData
	PaymentFormDataChangeResponseItem
	OperatingCompany
	PaymentMinLimitSystem
	UserRole
	RoleListItem
*/
package billing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Name struct {
	// @inject_tag: bson:"EN" json:"EN" structure:"EN"
	En string `protobuf:"bytes,1,opt,name=en" json:"EN" bson:"EN" structure:"EN"`
	// @inject_tag: bson:"RU" json:"RU" structure:"RU"
	Ru string `protobuf:"bytes,2,opt,name=ru" json:"RU" bson:"RU" structure:"RU"`
}

func (m *Name) Reset()                    { *m = Name{} }
func (m *Name) String() string            { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()               {}
func (*Name) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Name) GetEn() string {
	if m != nil {
		return m.En
	}
	return ""
}

func (m *Name) GetRu() string {
	if m != nil {
		return m.Ru
	}
	return ""
}

type OrderCreateRequest struct {
	// @inject_tag: query:"PO_PROJECT_ID" form:"PO_PROJECT_ID" json:"project" validate:"omitempty,hexadecimal"
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project" query:"PO_PROJECT_ID" form:"PO_PROJECT_ID" validate:"omitempty,hexadecimal"`
	// @inject_tag: query:"PO_SIGNATURE" form:"PO_SIGNATURE" validate:"omitempty,alphanum"
	Signature string `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty" query:"PO_SIGNATURE" form:"PO_SIGNATURE" validate:"omitempty,alphanum"`
	// @inject_tag: query:"PO_AMOUNT" form:"PO_AMOUNT" json:"amount" validate:"omitempty,numeric,gte=0"
	Amount float64 `protobuf:"fixed64,3,opt,name=amount" json:"amount" query:"PO_AMOUNT" form:"PO_AMOUNT" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: query:"PO_CURRENCY" form:"PO_CURRENCY" json:"currency" validate:"omitempty,alpha,len=3"
	Currency string `protobuf:"bytes,4,opt,name=currency" json:"currency" query:"PO_CURRENCY" form:"PO_CURRENCY" validate:"omitempty,alpha,len=3"`
	// @inject_tag: "PO_ACCOUNT" form:"PO_ACCOUNT" json:"account"`
	Account string `protobuf:"bytes,5,opt,name=account" json:"account" form:"PO_ACCOUNT"`
	// @inject_tag: query:"PO_ORDER_ID" form:"PO_ORDER_ID" json:"order_id" validate:"omitempty,max=255"
	OrderId string `protobuf:"bytes,6,opt,name=order_id,json=orderId" json:"order_id" query:"PO_ORDER_ID" form:"PO_ORDER_ID" validate:"omitempty,max=255"`
	// @inject_tag: query:"PO_DESCRIPTION" form:"PO_DESCRIPTION" json:"description" validate:"omitempty,max=255"
	Description string `protobuf:"bytes,7,opt,name=description" json:"description" query:"PO_DESCRIPTION" form:"PO_DESCRIPTION" validate:"omitempty,max=255"`
	// @inject_tag: query:"PO_PAYMENT_METHOD" form:"PO_PAYMENT_METHOD" json:"payment_method" validate:"omitempty,max=255"
	PaymentMethod string `protobuf:"bytes,8,opt,name=payment_method,json=paymentMethod" json:"payment_method" query:"PO_PAYMENT_METHOD" form:"PO_PAYMENT_METHOD" validate:"omitempty,max=255"`
	// @inject_tag: query:"PO_URL_VERIFY" form:"PO_URL_VERIFY" json:"url_verify" validate:"omitempty,url"
	UrlVerify string `protobuf:"bytes,9,opt,name=url_verify,json=urlVerify" json:"url_verify" query:"PO_URL_VERIFY" form:"PO_URL_VERIFY" validate:"omitempty,url"`
	// @inject_tag: query:"PO_URL_NOTIFY" form:"PO_URL_NOTIFY" json:"url_notify" validate:"omitempty,url"
	UrlNotify string `protobuf:"bytes,10,opt,name=url_notify,json=urlNotify" json:"url_notify" query:"PO_URL_NOTIFY" form:"PO_URL_NOTIFY" validate:"omitempty,url"`
	// @inject_tag: query:"PO_URL_SUCCESS" form:"PO_URL_SUCCESS" json:"url_success" validate:"omitempty,url"
	UrlSuccess string `protobuf:"bytes,11,opt,name=url_success,json=urlSuccess" json:"url_success" query:"PO_URL_SUCCESS" form:"PO_URL_SUCCESS" validate:"omitempty,url"`
	// @inject_tag: query:"PO_URL_FAIL" form:"PO_URL_FAIL" json:"url_fail" validate:"omitempty,url"
	UrlFail string `protobuf:"bytes,12,opt,name=url_fail,json=urlFail" json:"url_fail" query:"PO_URL_FAIL" form:"PO_URL_FAIL" validate:"omitempty,url"`
	// @inject_tag: query:"PO_PAYER_EMAIL" form:"PO_PAYER_EMAIL" json:"payer_email" validate:"omitempty,email"
	PayerEmail string `protobuf:"bytes,13,opt,name=payer_email,json=payerEmail" json:"payer_email" query:"PO_PAYER_EMAIL" form:"PO_PAYER_EMAIL" validate:"omitempty,email"`
	// @inject_tag: query:"PO_PAYER_PHONE" form:"PO_PAYER_PHONE" json:"payer_phone" validate:"omitempty,max=255"
	PayerPhone string `protobuf:"bytes,14,opt,name=payer_phone,json=payerPhone" json:"payer_phone" query:"PO_PAYER_PHONE" form:"PO_PAYER_PHONE" validate:"omitempty,max=255"`
	// @inject_tag: query:"PO_REGION" form:"PO_REGION" json:"region" validate:"omitempty,alpha,len=2"
	Region string            `protobuf:"bytes,15,opt,name=region" json:"region" query:"PO_REGION" form:"PO_REGION" validate:"omitempty,alpha,len=2"`
	Other  map[string]string `protobuf:"bytes,17,rep,name=other" json:"other,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"-"
	RawParams map[string]string `protobuf:"bytes,18,rep,name=raw_params,json=rawParams" json:"-" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"-"
	RawBody string `protobuf:"bytes,19,opt,name=raw_body,json=rawBody" json:"-"`
	// @inject_tag: json:"-"
	IsJson bool `protobuf:"varint,20,opt,name=is_json,json=isJson" json:"-"`
	// @inject_tag: json:"-"
	Language string `protobuf:"bytes,21,opt,name=language" json:"-"`
	// @inject_tag: json:"products" validate:"omitempty,gte=1,dive,hexadecimal,len=24"
	Products []string `protobuf:"bytes,22,rep,name=products" json:"products" validate:"omitempty,gte=1,dive,hexadecimal,len=24"`
	// @inject_tag: json:"-"
	Metadata map[string]string `protobuf:"bytes,23,rep,name=metadata" json:"-" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"-"
	PrivateMetadata map[string]string `protobuf:"bytes,24,rep,name=private_metadata,json=privateMetadata" json:"-" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"receipt_number"
	ReceiptNumber string `protobuf:"bytes,25,opt,name=receipt_number,json=receiptNumber" json:"receipt_number"`
	// @inject_tag: json:"receipt_url"
	ReceiptUrl string `protobuf:"bytes,26,opt,name=receipt_url,json=receiptUrl" json:"receipt_url"`
	// @inject_tag: json:"issuer_url"
	IssuerUrl string `protobuf:"bytes,27,opt,name=issuer_url,json=issuerUrl" json:"issuer_url"`
	// @inject_tag: json:"is_embedded"
	IsEmbedded bool       `protobuf:"varint,28,opt,name=is_embedded,json=isEmbedded" json:"is_embedded"`
	Token      string     `protobuf:"bytes,29,opt,name=token" json:"token,omitempty"`
	User       *OrderUser `protobuf:"bytes,30,opt,name=user" json:"user,omitempty"`
	// @inject_tag: json:"order" validate:"omitempty,uuid"
	PspOrderUuid string `protobuf:"bytes,31,opt,name=psp_order_uuid,json=pspOrderUuid" json:"order" validate:"omitempty,uuid"`
	// @inject_tag: validate="required,oneof=simple product key virtual_currency" json:"type"
	Type       string `protobuf:"bytes,32,opt,name=type" json:"type"`
	PlatformId string `protobuf:"bytes,33,opt,name=platform_id,json=platformId" json:"platform_id,omitempty"`
	// @inject_tag: bson:"issuer_reference" json:"issuer_reference"
	IssuerReference string `protobuf:"bytes,34,opt,name=issuer_reference,json=issuerReference" json:"issuer_reference" bson:"issuer_reference"`
	// @inject_tag: bson:"issuer_reference_type" json:"issuer_reference_type"
	IssuerReferenceType string `protobuf:"bytes,35,opt,name=issuer_reference_type,json=issuerReferenceType" json:"issuer_reference_type" bson:"issuer_reference_type"`
	// @inject_tag: bson:"utm_source" json:"utm_source"
	UtmSource string `protobuf:"bytes,36,opt,name=utm_source,json=utmSource" json:"utm_source" bson:"utm_source"`
	// @inject_tag: bson:"utm_medium" json:"utm_medium"
	UtmMedium string `protobuf:"bytes,37,opt,name=utm_medium,json=utmMedium" json:"utm_medium" bson:"utm_medium"`
	// @inject_tag: bson:"utm_campaign" json:"utm_campaign"
	UtmCampaign string `protobuf:"bytes,38,opt,name=utm_campaign,json=utmCampaign" json:"utm_campaign" bson:"utm_campaign"`
	// @inject_tag: bson:"-" json:"-"
	IsBuyForVirtualCurrency bool   `protobuf:"varint,39,opt,name=is_buy_for_virtual_currency,json=isBuyForVirtualCurrency" json:"-" bson:"-"`
	Cookie                  string `protobuf:"bytes,40,opt,name=cookie" json:"cookie,omitempty"`
}

func (m *OrderCreateRequest) Reset()                    { *m = OrderCreateRequest{} }
func (m *OrderCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*OrderCreateRequest) ProtoMessage()               {}
func (*OrderCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OrderCreateRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *OrderCreateRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *OrderCreateRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderCreateRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *OrderCreateRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *OrderCreateRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderCreateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *OrderCreateRequest) GetPaymentMethod() string {
	if m != nil {
		return m.PaymentMethod
	}
	return ""
}

func (m *OrderCreateRequest) GetUrlVerify() string {
	if m != nil {
		return m.UrlVerify
	}
	return ""
}

func (m *OrderCreateRequest) GetUrlNotify() string {
	if m != nil {
		return m.UrlNotify
	}
	return ""
}

func (m *OrderCreateRequest) GetUrlSuccess() string {
	if m != nil {
		return m.UrlSuccess
	}
	return ""
}

func (m *OrderCreateRequest) GetUrlFail() string {
	if m != nil {
		return m.UrlFail
	}
	return ""
}

func (m *OrderCreateRequest) GetPayerEmail() string {
	if m != nil {
		return m.PayerEmail
	}
	return ""
}

func (m *OrderCreateRequest) GetPayerPhone() string {
	if m != nil {
		return m.PayerPhone
	}
	return ""
}

func (m *OrderCreateRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *OrderCreateRequest) GetOther() map[string]string {
	if m != nil {
		return m.Other
	}
	return nil
}

func (m *OrderCreateRequest) GetRawParams() map[string]string {
	if m != nil {
		return m.RawParams
	}
	return nil
}

func (m *OrderCreateRequest) GetRawBody() string {
	if m != nil {
		return m.RawBody
	}
	return ""
}

func (m *OrderCreateRequest) GetIsJson() bool {
	if m != nil {
		return m.IsJson
	}
	return false
}

func (m *OrderCreateRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *OrderCreateRequest) GetProducts() []string {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *OrderCreateRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *OrderCreateRequest) GetPrivateMetadata() map[string]string {
	if m != nil {
		return m.PrivateMetadata
	}
	return nil
}

func (m *OrderCreateRequest) GetReceiptNumber() string {
	if m != nil {
		return m.ReceiptNumber
	}
	return ""
}

func (m *OrderCreateRequest) GetReceiptUrl() string {
	if m != nil {
		return m.ReceiptUrl
	}
	return ""
}

func (m *OrderCreateRequest) GetIssuerUrl() string {
	if m != nil {
		return m.IssuerUrl
	}
	return ""
}

func (m *OrderCreateRequest) GetIsEmbedded() bool {
	if m != nil {
		return m.IsEmbedded
	}
	return false
}

func (m *OrderCreateRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *OrderCreateRequest) GetUser() *OrderUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *OrderCreateRequest) GetPspOrderUuid() string {
	if m != nil {
		return m.PspOrderUuid
	}
	return ""
}

func (m *OrderCreateRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *OrderCreateRequest) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *OrderCreateRequest) GetIssuerReference() string {
	if m != nil {
		return m.IssuerReference
	}
	return ""
}

func (m *OrderCreateRequest) GetIssuerReferenceType() string {
	if m != nil {
		return m.IssuerReferenceType
	}
	return ""
}

func (m *OrderCreateRequest) GetUtmSource() string {
	if m != nil {
		return m.UtmSource
	}
	return ""
}

func (m *OrderCreateRequest) GetUtmMedium() string {
	if m != nil {
		return m.UtmMedium
	}
	return ""
}

func (m *OrderCreateRequest) GetUtmCampaign() string {
	if m != nil {
		return m.UtmCampaign
	}
	return ""
}

func (m *OrderCreateRequest) GetIsBuyForVirtualCurrency() bool {
	if m != nil {
		return m.IsBuyForVirtualCurrency
	}
	return false
}

func (m *OrderCreateRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type Project struct {
	// @inject_tag: json:"id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId" json:"merchant_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"name" validate:"required"
	Name map[string]string `protobuf:"bytes,3,rep,name=name" json:"name" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validate:"required"`
	// @inject_tag: json:"-"
	Reserved_4 string `protobuf:"bytes,4,opt,name=reserved_4,json=reserved4" json:"-"`
	// @inject_tag: json:"callback_currency" validate:"omitempty,len=3"
	CallbackCurrency string `protobuf:"bytes,5,opt,name=callback_currency,json=callbackCurrency" json:"callback_currency" validate:"omitempty,len=3"`
	// @inject_tag: json:"callback_protocol" validate:"omitempty,oneof=default empty"
	CallbackProtocol string `protobuf:"bytes,6,opt,name=callback_protocol,json=callbackProtocol" json:"callback_protocol" validate:"omitempty,oneof=default empty"`
	// @inject_tag: json:"create_order_allowed_urls" validate:"omitempty,dive,url"
	CreateOrderAllowedUrls []string `protobuf:"bytes,7,rep,name=create_order_allowed_urls,json=createOrderAllowedUrls" json:"create_order_allowed_urls" validate:"omitempty,dive,url"`
	// @inject_tag: json:"allow_dynamic_notify_urls"
	AllowDynamicNotifyUrls bool `protobuf:"varint,8,opt,name=allow_dynamic_notify_urls,json=allowDynamicNotifyUrls" json:"allow_dynamic_notify_urls"`
	// @inject_tag: json:"allow_dynamic_redirect_urls"
	AllowDynamicRedirectUrls bool `protobuf:"varint,9,opt,name=allow_dynamic_redirect_urls,json=allowDynamicRedirectUrls" json:"allow_dynamic_redirect_urls"`
	// @inject_tag: json:"limits_currency" validate:"omitempty,len=3"
	LimitsCurrency string `protobuf:"bytes,10,opt,name=limits_currency,json=limitsCurrency" json:"limits_currency" validate:"omitempty,len=3"`
	// @inject_tag: json:"min_payment_amount" validate:"omitempty,numeric,gte=0"
	MinPaymentAmount float64 `protobuf:"fixed64,11,opt,name=min_payment_amount,json=minPaymentAmount" json:"min_payment_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"max_payment_amount" validate:"omitempty,numeric,gte=0"
	MaxPaymentAmount float64 `protobuf:"fixed64,12,opt,name=max_payment_amount,json=maxPaymentAmount" json:"max_payment_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"notify_emails" validate:"omitempty,dive,email"
	NotifyEmails []string `protobuf:"bytes,13,rep,name=notify_emails,json=notifyEmails" json:"notify_emails" validate:"omitempty,dive,email"`
	// @inject_tag: json:"is_products_checkout"
	IsProductsCheckout bool `protobuf:"varint,14,opt,name=is_products_checkout,json=isProductsCheckout" json:"is_products_checkout"`
	// @inject_tag: json:"secret_key" validate:"omitempty,max=255"
	SecretKey string `protobuf:"bytes,15,opt,name=secret_key,json=secretKey" json:"secret_key" validate:"omitempty,max=255"`
	// @inject_tag: json:"signature_required"
	SignatureRequired bool `protobuf:"varint,16,opt,name=signature_required,json=signatureRequired" json:"signature_required"`
	// @inject_tag: json:"send_notify_email"
	SendNotifyEmail bool `protobuf:"varint,17,opt,name=send_notify_email,json=sendNotifyEmail" json:"send_notify_email"`
	// @inject_tag: json:"url_check_account" validate:"omitempty,url"
	UrlCheckAccount string `protobuf:"bytes,18,opt,name=url_check_account,json=urlCheckAccount" json:"url_check_account" validate:"omitempty,url"`
	// @inject_tag: json:"url_process_payment" validate:"omitempty,url"
	UrlProcessPayment string `protobuf:"bytes,19,opt,name=url_process_payment,json=urlProcessPayment" json:"url_process_payment" validate:"omitempty,url"`
	// @inject_tag: json:"url_redirect_fail" validate:"omitempty,url"
	UrlRedirectFail string `protobuf:"bytes,20,opt,name=url_redirect_fail,json=urlRedirectFail" json:"url_redirect_fail" validate:"omitempty,url"`
	// @inject_tag: json:"url_redirect_success" validate:"omitempty,url"
	UrlRedirectSuccess string `protobuf:"bytes,21,opt,name=url_redirect_success,json=urlRedirectSuccess" json:"url_redirect_success" validate:"omitempty,url"`
	// @inject_tag: json:"status" validate:"omitempty,numeric,oneof=0 1 2 3 4"
	Status int32 `protobuf:"varint,22,opt,name=status" json:"status" validate:"omitempty,numeric,oneof=0 1 2 3 4"`
	// @inject_tag: json:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,23,opt,name=created_at,json=createdAt" json:"created_at"`
	// @inject_tag: json:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,24,opt,name=updated_at,json=updatedAt" json:"updated_at"`
	// @inject_tag: json:"products_count"
	ProductsCount int64 `protobuf:"varint,25,opt,name=products_count,json=productsCount" json:"products_count"`
	// @inject_tag: json:"url_chargeback_payment" validate:"omitempty,url"
	UrlChargebackPayment string `protobuf:"bytes,26,opt,name=url_chargeback_payment,json=urlChargebackPayment" json:"url_chargeback_payment" validate:"omitempty,url"`
	// @inject_tag: json:"url_cancel_payment" validate:"omitempty,url"
	UrlCancelPayment string `protobuf:"bytes,27,opt,name=url_cancel_payment,json=urlCancelPayment" json:"url_cancel_payment" validate:"omitempty,url"`
	// @inject_tag: json:"url_fraud_payment" validate:"omitempty,url"
	UrlFraudPayment string `protobuf:"bytes,28,opt,name=url_fraud_payment,json=urlFraudPayment" json:"url_fraud_payment" validate:"omitempty,url"`
	// @inject_tag: json:"url_refund_payment" validate:"omitempty,url"
	UrlRefundPayment string `protobuf:"bytes,29,opt,name=url_refund_payment,json=urlRefundPayment" json:"url_refund_payment" validate:"omitempty,url"`
	// @inject_tag: json:"localizations"
	Localizations []string `protobuf:"bytes,30,rep,name=localizations" json:"localizations"`
	// @inject_tag: json:"full_description"
	FullDescription map[string]string `protobuf:"bytes,31,rep,name=full_description,json=fullDescription" json:"full_description" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"short_description"
	ShortDescription map[string]string `protobuf:"bytes,32,rep,name=short_description,json=shortDescription" json:"short_description" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"currencies" validate:"omitempty,dive"
	Currencies []*HasCurrencyItem `protobuf:"bytes,33,rep,name=currencies" json:"currencies" validate:"omitempty,dive"`
	// @inject_tag: json:"cover"
	Cover *ImageCollection `protobuf:"bytes,34,opt,name=cover" json:"cover"`
	// @inject_tag: json:"virtual_currency" validate:"omitempty,dive"
	VirtualCurrency *ProjectVirtualCurrency `protobuf:"bytes,35,opt,name=virtual_currency,json=virtualCurrency" json:"virtual_currency" validate:"omitempty,dive"`
	// @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
	VatPayer string `protobuf:"bytes,36,opt,name=vat_payer,json=vatPayer" json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Project) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Project) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *Project) GetName() map[string]string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Project) GetReserved_4() string {
	if m != nil {
		return m.Reserved_4
	}
	return ""
}

func (m *Project) GetCallbackCurrency() string {
	if m != nil {
		return m.CallbackCurrency
	}
	return ""
}

func (m *Project) GetCallbackProtocol() string {
	if m != nil {
		return m.CallbackProtocol
	}
	return ""
}

func (m *Project) GetCreateOrderAllowedUrls() []string {
	if m != nil {
		return m.CreateOrderAllowedUrls
	}
	return nil
}

func (m *Project) GetAllowDynamicNotifyUrls() bool {
	if m != nil {
		return m.AllowDynamicNotifyUrls
	}
	return false
}

func (m *Project) GetAllowDynamicRedirectUrls() bool {
	if m != nil {
		return m.AllowDynamicRedirectUrls
	}
	return false
}

func (m *Project) GetLimitsCurrency() string {
	if m != nil {
		return m.LimitsCurrency
	}
	return ""
}

func (m *Project) GetMinPaymentAmount() float64 {
	if m != nil {
		return m.MinPaymentAmount
	}
	return 0
}

func (m *Project) GetMaxPaymentAmount() float64 {
	if m != nil {
		return m.MaxPaymentAmount
	}
	return 0
}

func (m *Project) GetNotifyEmails() []string {
	if m != nil {
		return m.NotifyEmails
	}
	return nil
}

func (m *Project) GetIsProductsCheckout() bool {
	if m != nil {
		return m.IsProductsCheckout
	}
	return false
}

func (m *Project) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func (m *Project) GetSignatureRequired() bool {
	if m != nil {
		return m.SignatureRequired
	}
	return false
}

func (m *Project) GetSendNotifyEmail() bool {
	if m != nil {
		return m.SendNotifyEmail
	}
	return false
}

func (m *Project) GetUrlCheckAccount() string {
	if m != nil {
		return m.UrlCheckAccount
	}
	return ""
}

func (m *Project) GetUrlProcessPayment() string {
	if m != nil {
		return m.UrlProcessPayment
	}
	return ""
}

func (m *Project) GetUrlRedirectFail() string {
	if m != nil {
		return m.UrlRedirectFail
	}
	return ""
}

func (m *Project) GetUrlRedirectSuccess() string {
	if m != nil {
		return m.UrlRedirectSuccess
	}
	return ""
}

func (m *Project) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Project) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Project) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Project) GetProductsCount() int64 {
	if m != nil {
		return m.ProductsCount
	}
	return 0
}

func (m *Project) GetUrlChargebackPayment() string {
	if m != nil {
		return m.UrlChargebackPayment
	}
	return ""
}

func (m *Project) GetUrlCancelPayment() string {
	if m != nil {
		return m.UrlCancelPayment
	}
	return ""
}

func (m *Project) GetUrlFraudPayment() string {
	if m != nil {
		return m.UrlFraudPayment
	}
	return ""
}

func (m *Project) GetUrlRefundPayment() string {
	if m != nil {
		return m.UrlRefundPayment
	}
	return ""
}

func (m *Project) GetLocalizations() []string {
	if m != nil {
		return m.Localizations
	}
	return nil
}

func (m *Project) GetFullDescription() map[string]string {
	if m != nil {
		return m.FullDescription
	}
	return nil
}

func (m *Project) GetShortDescription() map[string]string {
	if m != nil {
		return m.ShortDescription
	}
	return nil
}

func (m *Project) GetCurrencies() []*HasCurrencyItem {
	if m != nil {
		return m.Currencies
	}
	return nil
}

func (m *Project) GetCover() *ImageCollection {
	if m != nil {
		return m.Cover
	}
	return nil
}

func (m *Project) GetVirtualCurrency() *ProjectVirtualCurrency {
	if m != nil {
		return m.VirtualCurrency
	}
	return nil
}

func (m *Project) GetVatPayer() string {
	if m != nil {
		return m.VatPayer
	}
	return ""
}

type ProjectOrder struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	MerchantId           string            `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	Name                 map[string]string `protobuf:"bytes,3,rep,name=name" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UrlSuccess           string            `protobuf:"bytes,4,opt,name=url_success,json=urlSuccess" json:"url_success,omitempty"`
	UrlFail              string            `protobuf:"bytes,5,opt,name=url_fail,json=urlFail" json:"url_fail,omitempty"`
	NotifyEmails         []string          `protobuf:"bytes,6,rep,name=notify_emails,json=notifyEmails" json:"notify_emails,omitempty"`
	SecretKey            string            `protobuf:"bytes,7,opt,name=secret_key,json=secretKey" json:"secret_key,omitempty"`
	SendNotifyEmail      bool              `protobuf:"varint,8,opt,name=send_notify_email,json=sendNotifyEmail" json:"send_notify_email,omitempty"`
	UrlCheckAccount      string            `protobuf:"bytes,9,opt,name=url_check_account,json=urlCheckAccount" json:"url_check_account,omitempty"`
	UrlProcessPayment    string            `protobuf:"bytes,10,opt,name=url_process_payment,json=urlProcessPayment" json:"url_process_payment,omitempty"`
	CallbackProtocol     string            `protobuf:"bytes,11,opt,name=callback_protocol,json=callbackProtocol" json:"callback_protocol,omitempty"`
	UrlChargebackPayment string            `protobuf:"bytes,12,opt,name=url_chargeback_payment,json=urlChargebackPayment" json:"url_chargeback_payment,omitempty"`
	UrlCancelPayment     string            `protobuf:"bytes,13,opt,name=url_cancel_payment,json=urlCancelPayment" json:"url_cancel_payment,omitempty"`
	UrlFraudPayment      string            `protobuf:"bytes,14,opt,name=url_fraud_payment,json=urlFraudPayment" json:"url_fraud_payment,omitempty"`
	UrlRefundPayment     string            `protobuf:"bytes,15,opt,name=url_refund_payment,json=urlRefundPayment" json:"url_refund_payment,omitempty"`
	Status               int32             `protobuf:"varint,16,opt,name=status" json:"status,omitempty"`
	// @inject_tag: json:"-"
	MerchantRoyaltyCurrency string `protobuf:"bytes,17,opt,name=merchant_royalty_currency,json=merchantRoyaltyCurrency" json:"-"`
}

func (m *ProjectOrder) Reset()                    { *m = ProjectOrder{} }
func (m *ProjectOrder) String() string            { return proto.CompactTextString(m) }
func (*ProjectOrder) ProtoMessage()               {}
func (*ProjectOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProjectOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectOrder) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *ProjectOrder) GetName() map[string]string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ProjectOrder) GetUrlSuccess() string {
	if m != nil {
		return m.UrlSuccess
	}
	return ""
}

func (m *ProjectOrder) GetUrlFail() string {
	if m != nil {
		return m.UrlFail
	}
	return ""
}

func (m *ProjectOrder) GetNotifyEmails() []string {
	if m != nil {
		return m.NotifyEmails
	}
	return nil
}

func (m *ProjectOrder) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func (m *ProjectOrder) GetSendNotifyEmail() bool {
	if m != nil {
		return m.SendNotifyEmail
	}
	return false
}

func (m *ProjectOrder) GetUrlCheckAccount() string {
	if m != nil {
		return m.UrlCheckAccount
	}
	return ""
}

func (m *ProjectOrder) GetUrlProcessPayment() string {
	if m != nil {
		return m.UrlProcessPayment
	}
	return ""
}

func (m *ProjectOrder) GetCallbackProtocol() string {
	if m != nil {
		return m.CallbackProtocol
	}
	return ""
}

func (m *ProjectOrder) GetUrlChargebackPayment() string {
	if m != nil {
		return m.UrlChargebackPayment
	}
	return ""
}

func (m *ProjectOrder) GetUrlCancelPayment() string {
	if m != nil {
		return m.UrlCancelPayment
	}
	return ""
}

func (m *ProjectOrder) GetUrlFraudPayment() string {
	if m != nil {
		return m.UrlFraudPayment
	}
	return ""
}

func (m *ProjectOrder) GetUrlRefundPayment() string {
	if m != nil {
		return m.UrlRefundPayment
	}
	return ""
}

func (m *ProjectOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ProjectOrder) GetMerchantRoyaltyCurrency() string {
	if m != nil {
		return m.MerchantRoyaltyCurrency
	}
	return ""
}

type MerchantContact struct {
	// @inject_tag: validate:"required" json:"authorized"
	Authorized *MerchantContactAuthorized `protobuf:"bytes,1,opt,name=authorized" json:"authorized" validate:"required"`
	// @inject_tag: validate:"required" json:"technical"
	Technical *MerchantContactTechnical `protobuf:"bytes,2,opt,name=technical" json:"technical" validate:"required"`
}

func (m *MerchantContact) Reset()                    { *m = MerchantContact{} }
func (m *MerchantContact) String() string            { return proto.CompactTextString(m) }
func (*MerchantContact) ProtoMessage()               {}
func (*MerchantContact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MerchantContact) GetAuthorized() *MerchantContactAuthorized {
	if m != nil {
		return m.Authorized
	}
	return nil
}

func (m *MerchantContact) GetTechnical() *MerchantContactTechnical {
	if m != nil {
		return m.Technical
	}
	return nil
}

type MerchantContactTechnical struct {
	// @inject_tag: json:"name" validate:"required,company_name,max=60"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name" validate:"required,company_name,max=60"`
	// @inject_tag: json:"email" validate:"required,email,max=100"
	Email string `protobuf:"bytes,2,opt,name=email" json:"email" validate:"required,email,max=100"`
	// @inject_tag: json:"phone" validate:"required,numeric,max=20"
	Phone string `protobuf:"bytes,3,opt,name=phone" json:"phone" validate:"required,numeric,max=20"`
}

func (m *MerchantContactTechnical) Reset()                    { *m = MerchantContactTechnical{} }
func (m *MerchantContactTechnical) String() string            { return proto.CompactTextString(m) }
func (*MerchantContactTechnical) ProtoMessage()               {}
func (*MerchantContactTechnical) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MerchantContactTechnical) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MerchantContactTechnical) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *MerchantContactTechnical) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type MerchantContactAuthorized struct {
	// @inject_tag: json:"name" validate:"required,company_name,max=60"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name" validate:"required,company_name,max=60"`
	// @inject_tag: json:"email" validate:"required,email,max=100"
	Email string `protobuf:"bytes,2,opt,name=email" json:"email" validate:"required,email,max=100"`
	// @inject_tag: json:"phone" validate:"required,numeric,max=20"
	Phone string `protobuf:"bytes,3,opt,name=phone" json:"phone" validate:"required,numeric,max=20"`
	// @inject_tag: json:"position" validate:"required,company_name,max=30"
	Position string `protobuf:"bytes,4,opt,name=position" json:"position" validate:"required,company_name,max=30"`
}

func (m *MerchantContactAuthorized) Reset()                    { *m = MerchantContactAuthorized{} }
func (m *MerchantContactAuthorized) String() string            { return proto.CompactTextString(m) }
func (*MerchantContactAuthorized) ProtoMessage()               {}
func (*MerchantContactAuthorized) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MerchantContactAuthorized) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MerchantContactAuthorized) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *MerchantContactAuthorized) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *MerchantContactAuthorized) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type MerchantBanking struct {
	// @inject_tag: json:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,1,opt,name=currency" json:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"name" validate:"required,city,max=60"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name" validate:"required,city,max=60"`
	// @inject_tag: json:"address" validate:"required,max=60"
	Address string `protobuf:"bytes,3,opt,name=address" json:"address" validate:"required,max=60"`
	// @inject_tag: json:"account_number" bson:"account_number" validate:"required,iban"
	AccountNumber string `protobuf:"bytes,4,opt,name=account_number,json=accountNumber" json:"account_number" bson:"account_number" validate:"required,iban"`
	// @inject_tag: json:"swift" validate:"required,swift"
	Swift string `protobuf:"bytes,5,opt,name=swift" json:"swift" validate:"required,swift"`
	// @inject_tag: json:"details"
	Details string `protobuf:"bytes,6,opt,name=details" json:"details"`
	// @inject_tag: json:"correspondent_account" bson:"correspondent_account" validate:"omitempty,numeric,max=30"
	CorrespondentAccount string `protobuf:"bytes,7,opt,name=correspondent_account,json=correspondentAccount" json:"correspondent_account" bson:"correspondent_account" validate:"omitempty,numeric,max=30"`
}

func (m *MerchantBanking) Reset()                    { *m = MerchantBanking{} }
func (m *MerchantBanking) String() string            { return proto.CompactTextString(m) }
func (*MerchantBanking) ProtoMessage()               {}
func (*MerchantBanking) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MerchantBanking) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MerchantBanking) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MerchantBanking) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MerchantBanking) GetAccountNumber() string {
	if m != nil {
		return m.AccountNumber
	}
	return ""
}

func (m *MerchantBanking) GetSwift() string {
	if m != nil {
		return m.Swift
	}
	return ""
}

func (m *MerchantBanking) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *MerchantBanking) GetCorrespondentAccount() string {
	if m != nil {
		return m.CorrespondentAccount
	}
	return ""
}

type MerchantLastPayout struct {
	// @inject_tag: json:"date"
	Date *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=date" json:"date"`
	// @inject_tag: json:"amount"
	Amount float64 `protobuf:"fixed64,2,opt,name=amount" json:"amount"`
}

func (m *MerchantLastPayout) Reset()                    { *m = MerchantLastPayout{} }
func (m *MerchantLastPayout) String() string            { return proto.CompactTextString(m) }
func (*MerchantLastPayout) ProtoMessage()               {}
func (*MerchantLastPayout) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MerchantLastPayout) GetDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *MerchantLastPayout) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type MerchantUser struct {
	// @inject_tag: json:"id" validate:"required"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" validate:"required"`
	// @inject_tag: json:"email" validate:"required,email"
	Email string `protobuf:"bytes,2,opt,name=email" json:"email" validate:"required,email"`
	// @inject_tag: json:"first_name"
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name"`
	// @inject_tag: json:"last_name"
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name"`
	// @inject_tag: json:"profile_id"
	ProfileId string `protobuf:"bytes,5,opt,name=profile_id,json=profileId" json:"profile_id"`
	// @inject_tag: json:"registration_date"
	RegistrationDate *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=registration_date,json=registrationDate" json:"registration_date"`
}

func (m *MerchantUser) Reset()                    { *m = MerchantUser{} }
func (m *MerchantUser) String() string            { return proto.CompactTextString(m) }
func (*MerchantUser) ProtoMessage()               {}
func (*MerchantUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MerchantUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MerchantUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *MerchantUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *MerchantUser) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *MerchantUser) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *MerchantUser) GetRegistrationDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.RegistrationDate
	}
	return nil
}

type MerchantCompanyInfo struct {
	// @inject_tag: json:"name" validate:"required,company_name,max=60"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name" validate:"required,company_name,max=60"`
	// @inject_tag: json:"alternative_name" bson:"alternative_name" validate:"required,company_name,max=60"
	AlternativeName string `protobuf:"bytes,2,opt,name=alternative_name,json=alternativeName" json:"alternative_name" bson:"alternative_name" validate:"required,company_name,max=60"`
	// @inject_tag: json:"website" validate:"required,url"
	Website string `protobuf:"bytes,3,opt,name=website" json:"website" validate:"required,url"`
	// @inject_tag: json:"country" validate:"required,alpha,len=2"
	Country string `protobuf:"bytes,4,opt,name=country" json:"country" validate:"required,alpha,len=2"`
	// @inject_tag: json:"state"
	State string `protobuf:"bytes,5,opt,name=state" json:"state"`
	// @inject_tag: json:"zip" validate:"required,max=30"
	Zip string `protobuf:"bytes,6,opt,name=zip" json:"zip" validate:"required,max=30"`
	// @inject_tag: json:"city" validate:"required,city,max=60"
	City string `protobuf:"bytes,7,opt,name=city" json:"city" validate:"required,city,max=60"`
	// @inject_tag: json:"address" validate:"required,max=100"
	Address string `protobuf:"bytes,8,opt,name=address" json:"address" validate:"required,max=100"`
	// @inject_tag: json:"address_additional" bson:"address_additional" validate:"omitempty,max=100"
	AddressAdditional string `protobuf:"bytes,9,opt,name=address_additional,json=addressAdditional" json:"address_additional" bson:"address_additional" validate:"omitempty,max=100"`
	// @inject_tag: json:"registration_number" bson:"registration_number" validate:"required,max=100"
	RegistrationNumber string `protobuf:"bytes,10,opt,name=registration_number,json=registrationNumber" json:"registration_number" bson:"registration_number" validate:"required,max=100"`
	// @inject_tag: json:"tax_id" bson:"tax_id"
	TaxId string `protobuf:"bytes,11,opt,name=tax_id,json=taxId" json:"tax_id" bson:"tax_id"`
}

func (m *MerchantCompanyInfo) Reset()                    { *m = MerchantCompanyInfo{} }
func (m *MerchantCompanyInfo) String() string            { return proto.CompactTextString(m) }
func (*MerchantCompanyInfo) ProtoMessage()               {}
func (*MerchantCompanyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MerchantCompanyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MerchantCompanyInfo) GetAlternativeName() string {
	if m != nil {
		return m.AlternativeName
	}
	return ""
}

func (m *MerchantCompanyInfo) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *MerchantCompanyInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *MerchantCompanyInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *MerchantCompanyInfo) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *MerchantCompanyInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *MerchantCompanyInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MerchantCompanyInfo) GetAddressAdditional() string {
	if m != nil {
		return m.AddressAdditional
	}
	return ""
}

func (m *MerchantCompanyInfo) GetRegistrationNumber() string {
	if m != nil {
		return m.RegistrationNumber
	}
	return ""
}

func (m *MerchantCompanyInfo) GetTaxId() string {
	if m != nil {
		return m.TaxId
	}
	return ""
}

type MerchantCompletedSteps struct {
	Company  bool `protobuf:"varint,1,opt,name=company" json:"company,omitempty"`
	Contacts bool `protobuf:"varint,2,opt,name=contacts" json:"contacts,omitempty"`
	Banking  bool `protobuf:"varint,3,opt,name=banking" json:"banking,omitempty"`
	Tariff   bool `protobuf:"varint,4,opt,name=tariff" json:"tariff,omitempty"`
}

func (m *MerchantCompletedSteps) Reset()                    { *m = MerchantCompletedSteps{} }
func (m *MerchantCompletedSteps) String() string            { return proto.CompactTextString(m) }
func (*MerchantCompletedSteps) ProtoMessage()               {}
func (*MerchantCompletedSteps) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MerchantCompletedSteps) GetCompany() bool {
	if m != nil {
		return m.Company
	}
	return false
}

func (m *MerchantCompletedSteps) GetContacts() bool {
	if m != nil {
		return m.Contacts
	}
	return false
}

func (m *MerchantCompletedSteps) GetBanking() bool {
	if m != nil {
		return m.Banking
	}
	return false
}

func (m *MerchantCompletedSteps) GetTariff() bool {
	if m != nil {
		return m.Tariff
	}
	return false
}

type MerchantAgreementSignatureDataSignUrl struct {
	SignUrl   string                     `protobuf:"bytes,1,opt,name=sign_url,json=signUrl" json:"sign_url,omitempty"`
	ExpiresAt *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt" json:"expires_at,omitempty"`
}

func (m *MerchantAgreementSignatureDataSignUrl) Reset()         { *m = MerchantAgreementSignatureDataSignUrl{} }
func (m *MerchantAgreementSignatureDataSignUrl) String() string { return proto.CompactTextString(m) }
func (*MerchantAgreementSignatureDataSignUrl) ProtoMessage()    {}
func (*MerchantAgreementSignatureDataSignUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12}
}

func (m *MerchantAgreementSignatureDataSignUrl) GetSignUrl() string {
	if m != nil {
		return m.SignUrl
	}
	return ""
}

func (m *MerchantAgreementSignatureDataSignUrl) GetExpiresAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

type MerchantAgreementSignatureData struct {
	DetailsUrl          string                                 `protobuf:"bytes,1,opt,name=details_url,json=detailsUrl" json:"details_url,omitempty"`
	FilesUrl            string                                 `protobuf:"bytes,2,opt,name=files_url,json=filesUrl" json:"files_url,omitempty"`
	SignatureRequestId  string                                 `protobuf:"bytes,3,opt,name=signature_request_id,json=signatureRequestId" json:"signature_request_id,omitempty"`
	MerchantSignatureId string                                 `protobuf:"bytes,4,opt,name=merchant_signature_id,json=merchantSignatureId" json:"merchant_signature_id,omitempty"`
	PsSignatureId       string                                 `protobuf:"bytes,5,opt,name=ps_signature_id,json=psSignatureId" json:"ps_signature_id,omitempty"`
	MerchantSignUrl     *MerchantAgreementSignatureDataSignUrl `protobuf:"bytes,6,opt,name=merchant_sign_url,json=merchantSignUrl" json:"merchant_sign_url,omitempty"`
	PsSignUrl           *MerchantAgreementSignatureDataSignUrl `protobuf:"bytes,7,opt,name=ps_sign_url,json=psSignUrl" json:"ps_sign_url,omitempty"`
}

func (m *MerchantAgreementSignatureData) Reset()                    { *m = MerchantAgreementSignatureData{} }
func (m *MerchantAgreementSignatureData) String() string            { return proto.CompactTextString(m) }
func (*MerchantAgreementSignatureData) ProtoMessage()               {}
func (*MerchantAgreementSignatureData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MerchantAgreementSignatureData) GetDetailsUrl() string {
	if m != nil {
		return m.DetailsUrl
	}
	return ""
}

func (m *MerchantAgreementSignatureData) GetFilesUrl() string {
	if m != nil {
		return m.FilesUrl
	}
	return ""
}

func (m *MerchantAgreementSignatureData) GetSignatureRequestId() string {
	if m != nil {
		return m.SignatureRequestId
	}
	return ""
}

func (m *MerchantAgreementSignatureData) GetMerchantSignatureId() string {
	if m != nil {
		return m.MerchantSignatureId
	}
	return ""
}

func (m *MerchantAgreementSignatureData) GetPsSignatureId() string {
	if m != nil {
		return m.PsSignatureId
	}
	return ""
}

func (m *MerchantAgreementSignatureData) GetMerchantSignUrl() *MerchantAgreementSignatureDataSignUrl {
	if m != nil {
		return m.MerchantSignUrl
	}
	return nil
}

func (m *MerchantAgreementSignatureData) GetPsSignUrl() *MerchantAgreementSignatureDataSignUrl {
	if m != nil {
		return m.PsSignUrl
	}
	return nil
}

type MerchantTariff struct {
	// @inject_tag: json:"-"
	Payment []*MerchantTariffRatesPayment `protobuf:"bytes,1,rep,name=payment" json:"-"`
	// @inject_tag: json:"-"
	Payout *MerchantTariffRatesSettingsItem `protobuf:"bytes,2,opt,name=payout" json:"-"`
	// @inject_tag: json:"home_region"
	HomeRegion string `protobuf:"bytes,3,opt,name=home_region,json=homeRegion" json:"home_region"`
}

func (m *MerchantTariff) Reset()                    { *m = MerchantTariff{} }
func (m *MerchantTariff) String() string            { return proto.CompactTextString(m) }
func (*MerchantTariff) ProtoMessage()               {}
func (*MerchantTariff) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MerchantTariff) GetPayment() []*MerchantTariffRatesPayment {
	if m != nil {
		return m.Payment
	}
	return nil
}

func (m *MerchantTariff) GetPayout() *MerchantTariffRatesSettingsItem {
	if m != nil {
		return m.Payout
	}
	return nil
}

func (m *MerchantTariff) GetHomeRegion() string {
	if m != nil {
		return m.HomeRegion
	}
	return ""
}

type Merchant struct {
	// @inject_tag: bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:"_id"`
	// @inject_tag: json:"user"
	User *MerchantUser `protobuf:"bytes,2,opt,name=user" json:"user"`
	// @inject_tag: json:"company"
	Company *MerchantCompanyInfo `protobuf:"bytes,3,opt,name=company" json:"company"`
	// @inject_tag: json:"contacts"
	Contacts *MerchantContact `protobuf:"bytes,15,opt,name=contacts" json:"contacts"`
	// @inject_tag: json:"banking"
	Banking *MerchantBanking `protobuf:"bytes,16,opt,name=banking" json:"banking"`
	// @inject_tag: json:"status"
	Status int32 `protobuf:"varint,17,opt,name=status" json:"status"`
	// @inject_tag: json:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt" json:"created_at"`
	// @inject_tag: json:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt" json:"updated_at"`
	// @inject_tag: json:"first_payment_at"
	FirstPaymentAt *google_protobuf.Timestamp `protobuf:"bytes,20,opt,name=first_payment_at,json=firstPaymentAt" json:"first_payment_at"`
	// @inject_tag: json:"-"
	IsVatEnabled bool `protobuf:"varint,21,opt,name=is_vat_enabled,json=isVatEnabled" json:"-"`
	// @inject_tag: json:"-"
	IsCommissionToUserEnabled bool `protobuf:"varint,22,opt,name=is_commission_to_user_enabled,json=isCommissionToUserEnabled" json:"-"`
	// @inject_tag: json:"has_merchant_signature"
	HasMerchantSignature bool `protobuf:"varint,23,opt,name=has_merchant_signature,json=hasMerchantSignature" json:"has_merchant_signature"`
	// @inject_tag: json:"has_psp_signature"
	HasPspSignature bool `protobuf:"varint,24,opt,name=has_psp_signature,json=hasPspSignature" json:"has_psp_signature"`
	// @inject_tag: json:"last_payout"
	LastPayout *MerchantLastPayout `protobuf:"bytes,25,opt,name=last_payout,json=lastPayout" json:"last_payout"`
	// @inject_tag: json:"is_signed"
	IsSigned bool `protobuf:"varint,26,opt,name=is_signed,json=isSigned" json:"is_signed"`
	// @inject_tag: json:"payment_methods"
	PaymentMethods map[string]*MerchantPaymentMethod `protobuf:"bytes,28,rep,name=payment_methods,json=paymentMethods" json:"payment_methods" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"agreement_type"
	AgreementType int32 `protobuf:"varint,29,opt,name=agreement_type,json=agreementType" json:"agreement_type"`
	// @inject_tag: json:"agreement_sent_via_mail"
	AgreementSentViaMail bool `protobuf:"varint,30,opt,name=agreement_sent_via_mail,json=agreementSentViaMail" json:"agreement_sent_via_mail"`
	// @inject_tag: json:"mail_tracking_link"
	MailTrackingLink string `protobuf:"bytes,31,opt,name=mail_tracking_link,json=mailTrackingLink" json:"mail_tracking_link"`
	// @inject_tag: json:"-"
	S3AgreementName string `protobuf:"bytes,32,opt,name=s3_agreement_name,json=s3AgreementName" json:"-"`
	// @inject_tag: json:"payout_cost_amount" bson:"payout_cost_amount" validate:"numeric,gte=0"
	PayoutCostAmount float64 `protobuf:"fixed64,33,opt,name=payout_cost_amount,json=payoutCostAmount" json:"payout_cost_amount" bson:"payout_cost_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"payout_cost_currency" bson:"payout_cost_currency" validate:"required,alpha,len=3"
	PayoutCostCurrency string `protobuf:"bytes,34,opt,name=payout_cost_currency,json=payoutCostCurrency" json:"payout_cost_currency" bson:"payout_cost_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"min_payout_amount" bson:"min_payout_amount" validate:"numeric,gte=0"
	MinPayoutAmount float64 `protobuf:"fixed64,35,opt,name=min_payout_amount,json=minPayoutAmount" json:"min_payout_amount" bson:"min_payout_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"rolling_reserve_amount" bson:"rolling_reserve_amount" validate:"numeric,gte=0,lte=100"
	RollingReserveThreshold float64 `protobuf:"fixed64,36,opt,name=rolling_reserve_threshold,json=rollingReserveThreshold" json:"rolling_reserve_amount" bson:"rolling_reserve_amount" validate:"numeric,gte=0,lte=100"`
	// @inject_tag: json:"rolling_reserve_days" bson:"rolling_reserve_days" validate:"numeric,gte=0"
	RollingReserveDays int32 `protobuf:"varint,37,opt,name=rolling_reserve_days,json=rollingReserveDays" json:"rolling_reserve_days" bson:"rolling_reserve_days" validate:"numeric,gte=0"`
	// @inject_tag: json:"rolling_reserve_chargeback_transactions_threshold" bson:"rolling_reserve_chargeback_transactions_threshold" validate:"numeric,gte=0,lte=100"
	RollingReserveChargebackTransactionsThreshold float64 `protobuf:"fixed64,38,opt,name=rolling_reserve_chargeback_transactions_threshold,json=rollingReserveChargebackTransactionsThreshold" json:"rolling_reserve_chargeback_transactions_threshold" bson:"rolling_reserve_chargeback_transactions_threshold" validate:"numeric,gte=0,lte=100"`
	// @inject_tag: json:"item_min_cost_amount" bson:"item_min_cost_amount" validate:"numeric,gte=0"
	ItemMinCostAmount float64 `protobuf:"fixed64,39,opt,name=item_min_cost_amount,json=itemMinCostAmount" json:"item_min_cost_amount" bson:"item_min_cost_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"item_min_cost_currency" bson:"item_min_cost_currency" validate:"required,alpha,len=3"
	ItemMinCostCurrency string `protobuf:"bytes,40,opt,name=item_min_cost_currency,json=itemMinCostCurrency" json:"item_min_cost_currency" bson:"item_min_cost_currency" validate:"required,alpha,len=3"`
	CentrifugoToken     string `protobuf:"bytes,41,opt,name=centrifugo_token,json=centrifugoToken" json:"centrifugo_token,omitempty"`
	// @inject_tag: json:"-"
	AgreementSignatureData *MerchantAgreementSignatureData `protobuf:"bytes,43,opt,name=agreement_signature_data,json=agreementSignatureData" json:"-"`
	// @inject_tag: json:"-"
	Steps *MerchantCompletedSteps `protobuf:"bytes,46,opt,name=steps" json:"-"`
	// @inject_tag: json:"agreement_template"
	AgreementTemplate string `protobuf:"bytes,47,opt,name=agreement_template,json=agreementTemplate" json:"agreement_template"`
	// @inject_tag: json:"received_date"
	ReceivedDate *google_protobuf.Timestamp `protobuf:"bytes,48,opt,name=received_date,json=receivedDate" json:"received_date"`
	// @inject_tag: json:"status_last_updated_at"
	StatusLastUpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,49,opt,name=status_last_updated_at,json=statusLastUpdatedAt" json:"status_last_updated_at"`
	// @inject_tag: json:"has_projects"
	HasProjects bool `protobuf:"varint,50,opt,name=has_projects,json=hasProjects" json:"has_projects"`
	// @inject_tag: json:"agreement_number"
	AgreementNumber string `protobuf:"bytes,51,opt,name=agreement_number,json=agreementNumber" json:"agreement_number"`
	// @inject_tag: json:"minimal_payout_limit"
	MinimalPayoutLimit float32 `protobuf:"fixed32,52,opt,name=minimal_payout_limit,json=minimalPayoutLimit" json:"minimal_payout_limit"`
	// @inject_tag: json:"tariff"
	Tariff *MerchantTariff `protobuf:"bytes,53,opt,name=tariff" json:"tariff"`
	// @inject_tag: json:"manual_payouts_enabled"
	ManualPayoutsEnabled bool `protobuf:"varint,54,opt,name=manual_payouts_enabled,json=manualPayoutsEnabled" json:"manual_payouts_enabled"`
	// @inject_tag: json:"mcc_code"
	MccCode string `protobuf:"bytes,55,opt,name=mcc_code,json=mccCode" json:"mcc_code"`
	// @inject_tag: json:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,56,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id"`
	// @inject_tag: json:"merchant_operations_type" validate:"oneof=high-risk low-risk"
	MerchantOperationsType string `protobuf:"bytes,57,opt,name=merchant_operations_type,json=merchantOperationsType" json:"merchant_operations_type" validate:"oneof=high-risk low-risk"`
	// @inject_tag: json:"dont_charge_vat"
	DontChargeVat bool `protobuf:"varint,58,opt,name=dont_charge_vat,json=dontChargeVat" json:"dont_charge_vat"`
}

func (m *Merchant) Reset()                    { *m = Merchant{} }
func (m *Merchant) String() string            { return proto.CompactTextString(m) }
func (*Merchant) ProtoMessage()               {}
func (*Merchant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Merchant) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Merchant) GetUser() *MerchantUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Merchant) GetCompany() *MerchantCompanyInfo {
	if m != nil {
		return m.Company
	}
	return nil
}

func (m *Merchant) GetContacts() *MerchantContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *Merchant) GetBanking() *MerchantBanking {
	if m != nil {
		return m.Banking
	}
	return nil
}

func (m *Merchant) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Merchant) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Merchant) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Merchant) GetFirstPaymentAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.FirstPaymentAt
	}
	return nil
}

func (m *Merchant) GetIsVatEnabled() bool {
	if m != nil {
		return m.IsVatEnabled
	}
	return false
}

func (m *Merchant) GetIsCommissionToUserEnabled() bool {
	if m != nil {
		return m.IsCommissionToUserEnabled
	}
	return false
}

func (m *Merchant) GetHasMerchantSignature() bool {
	if m != nil {
		return m.HasMerchantSignature
	}
	return false
}

func (m *Merchant) GetHasPspSignature() bool {
	if m != nil {
		return m.HasPspSignature
	}
	return false
}

func (m *Merchant) GetLastPayout() *MerchantLastPayout {
	if m != nil {
		return m.LastPayout
	}
	return nil
}

func (m *Merchant) GetIsSigned() bool {
	if m != nil {
		return m.IsSigned
	}
	return false
}

func (m *Merchant) GetPaymentMethods() map[string]*MerchantPaymentMethod {
	if m != nil {
		return m.PaymentMethods
	}
	return nil
}

func (m *Merchant) GetAgreementType() int32 {
	if m != nil {
		return m.AgreementType
	}
	return 0
}

func (m *Merchant) GetAgreementSentViaMail() bool {
	if m != nil {
		return m.AgreementSentViaMail
	}
	return false
}

func (m *Merchant) GetMailTrackingLink() string {
	if m != nil {
		return m.MailTrackingLink
	}
	return ""
}

func (m *Merchant) GetS3AgreementName() string {
	if m != nil {
		return m.S3AgreementName
	}
	return ""
}

func (m *Merchant) GetPayoutCostAmount() float64 {
	if m != nil {
		return m.PayoutCostAmount
	}
	return 0
}

func (m *Merchant) GetPayoutCostCurrency() string {
	if m != nil {
		return m.PayoutCostCurrency
	}
	return ""
}

func (m *Merchant) GetMinPayoutAmount() float64 {
	if m != nil {
		return m.MinPayoutAmount
	}
	return 0
}

func (m *Merchant) GetRollingReserveThreshold() float64 {
	if m != nil {
		return m.RollingReserveThreshold
	}
	return 0
}

func (m *Merchant) GetRollingReserveDays() int32 {
	if m != nil {
		return m.RollingReserveDays
	}
	return 0
}

func (m *Merchant) GetRollingReserveChargebackTransactionsThreshold() float64 {
	if m != nil {
		return m.RollingReserveChargebackTransactionsThreshold
	}
	return 0
}

func (m *Merchant) GetItemMinCostAmount() float64 {
	if m != nil {
		return m.ItemMinCostAmount
	}
	return 0
}

func (m *Merchant) GetItemMinCostCurrency() string {
	if m != nil {
		return m.ItemMinCostCurrency
	}
	return ""
}

func (m *Merchant) GetCentrifugoToken() string {
	if m != nil {
		return m.CentrifugoToken
	}
	return ""
}

func (m *Merchant) GetAgreementSignatureData() *MerchantAgreementSignatureData {
	if m != nil {
		return m.AgreementSignatureData
	}
	return nil
}

func (m *Merchant) GetSteps() *MerchantCompletedSteps {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Merchant) GetAgreementTemplate() string {
	if m != nil {
		return m.AgreementTemplate
	}
	return ""
}

func (m *Merchant) GetReceivedDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.ReceivedDate
	}
	return nil
}

func (m *Merchant) GetStatusLastUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.StatusLastUpdatedAt
	}
	return nil
}

func (m *Merchant) GetHasProjects() bool {
	if m != nil {
		return m.HasProjects
	}
	return false
}

func (m *Merchant) GetAgreementNumber() string {
	if m != nil {
		return m.AgreementNumber
	}
	return ""
}

func (m *Merchant) GetMinimalPayoutLimit() float32 {
	if m != nil {
		return m.MinimalPayoutLimit
	}
	return 0
}

func (m *Merchant) GetTariff() *MerchantTariff {
	if m != nil {
		return m.Tariff
	}
	return nil
}

func (m *Merchant) GetManualPayoutsEnabled() bool {
	if m != nil {
		return m.ManualPayoutsEnabled
	}
	return false
}

func (m *Merchant) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

func (m *Merchant) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

func (m *Merchant) GetMerchantOperationsType() string {
	if m != nil {
		return m.MerchantOperationsType
	}
	return ""
}

func (m *Merchant) GetDontChargeVat() bool {
	if m != nil {
		return m.DontChargeVat
	}
	return false
}

type MerchantCommon struct {
	// @inject_tag: bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:"_id"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name"`
	// @inject_tag: json:"currency"
	Currency string `protobuf:"bytes,3,opt,name=currency" json:"currency"`
	// @inject_tag: json:"status"
	Status int32 `protobuf:"varint,4,opt,name=status" json:"status"`
	// @inject_tag: json:"has_projects"
	HasProjects bool `protobuf:"varint,5,opt,name=has_projects,json=hasProjects" json:"has_projects"`
}

func (m *MerchantCommon) Reset()                    { *m = MerchantCommon{} }
func (m *MerchantCommon) String() string            { return proto.CompactTextString(m) }
func (*MerchantCommon) ProtoMessage()               {}
func (*MerchantCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MerchantCommon) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MerchantCommon) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MerchantCommon) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MerchantCommon) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MerchantCommon) GetHasProjects() bool {
	if m != nil {
		return m.HasProjects
	}
	return false
}

type SystemNotificationStatuses struct {
	// @inject_tag: json:"from"
	From int32 `protobuf:"varint,1,opt,name=from" json:"from"`
	// @inject_tag: json:"to"
	To int32 `protobuf:"varint,2,opt,name=to" json:"to"`
}

func (m *SystemNotificationStatuses) Reset()                    { *m = SystemNotificationStatuses{} }
func (m *SystemNotificationStatuses) String() string            { return proto.CompactTextString(m) }
func (*SystemNotificationStatuses) ProtoMessage()               {}
func (*SystemNotificationStatuses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SystemNotificationStatuses) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *SystemNotificationStatuses) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

type Notification struct {
	// @inject_tag: json:"id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,3,opt,name=message" json:"message"`
	// @inject_tag: json:"merchant_id"
	MerchantId string `protobuf:"bytes,4,opt,name=merchant_id,json=merchantId" json:"merchant_id"`
	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id"`
	// @inject_tag: json:"is_system"
	IsSystem bool `protobuf:"varint,6,opt,name=is_system,json=isSystem" json:"is_system"`
	// @inject_tag: json:"is_read"
	IsRead bool `protobuf:"varint,7,opt,name=is_read,json=isRead" json:"is_read"`
	// @inject_tag: json:"statuses"
	Statuses *SystemNotificationStatuses `protobuf:"bytes,8,opt,name=statuses" json:"statuses"`
	// @inject_tag: json:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at"`
	// @inject_tag: json:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt" json:"updated_at"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Notification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Notification) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Notification) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *Notification) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Notification) GetIsSystem() bool {
	if m != nil {
		return m.IsSystem
	}
	return false
}

func (m *Notification) GetIsRead() bool {
	if m != nil {
		return m.IsRead
	}
	return false
}

func (m *Notification) GetStatuses() *SystemNotificationStatuses {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *Notification) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Notification) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type OrderPlatformFee struct {
	Amount        float32 `protobuf:"fixed32,1,opt,name=amount" json:"amount,omitempty"`
	Currency      string  `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
	EffectiveRate float32 `protobuf:"fixed32,3,opt,name=effective_rate,json=effectiveRate" json:"effective_rate,omitempty"`
}

func (m *OrderPlatformFee) Reset()                    { *m = OrderPlatformFee{} }
func (m *OrderPlatformFee) String() string            { return proto.CompactTextString(m) }
func (*OrderPlatformFee) ProtoMessage()               {}
func (*OrderPlatformFee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *OrderPlatformFee) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderPlatformFee) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *OrderPlatformFee) GetEffectiveRate() float32 {
	if m != nil {
		return m.EffectiveRate
	}
	return 0
}

type OrderTax struct {
	// @inject_tag: json:"type"
	Type string `protobuf:"bytes,1,opt,name=type" json:"type"`
	// @inject_tag: json:"rate"
	Rate float64 `protobuf:"fixed64,2,opt,name=rate" json:"rate"`
	// @inject_tag: json:"amount"
	Amount float64 `protobuf:"fixed64,3,opt,name=amount" json:"amount"`
	// @inject_tag: json:"currency"
	Currency string `protobuf:"bytes,4,opt,name=currency" json:"currency"`
}

func (m *OrderTax) Reset()                    { *m = OrderTax{} }
func (m *OrderTax) String() string            { return proto.CompactTextString(m) }
func (*OrderTax) ProtoMessage()               {}
func (*OrderTax) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *OrderTax) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *OrderTax) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *OrderTax) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderTax) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type OrderBillingAddress struct {
	// @inject_tag: validate:"omitempty,alpha,len=2"
	Country string `protobuf:"bytes,1,opt,name=country" json:"country,omitempty" validate:"omitempty,alpha,len=2"`
	City    string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	// @inject_tag: bson:"postal_code"
	PostalCode string `protobuf:"bytes,3,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty" bson:"postal_code"`
	State      string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
}

func (m *OrderBillingAddress) Reset()                    { *m = OrderBillingAddress{} }
func (m *OrderBillingAddress) String() string            { return proto.CompactTextString(m) }
func (*OrderBillingAddress) ProtoMessage()               {}
func (*OrderBillingAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *OrderBillingAddress) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *OrderBillingAddress) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *OrderBillingAddress) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *OrderBillingAddress) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type OrderUser struct {
	// @inject_tag: json:"id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id"`
	// @inject_tag: json:"object"
	Object string `protobuf:"bytes,2,opt,name=object" json:"object"`
	// @inject_tag: json:"external_id" bson:"external_id"
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId" json:"external_id" bson:"external_id"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,4,opt,name=name" json:"name"`
	// @inject_tag: json:"email" validate:"omitempty,email"
	Email string `protobuf:"bytes,5,opt,name=email" json:"email" validate:"omitempty,email"`
	// @inject_tag: json:"email_verified" bson:"email_verified"
	EmailVerified bool `protobuf:"varint,6,opt,name=email_verified,json=emailVerified" json:"email_verified" bson:"email_verified"`
	// @inject_tag: json:"phone" validate:"omitempty,phone"
	Phone string `protobuf:"bytes,7,opt,name=phone" json:"phone" validate:"omitempty,phone"`
	// @inject_tag: json:"phone_verified" bson:"phone_verified"
	PhoneVerified bool `protobuf:"varint,8,opt,name=phone_verified,json=phoneVerified" json:"phone_verified" bson:"phone_verified"`
	// @inject_tag: json:"ip" validate:"omitempty,ip"
	Ip string `protobuf:"bytes,9,opt,name=ip" json:"ip" validate:"omitempty,ip"`
	// @inject_tag: json:"locale" validate:"omitempty,alpha,len=2"
	Locale string `protobuf:"bytes,10,opt,name=locale" json:"locale" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"address"
	Address *OrderBillingAddress `protobuf:"bytes,11,opt,name=address" json:"address"`
	// @inject_tag: json:"metadata"
	Metadata map[string]string `protobuf:"bytes,12,rep,name=metadata" json:"metadata" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"-"
	TechEmail string `protobuf:"bytes,13,opt,name=tech_email,json=techEmail" json:"-"`
	// @inject_tag: json:"notify_new_region" bson:"notify_new_region"
	NotifyNewRegion bool `protobuf:"varint,14,opt,name=notify_new_region,json=notifyNewRegion" json:"notify_new_region" bson:"notify_new_region"`
	// @inject_tag: json:"notify_new_region_email" bson:"notify_new_region_email"
	NotifyNewRegionEmail string `protobuf:"bytes,15,opt,name=notify_new_region_email,json=notifyNewRegionEmail" json:"notify_new_region_email" bson:"notify_new_region_email"`
}

func (m *OrderUser) Reset()                    { *m = OrderUser{} }
func (m *OrderUser) String() string            { return proto.CompactTextString(m) }
func (*OrderUser) ProtoMessage()               {}
func (*OrderUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *OrderUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderUser) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *OrderUser) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *OrderUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OrderUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *OrderUser) GetEmailVerified() bool {
	if m != nil {
		return m.EmailVerified
	}
	return false
}

func (m *OrderUser) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *OrderUser) GetPhoneVerified() bool {
	if m != nil {
		return m.PhoneVerified
	}
	return false
}

func (m *OrderUser) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *OrderUser) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *OrderUser) GetAddress() *OrderBillingAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *OrderUser) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *OrderUser) GetTechEmail() string {
	if m != nil {
		return m.TechEmail
	}
	return ""
}

func (m *OrderUser) GetNotifyNewRegion() bool {
	if m != nil {
		return m.NotifyNewRegion
	}
	return false
}

func (m *OrderUser) GetNotifyNewRegionEmail() string {
	if m != nil {
		return m.NotifyNewRegionEmail
	}
	return ""
}

type OrderNotificationCancellation struct {
	// @inject_tag: json:"code" bson:"code"
	Code string `protobuf:"bytes,1,opt,name=code" json:"code" bson:"code"`
	// @inject_tag: json:"reason" bson:"reason"
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason" bson:"reason"`
}

func (m *OrderNotificationCancellation) Reset()                    { *m = OrderNotificationCancellation{} }
func (m *OrderNotificationCancellation) String() string            { return proto.CompactTextString(m) }
func (*OrderNotificationCancellation) ProtoMessage()               {}
func (*OrderNotificationCancellation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *OrderNotificationCancellation) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *OrderNotificationCancellation) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type Order struct {
	// @inject_tag: json:"-" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"-" bson:"_id"`
	// @inject_tag: json:"id" bson:"uuid"
	Uuid string `protobuf:"bytes,2,opt,name=uuid" json:"id" bson:"uuid"`
	// @inject_tag: json:"transaction" bson:"pm_order_id"
	Transaction string `protobuf:"bytes,3,opt,name=transaction" json:"transaction" bson:"pm_order_id"`
	// @inject_tag: json:"object" bson:"object"
	Object string `protobuf:"bytes,4,opt,name=object" json:"object" bson:"object"`
	// @inject_tag: json:"status" bson:"status"
	Status string `protobuf:"bytes,5,opt,name=status" json:"status" bson:"status"`
	// @inject_tag: json:"-" bson:"private_status"
	PrivateStatus int32 `protobuf:"varint,6,opt,name=private_status,json=privateStatus" json:"-" bson:"private_status"`
	// @inject_tag: json:"description" bson:"description"
	Description string `protobuf:"bytes,7,opt,name=description" json:"description" bson:"description"`
	// @inject_tag: bson:"created_at" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty" bson:"created_at" bson:"created_at"`
	// @inject_tag: json:"-" bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"-" bson:"updated_at"`
	// @inject_tag: json:"canceled_at" bson:"canceled_at"
	CanceledAt *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=canceled_at,json=canceledAt" json:"canceled_at" bson:"canceled_at"`
	// @inject_tag: json:"canceled" bson:"canceled"
	Canceled bool `protobuf:"varint,11,opt,name=canceled" json:"canceled" bson:"canceled"`
	// @inject_tag: json:"cancellation" bson:"cancellation"
	Cancellation *OrderNotificationCancellation `protobuf:"bytes,12,opt,name=cancellation" json:"cancellation" bson:"cancellation"`
	// @inject_tag: json:"refunded" bson:"refunded"
	Refunded bool `protobuf:"varint,13,opt,name=refunded" json:"refunded" bson:"refunded"`
	// @inject_tag: json:"refunded_at" bson:"refunded_at"
	RefundedAt *google_protobuf.Timestamp `protobuf:"bytes,14,opt,name=refunded_at,json=refundedAt" json:"refunded_at" bson:"refunded_at"`
	// @inject_tag: json:"receipt_email" bson:"receipt_email"
	ReceiptEmail string `protobuf:"bytes,15,opt,name=receipt_email,json=receiptEmail" json:"receipt_email" bson:"receipt_email"`
	// @inject_tag: json:"receipt_phone" bson:"receipt_phone"
	ReceiptPhone string `protobuf:"bytes,16,opt,name=receipt_phone,json=receiptPhone" json:"receipt_phone" bson:"receipt_phone"`
	// @inject_tag: json:"receipt_number" bson:"receipt_number"
	ReceiptNumber string `protobuf:"bytes,17,opt,name=receipt_number,json=receiptNumber" json:"receipt_number" bson:"receipt_number"`
	// @inject_tag: json:"receipt_url" bson:"receipt_url"
	ReceiptUrl string `protobuf:"bytes,18,opt,name=receipt_url,json=receiptUrl" json:"receipt_url" bson:"receipt_url"`
	// @inject_tag: json:"agreement_version" bson:"agreement_version" validate:"required"
	AgreementVersion string `protobuf:"bytes,19,opt,name=agreement_version,json=agreementVersion" json:"agreement_version" bson:"agreement_version" validate:"required"`
	// @inject_tag: json:"agreement_accepted" bson:"agreement_accepted" validate:"required"
	AgreementAccepted bool `protobuf:"varint,20,opt,name=agreement_accepted,json=agreementAccepted" json:"agreement_accepted" bson:"agreement_accepted" validate:"required"`
	// @inject_tag: json:"notify_sale" bson:"notify_sale" validate:"required"
	NotifySale bool `protobuf:"varint,21,opt,name=notify_sale,json=notifySale" json:"notify_sale" bson:"notify_sale" validate:"required"`
	// @inject_tag: json:"notify_sale_email" bson:"notify_sale_email"
	NotifySaleEmail string `protobuf:"bytes,22,opt,name=notify_sale_email,json=notifySaleEmail" json:"notify_sale_email" bson:"notify_sale_email"`
	// @inject_tag: json:"issuer" bson:"issuer" validate:"required"
	Issuer *OrderIssuer `protobuf:"bytes,23,opt,name=issuer" json:"issuer" bson:"issuer" validate:"required"`
	// @inject_tag: json:"amount" bson:"total_payment_amount"
	TotalPaymentAmount float64 `protobuf:"fixed64,24,opt,name=total_payment_amount,json=totalPaymentAmount" json:"amount" bson:"total_payment_amount"`
	// @inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,25,opt,name=currency" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"user" bson:"user"
	User *OrderUser `protobuf:"bytes,26,opt,name=user" json:"user" bson:"user"`
	// @inject_tag: json:"billing_address" bson:"billing_address"
	BillingAddress *OrderBillingAddress `protobuf:"bytes,27,opt,name=billing_address,json=billingAddress" json:"billing_address" bson:"billing_address"`
	// @inject_tag: json:"tax" bson:"tax"
	Tax *OrderTax `protobuf:"bytes,28,opt,name=tax" json:"tax" bson:"tax"`
	// @inject_tag: json:"method" bson:"payment_method"
	PaymentMethod *PaymentMethodOrder `protobuf:"bytes,29,opt,name=payment_method,json=paymentMethod" json:"method" bson:"payment_method"`
	// @inject_tag: json:"items" bson:"items" validate="omitempty,gte=1,dive"
	Items []*OrderItem `protobuf:"bytes,30,rep,name=items" json:"items" bson:"items"`
	// @inject_tag: json:"refund" bson:"refund" validate:"omitempty,dive"
	Refund *OrderNotificationRefund `protobuf:"bytes,31,opt,name=refund" json:"refund" bson:"refund" validate:"omitempty,dive"`
	// @inject_tag: json:"metadata" bson:"metadata"
	Metadata map[string]string `protobuf:"bytes,32,rep,name=metadata" json:"metadata" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" bson:"metadata"`
	// @inject_tag: json:"-" bson:"private_metadata"
	PrivateMetadata map[string]string `protobuf:"bytes,33,rep,name=private_metadata,json=privateMetadata" json:"-" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" bson:"private_metadata"`
	// @inject_tag: json:"-" bson:"project"
	Project *ProjectOrder `protobuf:"bytes,34,opt,name=project" json:"-" bson:"project"`
	// @inject_tag: json:"-" bson:"project_order_id"
	ProjectOrderId string `protobuf:"bytes,35,opt,name=project_order_id,json=projectOrderId" json:"-" bson:"project_order_id"`
	// @inject_tag: json:"-" bson:"project_account"
	ProjectAccount string `protobuf:"bytes,36,opt,name=project_account,json=projectAccount" json:"-" bson:"project_account"`
	// @inject_tag: json:"-" bson:"project_last_requested_at"
	ProjectLastRequestedAt *google_protobuf.Timestamp `protobuf:"bytes,37,opt,name=project_last_requested_at,json=projectLastRequestedAt" json:"-" bson:"project_last_requested_at"`
	// @inject_tag: json:"-" bson:"project_params"
	ProjectParams map[string]string `protobuf:"bytes,38,rep,name=project_params,json=projectParams" json:"-" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" bson:"project_params"`
	// @inject_tag: json:"-" bson:"pm_order_close_date"
	PaymentMethodOrderClosedAt *google_protobuf.Timestamp `protobuf:"bytes,39,opt,name=payment_method_order_closed_at,json=paymentMethodOrderClosedAt" json:"-" bson:"pm_order_close_date"`
	// @inject_tag: json:"-" bson:"created_by_json"
	IsJsonRequest bool `protobuf:"varint,40,opt,name=is_json_request,json=isJsonRequest" json:"-" bson:"created_by_json"`
	// @inject_tag: json:"original_amount" bson:"private_amount" validate:"required,numeric,gt=0"
	OrderAmount float64 `protobuf:"fixed64,41,opt,name=order_amount,json=orderAmount" json:"original_amount" bson:"private_amount" validate:"required,numeric,gt=0"`
	// @inject_tag: json:"-" bson:"pm_account"
	PaymentMethodPayerAccount string `protobuf:"bytes,42,opt,name=payment_method_payer_account,json=paymentMethodPayerAccount" json:"-" bson:"pm_account"`
	// @inject_tag: json:"-" bson:"pm_txn_params"
	PaymentMethodTxnParams map[string]string `protobuf:"bytes,43,rep,name=payment_method_txn_params,json=paymentMethodTxnParams" json:"-" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" bson:"pm_txn_params"`
	// @inject_tag: json:"-" bson:"payment_requisites"
	PaymentRequisites map[string]string `protobuf:"bytes,44,rep,name=payment_requisites,json=paymentRequisites" json:"-" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" bson:"payment_requisites"`
	// @inject_tag: json:"-" bson:"expire_date_to_form_input"
	ExpireDateToFormInput *google_protobuf.Timestamp `protobuf:"bytes,45,opt,name=expire_date_to_form_input,json=expireDateToFormInput" json:"-" bson:"expire_date_to_form_input"`
	// @inject_tag: json:"-" bson:"user_address_data_required"
	UserAddressDataRequired bool `protobuf:"varint,46,opt,name=user_address_data_required,json=userAddressDataRequired" json:"-" bson:"user_address_data_required"`
	// @inject_tag: json:"-" bson:"products" validate:"omitempty,gte=1,dive,hexadecimal,len=24"
	Products []string `protobuf:"bytes,47,rep,name=products" json:"-" bson:"products" validate:"omitempty,gte=1,dive,hexadecimal,len=24"`
	// @inject_tag: json:"-" bson:"is_notifications_sent"
	IsNotificationsSent map[string]bool `protobuf:"bytes,48,rep,name=is_notifications_sent,json=isNotificationsSent" json:"-" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value" bson:"is_notifications_sent"`
	// @inject_tag: json:"-" bson:"country_restriction"
	CountryRestriction *CountryRestriction `protobuf:"bytes,49,opt,name=country_restriction,json=countryRestriction" json:"-" bson:"country_restriction"`
	// @inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	CountryCode string `protobuf:"bytes,50,opt,name=country_code,json=countryCode" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"-"
	ParentOrder *ParentOrder `protobuf:"bytes,51,opt,name=parent_order,json=parentOrder" json:"-"`
	// @inject_tag: json:"-"
	ParentPaymentAt *google_protobuf.Timestamp `protobuf:"bytes,52,opt,name=parent_payment_at,json=parentPaymentAt" json:"-"`
	// @inject_tag: json:"-"
	Type string `protobuf:"bytes,53,opt,name=type" json:"-"`
	// @inject_tag: json:"-"
	IsVatDeduction bool `protobuf:"varint,54,opt,name=is_vat_deduction,json=isVatDeduction" json:"-"`
	// @inject_tag: validate="oneof=simple product key virtual_currency" json:"type"
	ProductType string `protobuf:"bytes,69,opt,name=product_type,json=productType" json:"type"`
	// @inject_tag: json:"platform_id"
	PlatformId string `protobuf:"bytes,70,opt,name=platform_id,json=platformId" json:"platform_id"`
	// @inject_tag: json:"-" bson:"keys"
	Keys []string `protobuf:"bytes,71,rep,name=keys" json:"-" bson:"keys"`
	// @inject_tag: json:"-"
	IsKeyProductNotified bool `protobuf:"varint,72,opt,name=is_key_product_notified,json=isKeyProductNotified" json:"-"`
	// @inject_tag: json:"receipt_id" bson:"receipt_id"
	ReceiptId string `protobuf:"bytes,73,opt,name=receipt_id,json=receiptId" json:"receipt_id" bson:"receipt_id"`
	// @inject_tag: json:"virtual_currency_amount" bson:"virtual_currency_amount"
	VirtualCurrencyAmount float64 `protobuf:"fixed64,74,opt,name=virtual_currency_amount,json=virtualCurrencyAmount" json:"virtual_currency_amount" bson:"virtual_currency_amount"`
	// @inject_tag: json:"is_buy_for_virtual_currency" bson:"is_buy_for_virtual_currency"
	IsBuyForVirtualCurrency bool `protobuf:"varint,75,opt,name=is_buy_for_virtual_currency,json=isBuyForVirtualCurrency" json:"is_buy_for_virtual_currency" bson:"is_buy_for_virtual_currency"`
	// @inject_tag: json:"-"
	MccCode string `protobuf:"bytes,76,opt,name=mcc_code,json=mccCode" json:"-"`
	// @inject_tag: json:"-"
	OperatingCompanyId string `protobuf:"bytes,77,opt,name=operating_company_id,json=operatingCompanyId" json:"-"`
	// @inject_tag: json:"-"
	IsHighRisk bool `protobuf:"varint,78,opt,name=is_high_risk,json=isHighRisk" json:"-"`
	// @inject_tag: json:"-"
	IsCurrencyPredefined bool `protobuf:"varint,79,opt,name=is_currency_predefined,json=isCurrencyPredefined" json:"-"`
	// @inject_tag: json:"charge_currency"
	ChargeCurrency string `protobuf:"bytes,80,opt,name=charge_currency,json=chargeCurrency" json:"charge_currency"`
	// @inject_tag: json:"charge_amount"
	ChargeAmount float64 `protobuf:"fixed64,81,opt,name=charge_amount,json=chargeAmount" json:"charge_amount"`
	// @inject_tag: json:"-"
	PaymentIpCountry string `protobuf:"bytes,82,opt,name=payment_ip_country,json=paymentIpCountry" json:"-"`
	// @inject_tag: json:"-"
	IsIpCountryMismatchBin bool `protobuf:"varint,83,opt,name=is_ip_country_mismatch_bin,json=isIpCountryMismatchBin" json:"-"`
	// @inject_tag: json:"-"
	BillingCountryChangedByUser bool `protobuf:"varint,84,opt,name=billing_country_changed_by_user,json=billingCountryChangedByUser" json:"-"`
	// @inject_tag: json:"-"
	IsRefundAllowed bool `protobuf:"varint,85,opt,name=is_refund_allowed,json=isRefundAllowed" json:"-"`
	// @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
	VatPayer string `protobuf:"bytes,86,opt,name=vat_payer,json=vatPayer" json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"`
	// @inject_tag: json:"is_production"
	IsProduction bool `protobuf:"varint,87,opt,name=is_production,json=isProduction" json:"is_production"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Order) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

func (m *Order) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *Order) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Order) GetPrivateStatus() int32 {
	if m != nil {
		return m.PrivateStatus
	}
	return 0
}

func (m *Order) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Order) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Order) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Order) GetCanceledAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CanceledAt
	}
	return nil
}

func (m *Order) GetCanceled() bool {
	if m != nil {
		return m.Canceled
	}
	return false
}

func (m *Order) GetCancellation() *OrderNotificationCancellation {
	if m != nil {
		return m.Cancellation
	}
	return nil
}

func (m *Order) GetRefunded() bool {
	if m != nil {
		return m.Refunded
	}
	return false
}

func (m *Order) GetRefundedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.RefundedAt
	}
	return nil
}

func (m *Order) GetReceiptEmail() string {
	if m != nil {
		return m.ReceiptEmail
	}
	return ""
}

func (m *Order) GetReceiptPhone() string {
	if m != nil {
		return m.ReceiptPhone
	}
	return ""
}

func (m *Order) GetReceiptNumber() string {
	if m != nil {
		return m.ReceiptNumber
	}
	return ""
}

func (m *Order) GetReceiptUrl() string {
	if m != nil {
		return m.ReceiptUrl
	}
	return ""
}

func (m *Order) GetAgreementVersion() string {
	if m != nil {
		return m.AgreementVersion
	}
	return ""
}

func (m *Order) GetAgreementAccepted() bool {
	if m != nil {
		return m.AgreementAccepted
	}
	return false
}

func (m *Order) GetNotifySale() bool {
	if m != nil {
		return m.NotifySale
	}
	return false
}

func (m *Order) GetNotifySaleEmail() string {
	if m != nil {
		return m.NotifySaleEmail
	}
	return ""
}

func (m *Order) GetIssuer() *OrderIssuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *Order) GetTotalPaymentAmount() float64 {
	if m != nil {
		return m.TotalPaymentAmount
	}
	return 0
}

func (m *Order) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Order) GetUser() *OrderUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Order) GetBillingAddress() *OrderBillingAddress {
	if m != nil {
		return m.BillingAddress
	}
	return nil
}

func (m *Order) GetTax() *OrderTax {
	if m != nil {
		return m.Tax
	}
	return nil
}

func (m *Order) GetPaymentMethod() *PaymentMethodOrder {
	if m != nil {
		return m.PaymentMethod
	}
	return nil
}

func (m *Order) GetItems() []*OrderItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Order) GetRefund() *OrderNotificationRefund {
	if m != nil {
		return m.Refund
	}
	return nil
}

func (m *Order) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Order) GetPrivateMetadata() map[string]string {
	if m != nil {
		return m.PrivateMetadata
	}
	return nil
}

func (m *Order) GetProject() *ProjectOrder {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *Order) GetProjectOrderId() string {
	if m != nil {
		return m.ProjectOrderId
	}
	return ""
}

func (m *Order) GetProjectAccount() string {
	if m != nil {
		return m.ProjectAccount
	}
	return ""
}

func (m *Order) GetProjectLastRequestedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.ProjectLastRequestedAt
	}
	return nil
}

func (m *Order) GetProjectParams() map[string]string {
	if m != nil {
		return m.ProjectParams
	}
	return nil
}

func (m *Order) GetPaymentMethodOrderClosedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.PaymentMethodOrderClosedAt
	}
	return nil
}

func (m *Order) GetIsJsonRequest() bool {
	if m != nil {
		return m.IsJsonRequest
	}
	return false
}

func (m *Order) GetOrderAmount() float64 {
	if m != nil {
		return m.OrderAmount
	}
	return 0
}

func (m *Order) GetPaymentMethodPayerAccount() string {
	if m != nil {
		return m.PaymentMethodPayerAccount
	}
	return ""
}

func (m *Order) GetPaymentMethodTxnParams() map[string]string {
	if m != nil {
		return m.PaymentMethodTxnParams
	}
	return nil
}

func (m *Order) GetPaymentRequisites() map[string]string {
	if m != nil {
		return m.PaymentRequisites
	}
	return nil
}

func (m *Order) GetExpireDateToFormInput() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpireDateToFormInput
	}
	return nil
}

func (m *Order) GetUserAddressDataRequired() bool {
	if m != nil {
		return m.UserAddressDataRequired
	}
	return false
}

func (m *Order) GetProducts() []string {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *Order) GetIsNotificationsSent() map[string]bool {
	if m != nil {
		return m.IsNotificationsSent
	}
	return nil
}

func (m *Order) GetCountryRestriction() *CountryRestriction {
	if m != nil {
		return m.CountryRestriction
	}
	return nil
}

func (m *Order) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Order) GetParentOrder() *ParentOrder {
	if m != nil {
		return m.ParentOrder
	}
	return nil
}

func (m *Order) GetParentPaymentAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.ParentPaymentAt
	}
	return nil
}

func (m *Order) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Order) GetIsVatDeduction() bool {
	if m != nil {
		return m.IsVatDeduction
	}
	return false
}

func (m *Order) GetProductType() string {
	if m != nil {
		return m.ProductType
	}
	return ""
}

func (m *Order) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *Order) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *Order) GetIsKeyProductNotified() bool {
	if m != nil {
		return m.IsKeyProductNotified
	}
	return false
}

func (m *Order) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *Order) GetVirtualCurrencyAmount() float64 {
	if m != nil {
		return m.VirtualCurrencyAmount
	}
	return 0
}

func (m *Order) GetIsBuyForVirtualCurrency() bool {
	if m != nil {
		return m.IsBuyForVirtualCurrency
	}
	return false
}

func (m *Order) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

func (m *Order) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

func (m *Order) GetIsHighRisk() bool {
	if m != nil {
		return m.IsHighRisk
	}
	return false
}

func (m *Order) GetIsCurrencyPredefined() bool {
	if m != nil {
		return m.IsCurrencyPredefined
	}
	return false
}

func (m *Order) GetChargeCurrency() string {
	if m != nil {
		return m.ChargeCurrency
	}
	return ""
}

func (m *Order) GetChargeAmount() float64 {
	if m != nil {
		return m.ChargeAmount
	}
	return 0
}

func (m *Order) GetPaymentIpCountry() string {
	if m != nil {
		return m.PaymentIpCountry
	}
	return ""
}

func (m *Order) GetIsIpCountryMismatchBin() bool {
	if m != nil {
		return m.IsIpCountryMismatchBin
	}
	return false
}

func (m *Order) GetBillingCountryChangedByUser() bool {
	if m != nil {
		return m.BillingCountryChangedByUser
	}
	return false
}

func (m *Order) GetIsRefundAllowed() bool {
	if m != nil {
		return m.IsRefundAllowed
	}
	return false
}

func (m *Order) GetVatPayer() string {
	if m != nil {
		return m.VatPayer
	}
	return ""
}

func (m *Order) GetIsProduction() bool {
	if m != nil {
		return m.IsProduction
	}
	return false
}

type ParentOrder struct {
	// @inject_tag: json:"id"
	Id string `protobuf:"bytes,51,opt,name=id" json:"id"`
	// @inject_tag: json:"uuid"
	Uuid string `protobuf:"bytes,52,opt,name=uuid" json:"uuid"`
}

func (m *ParentOrder) Reset()                    { *m = ParentOrder{} }
func (m *ParentOrder) String() string            { return proto.CompactTextString(m) }
func (*ParentOrder) ProtoMessage()               {}
func (*ParentOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ParentOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ParentOrder) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type CountryRestriction struct {
	// @inject_tag: json:"iso_code_a2" bson:"iso_code_a2" validate:"alpha,len=2"
	IsoCodeA2 string `protobuf:"bytes,1,opt,name=iso_code_a2,json=isoCodeA2" json:"iso_code_a2" bson:"iso_code_a2" validate:"alpha,len=2"`
	// @inject_tag: json:"payments_allowed" bson:"payments_allowed"
	PaymentsAllowed bool `protobuf:"varint,2,opt,name=payments_allowed,json=paymentsAllowed" json:"payments_allowed" bson:"payments_allowed"`
	// @inject_tag: json:"change_allowed" bson:"change_allowed"
	ChangeAllowed bool `protobuf:"varint,3,opt,name=change_allowed,json=changeAllowed" json:"change_allowed" bson:"change_allowed"`
}

func (m *CountryRestriction) Reset()                    { *m = CountryRestriction{} }
func (m *CountryRestriction) String() string            { return proto.CompactTextString(m) }
func (*CountryRestriction) ProtoMessage()               {}
func (*CountryRestriction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CountryRestriction) GetIsoCodeA2() string {
	if m != nil {
		return m.IsoCodeA2
	}
	return ""
}

func (m *CountryRestriction) GetPaymentsAllowed() bool {
	if m != nil {
		return m.PaymentsAllowed
	}
	return false
}

func (m *CountryRestriction) GetChangeAllowed() bool {
	if m != nil {
		return m.ChangeAllowed
	}
	return false
}

type OrderItem struct {
	// @inject_tag: validate:"required,hexadecimal,len=24" json:"id" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" validate:"required,hexadecimal,len=24" bson:"_id"`
	// @inject_tag: validate:"required" json:"object" bson:"object"
	Object string `protobuf:"bytes,2,opt,name=object" json:"object" validate:"required" bson:"object"`
	// @inject_tag: validate:"required" json:"sku" bson:"sku"
	Sku string `protobuf:"bytes,3,opt,name=sku" json:"sku" validate:"required" bson:"sku"`
	// @inject_tag: validate:"required" json:"name" bson:"name"
	Name string `protobuf:"bytes,4,opt,name=name" json:"name" validate:"required" bson:"name"`
	// @inject_tag: validate:"required" json:"description" bson:"description"
	Description string `protobuf:"bytes,5,opt,name=description" json:"description" validate:"required" bson:"description"`
	// @inject_tag: validate:"required,numeric,gt=0" json:"amount" bson:"amount"
	Amount float64 `protobuf:"fixed64,6,opt,name=amount" json:"amount" validate:"required,numeric,gt=0" bson:"amount"`
	// @inject_tag: validate:"required,alpha,len=3" json:"currency" bson:"currency"
	Currency string `protobuf:"bytes,7,opt,name=currency" json:"currency" validate:"required,alpha,len=3" bson:"currency"`
	// @inject_tag: validate:"dive,omitempty,uri" json:"images" bson:"images"
	Images []string `protobuf:"bytes,8,rep,name=images" json:"images" validate:"dive,omitempty,uri" bson:"images"`
	// @inject_tag: validate:"omitempty,url" json:"url" bson:"url"
	Url string `protobuf:"bytes,9,opt,name=url" json:"url" validate:"omitempty,url" bson:"url"`
	// @inject_tag: json:"metadata" bson:"metadata"
	Metadata map[string]string `protobuf:"bytes,10,rep,name=metadata" json:"metadata" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" bson:"metadata"`
	// @inject_tag: json:"created_at" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt" json:"created_at" bson:"created_at"`
	// @inject_tag: json:"updated_at" bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt" json:"updated_at" bson:"updated_at"`
	// @inject_tag: validate:"omitempty,min=3" json:"platform_id" bson:"platform_id"
	PlatformId string `protobuf:"bytes,13,opt,name=platform_id,json=platformId" json:"platform_id" validate:"omitempty,min=3" bson:"platform_id"`
	// @inject_tag: validate:"omitempty,min=5" json:"code" bson:"code"
	Code string `protobuf:"bytes,14,opt,name=code" json:"code" validate:"omitempty,min=5" bson:"code"`
}

func (m *OrderItem) Reset()                    { *m = OrderItem{} }
func (m *OrderItem) String() string            { return proto.CompactTextString(m) }
func (*OrderItem) ProtoMessage()               {}
func (*OrderItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *OrderItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderItem) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *OrderItem) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *OrderItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OrderItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *OrderItem) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderItem) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *OrderItem) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *OrderItem) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *OrderItem) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *OrderItem) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *OrderItem) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *OrderItem) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *OrderItem) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type OrderPaginate struct {
	// @inject_tag: json:"count"
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count"`
	// @inject_tag: json:"items"
	Items []*Order `protobuf:"bytes,2,rep,name=items" json:"items"`
}

func (m *OrderPaginate) Reset()                    { *m = OrderPaginate{} }
func (m *OrderPaginate) String() string            { return proto.CompactTextString(m) }
func (*OrderPaginate) ProtoMessage()               {}
func (*OrderPaginate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *OrderPaginate) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *OrderPaginate) GetItems() []*Order {
	if m != nil {
		return m.Items
	}
	return nil
}

type PaymentMethodOrder struct {
	// @inject_tag: json:"-" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"-" bson:"_id"`
	// @inject_tag: json:"title" bson:"name"
	Name string `protobuf:"bytes,2,opt,name=name" json:"title" bson:"name"`
	// @inject_tag: bson:"external_id" json:"external_id"
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId" json:"external_id" bson:"external_id"`
	// @inject_tag: json:"-" bson:"params"
	Params *PaymentMethodParams `protobuf:"bytes,4,opt,name=params" json:"-" bson:"params"`
	// @inject_tag: bson:"payment_system_id" json:"payment_system_id"
	PaymentSystemId string `protobuf:"bytes,5,opt,name=payment_system_id,json=paymentSystemId" json:"payment_system_id" bson:"payment_system_id"`
	// @inject_tag: json:"type" bson:"group_alias"
	Group string `protobuf:"bytes,6,opt,name=group" json:"type" bson:"group_alias"`
	// @inject_tag: json:"saved" bson:"saved"
	Saved bool `protobuf:"varint,7,opt,name=saved" json:"saved" bson:"saved"`
	// @inject_tag: json:"card" bson:"card"
	Card *PaymentMethodCard `protobuf:"bytes,8,opt,name=card" json:"card" bson:"card"`
	// @inject_tag: json:"wallet" bson:"wallet"
	Wallet *PaymentMethodWallet `protobuf:"bytes,9,opt,name=wallet" json:"wallet" bson:"wallet"`
	// @inject_tag: json:"crypto_currency" bson:"crypto_currency"
	CryptoCurrency *PaymentMethodCrypto `protobuf:"bytes,10,opt,name=crypto_currency,json=cryptoCurrency" json:"crypto_currency" bson:"crypto_currency"`
	// @inject_tag: json:"type" bson:"group_alias"
	Handler string `protobuf:"bytes,11,opt,name=handler" json:"type" bson:"group_alias"`
	// @inject_tag: json:"refund_allowed" bson:"refund_allowed"
	RefundAllowed bool `protobuf:"varint,12,opt,name=refund_allowed,json=refundAllowed" json:"refund_allowed" bson:"refund_allowed"`
}

func (m *PaymentMethodOrder) Reset()                    { *m = PaymentMethodOrder{} }
func (m *PaymentMethodOrder) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethodOrder) ProtoMessage()               {}
func (*PaymentMethodOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *PaymentMethodOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentMethodOrder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentMethodOrder) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *PaymentMethodOrder) GetParams() *PaymentMethodParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *PaymentMethodOrder) GetPaymentSystemId() string {
	if m != nil {
		return m.PaymentSystemId
	}
	return ""
}

func (m *PaymentMethodOrder) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *PaymentMethodOrder) GetSaved() bool {
	if m != nil {
		return m.Saved
	}
	return false
}

func (m *PaymentMethodOrder) GetCard() *PaymentMethodCard {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *PaymentMethodOrder) GetWallet() *PaymentMethodWallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *PaymentMethodOrder) GetCryptoCurrency() *PaymentMethodCrypto {
	if m != nil {
		return m.CryptoCurrency
	}
	return nil
}

func (m *PaymentMethodOrder) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *PaymentMethodOrder) GetRefundAllowed() bool {
	if m != nil {
		return m.RefundAllowed
	}
	return false
}

type PaymentMethodParams struct {
	// @inject_tag: bson:"currency" json:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,1,opt,name=currency" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: bson:"terminal_id" json:"terminal_id" validate:"omitempty,alphanum"
	TerminalId string `protobuf:"bytes,2,opt,name=terminal_id,json=terminalId" json:"terminal_id" bson:"terminal_id" validate:"omitempty,alphanum"`
	// @inject_tag: bson:"secret" json:"secret" validate:"omitempty"
	Secret string `protobuf:"bytes,3,opt,name=secret" json:"secret" bson:"secret" validate:"omitempty"`
	// @inject_tag: bson:"secret_callback" json:"secret_callback" validate:"omitempty"
	SecretCallback string `protobuf:"bytes,5,opt,name=secret_callback,json=secretCallback" json:"secret_callback" bson:"secret_callback" validate:"omitempty"`
	// @inject_tag: bson:"api_url" json:"-"
	ApiUrl string `protobuf:"bytes,6,opt,name=api_url,json=apiUrl" json:"-" bson:"api_url"`
	// @inject_tag: bson:"mcc_code" json:"mcc_code" validate:"required,numeric,len=4"
	MccCode string `protobuf:"bytes,7,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4"`
	// @inject_tag: bson:"operating_company_id" json:"operating_company_id" validate:"required,hexadecimal,len=24"
	OperatingCompanyId string `protobuf:"bytes,8,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: bson:"brand" json:"brand" validate:"required"
	Brand []string `protobuf:"bytes,9,rep,name=brand" json:"brand" bson:"brand" validate:"required"`
}

func (m *PaymentMethodParams) Reset()                    { *m = PaymentMethodParams{} }
func (m *PaymentMethodParams) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethodParams) ProtoMessage()               {}
func (*PaymentMethodParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *PaymentMethodParams) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PaymentMethodParams) GetTerminalId() string {
	if m != nil {
		return m.TerminalId
	}
	return ""
}

func (m *PaymentMethodParams) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *PaymentMethodParams) GetSecretCallback() string {
	if m != nil {
		return m.SecretCallback
	}
	return ""
}

func (m *PaymentMethodParams) GetApiUrl() string {
	if m != nil {
		return m.ApiUrl
	}
	return ""
}

func (m *PaymentMethodParams) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

func (m *PaymentMethodParams) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

func (m *PaymentMethodParams) GetBrand() []string {
	if m != nil {
		return m.Brand
	}
	return nil
}

type PaymentSystem struct {
	// @inject_tag: bson:"_id" structure:"_id,bsonobjectid"
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:"_id" structure:"_id,bsonobjectid"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// @inject_tag: bson:"country" structure:"country"
	Country string `protobuf:"bytes,3,opt,name=Country" json:"Country,omitempty" bson:"country" structure:"country"`
	// @inject_tag: bson:"accounting_currency" structure:"accounting_currency"
	AccountingCurrency string `protobuf:"bytes,4,opt,name=accounting_currency,json=accountingCurrency" json:"accounting_currency,omitempty" bson:"accounting_currency" structure:"accounting_currency"`
	// @inject_tag: bson:"accounting_period" structure:"accounting_period"
	AccountingPeriod string `protobuf:"bytes,5,opt,name=accounting_period,json=accountingPeriod" json:"accounting_period,omitempty" bson:"accounting_period" structure:"accounting_period"`
	// @inject_tag: bson:"is_active" structure:"is_active"
	IsActive bool `protobuf:"varint,6,opt,name=is_active,json=isActive" json:"is_active,omitempty" bson:"is_active" structure:"is_active"`
	// @inject_tag: bson:"created_at" structure:"created_at,timestamp"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty" bson:"created_at" structure:"created_at,timestamp"`
	// @inject_tag: bson:"updated_at" structure:"updated_at,timestamp"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" bson:"updated_at" structure:"updated_at,timestamp"`
	// @inject_tag: bson:"handler" json:"handler" validate:"omitempty,alphanum"
	Handler string `protobuf:"bytes,9,opt,name=handler" json:"handler" bson:"handler" validate:"omitempty,alphanum"`
}

func (m *PaymentSystem) Reset()                    { *m = PaymentSystem{} }
func (m *PaymentSystem) String() string            { return proto.CompactTextString(m) }
func (*PaymentSystem) ProtoMessage()               {}
func (*PaymentSystem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *PaymentSystem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentSystem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentSystem) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *PaymentSystem) GetAccountingCurrency() string {
	if m != nil {
		return m.AccountingCurrency
	}
	return ""
}

func (m *PaymentSystem) GetAccountingPeriod() string {
	if m != nil {
		return m.AccountingPeriod
	}
	return ""
}

func (m *PaymentSystem) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *PaymentSystem) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PaymentSystem) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PaymentSystem) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

type PaymentMethodCard struct {
	// @inject_tag: json:"first6" bson:"first6"
	First6 string `protobuf:"bytes,1,opt,name=first6" json:"first6" bson:"first6"`
	// @inject_tag: json:"last4" bson:"last4"
	Last4 string `protobuf:"bytes,2,opt,name=last4" json:"last4" bson:"last4"`
	// @inject_tag: json:"masked" bson:"masked"
	Masked string `protobuf:"bytes,3,opt,name=masked" json:"masked" bson:"masked"`
	// @inject_tag: json:"expiry_month" bson:"expiry_month"
	ExpiryMonth string `protobuf:"bytes,4,opt,name=expiry_month,json=expiryMonth" json:"expiry_month" bson:"expiry_month"`
	// @inject_tag: json:"expiry_year" bson:"expiry_year"
	ExpiryYear string `protobuf:"bytes,5,opt,name=expiry_year,json=expiryYear" json:"expiry_year" bson:"expiry_year"`
	// @inject_tag: json:"brand" bson:"brand"
	Brand string `protobuf:"bytes,6,opt,name=brand" json:"brand" bson:"brand"`
	// @inject_tag: json:"fingerprint" bson:"fingerprint"
	Fingerprint string `protobuf:"bytes,7,opt,name=fingerprint" json:"fingerprint" bson:"fingerprint"`
	// @inject_tag: json:"secure3d" bson:"secure3d"
	Secure3D bool `protobuf:"varint,8,opt,name=secure3d" json:"secure3d" bson:"secure3d"`
}

func (m *PaymentMethodCard) Reset()                    { *m = PaymentMethodCard{} }
func (m *PaymentMethodCard) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethodCard) ProtoMessage()               {}
func (*PaymentMethodCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *PaymentMethodCard) GetFirst6() string {
	if m != nil {
		return m.First6
	}
	return ""
}

func (m *PaymentMethodCard) GetLast4() string {
	if m != nil {
		return m.Last4
	}
	return ""
}

func (m *PaymentMethodCard) GetMasked() string {
	if m != nil {
		return m.Masked
	}
	return ""
}

func (m *PaymentMethodCard) GetExpiryMonth() string {
	if m != nil {
		return m.ExpiryMonth
	}
	return ""
}

func (m *PaymentMethodCard) GetExpiryYear() string {
	if m != nil {
		return m.ExpiryYear
	}
	return ""
}

func (m *PaymentMethodCard) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *PaymentMethodCard) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *PaymentMethodCard) GetSecure3D() bool {
	if m != nil {
		return m.Secure3D
	}
	return false
}

type PaymentMethodWallet struct {
	// @inject_tag: json:"brand" bson:"brand"
	Brand string `protobuf:"bytes,1,opt,name=brand" json:"brand" bson:"brand"`
	// @inject_tag: json:"account" bson:"account"
	Account string `protobuf:"bytes,2,opt,name=account" json:"account" bson:"account"`
}

func (m *PaymentMethodWallet) Reset()                    { *m = PaymentMethodWallet{} }
func (m *PaymentMethodWallet) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethodWallet) ProtoMessage()               {}
func (*PaymentMethodWallet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *PaymentMethodWallet) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *PaymentMethodWallet) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type PaymentMethodCrypto struct {
	// @inject_tag: json:"brand" bson:"brand"
	Brand string `protobuf:"bytes,1,opt,name=brand" json:"brand" bson:"brand"`
	// @inject_tag: json:"address" bson:"address"
	Address string `protobuf:"bytes,2,opt,name=address" json:"address" bson:"address"`
}

func (m *PaymentMethodCrypto) Reset()                    { *m = PaymentMethodCrypto{} }
func (m *PaymentMethodCrypto) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethodCrypto) ProtoMessage()               {}
func (*PaymentMethodCrypto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *PaymentMethodCrypto) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *PaymentMethodCrypto) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ProjectPaymentMethod struct {
	// @inject_tag: bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:"_id"`
	// @inject_tag: bson:"terminal"
	Terminal string `protobuf:"bytes,2,opt,name=terminal" json:"terminal,omitempty" bson:"terminal"`
	// @inject_tag: bson:"password"
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty" bson:"password"`
	// @inject_tag: bson:"callback_password"
	CallbackPassword string `protobuf:"bytes,4,opt,name=callback_password,json=callbackPassword" json:"callback_password,omitempty" bson:"callback_password"`
	// @inject_tag: bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty" bson:"created_at"`
}

func (m *ProjectPaymentMethod) Reset()                    { *m = ProjectPaymentMethod{} }
func (m *ProjectPaymentMethod) String() string            { return proto.CompactTextString(m) }
func (*ProjectPaymentMethod) ProtoMessage()               {}
func (*ProjectPaymentMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ProjectPaymentMethod) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectPaymentMethod) GetTerminal() string {
	if m != nil {
		return m.Terminal
	}
	return ""
}

func (m *ProjectPaymentMethod) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ProjectPaymentMethod) GetCallbackPassword() string {
	if m != nil {
		return m.CallbackPassword
	}
	return ""
}

func (m *ProjectPaymentMethod) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type PaymentMethod struct {
	// @inject_tag: bson:"_id" json:"id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: bson:"name" json:"name" validate:"required,omitempty,alphanum"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name" bson:"name" validate:"required,omitempty,alphanum"`
	// @inject_tag: bson:"group_alias" json:"group_alias" validate:"omitempty,alphanum"
	Group string `protobuf:"bytes,3,opt,name=group" json:"group_alias" bson:"group_alias" validate:"omitempty,alphanum"`
	// @inject_tag: bson:"external_id" json:"external_id" validate:"omitempty,alphanum"
	ExternalId string `protobuf:"bytes,5,opt,name=external_id,json=externalId" json:"external_id" bson:"external_id" validate:"omitempty,alphanum"`
	// @inject_tag: bson:"min_payment_amount" json:"min_payment_amount" validate:"omitempty,numeric,gte=0"
	MinPaymentAmount float64 `protobuf:"fixed64,7,opt,name=min_payment_amount,json=minPaymentAmount" json:"min_payment_amount" bson:"min_payment_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: bson:"max_payment_amount" json:"max_payment_amount" validate:"omitempty,numeric,gte=0"
	MaxPaymentAmount float64 `protobuf:"fixed64,8,opt,name=max_payment_amount,json=maxPaymentAmount" json:"max_payment_amount" bson:"max_payment_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: bson:"type" json:"type" validate:"omitempty,alpha,gte=0"
	Type string `protobuf:"bytes,9,opt,name=type" json:"type" bson:"type" validate:"omitempty,alpha,gte=0"`
	// @inject_tag: bson:"account_regexp" json:"account_regexp" validate:"omitempty"
	AccountRegexp string `protobuf:"bytes,10,opt,name=account_regexp,json=accountRegexp" json:"account_regexp" bson:"account_regexp" validate:"omitempty"`
	// @inject_tag: bson:"is_active" json:"is_active" validate:"omitempty"
	IsActive bool `protobuf:"varint,11,opt,name=is_active,json=isActive" json:"is_active" bson:"is_active" validate:"omitempty"`
	// @inject_tag: bson:"payment_system_id" json:"payment_system_id" validate:"required,hexadecimal,len=24"
	PaymentSystemId string `protobuf:"bytes,12,opt,name=payment_system_id,json=paymentSystemId" json:"payment_system_id" bson:"payment_system_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: bson:"test_settings" json:"test_settings" validate:"omitempty"
	TestSettings map[string]*PaymentMethodParams `protobuf:"bytes,13,rep,name=test_settings,json=testSettings" json:"test_settings" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" bson:"test_settings" validate:"omitempty"`
	// @inject_tag: bson:"production_settings" json:"production_settings" validate:"omitempty"
	ProductionSettings map[string]*PaymentMethodParams `protobuf:"bytes,14,rep,name=production_settings,json=productionSettings" json:"production_settings" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" bson:"production_settings" validate:"omitempty"`
	// @inject_tag: bson:"created_at" json:"max_payment_amount" validate:"omitempty"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt" json:"max_payment_amount" bson:"created_at" validate:"omitempty"`
	// @inject_tag: bson:"updated_at" json:"max_payment_amount" validate:"omitempty"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt" json:"max_payment_amount" bson:"updated_at" validate:"omitempty"`
	// @inject_tag: json:"refund_allowed" bson:"refund_allowed"
	RefundAllowed bool `protobuf:"varint,17,opt,name=refund_allowed,json=refundAllowed" json:"refund_allowed" bson:"refund_allowed"`
}

func (m *PaymentMethod) Reset()                    { *m = PaymentMethod{} }
func (m *PaymentMethod) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethod) ProtoMessage()               {}
func (*PaymentMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *PaymentMethod) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentMethod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentMethod) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *PaymentMethod) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *PaymentMethod) GetMinPaymentAmount() float64 {
	if m != nil {
		return m.MinPaymentAmount
	}
	return 0
}

func (m *PaymentMethod) GetMaxPaymentAmount() float64 {
	if m != nil {
		return m.MaxPaymentAmount
	}
	return 0
}

func (m *PaymentMethod) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PaymentMethod) GetAccountRegexp() string {
	if m != nil {
		return m.AccountRegexp
	}
	return ""
}

func (m *PaymentMethod) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *PaymentMethod) GetPaymentSystemId() string {
	if m != nil {
		return m.PaymentSystemId
	}
	return ""
}

func (m *PaymentMethod) GetTestSettings() map[string]*PaymentMethodParams {
	if m != nil {
		return m.TestSettings
	}
	return nil
}

func (m *PaymentMethod) GetProductionSettings() map[string]*PaymentMethodParams {
	if m != nil {
		return m.ProductionSettings
	}
	return nil
}

func (m *PaymentMethod) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PaymentMethod) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PaymentMethod) GetRefundAllowed() bool {
	if m != nil {
		return m.RefundAllowed
	}
	return false
}

type Commission struct {
	// @inject_tag: bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:"_id"`
	// @inject_tag: bson:"pm_id"
	PaymentMethodId string `protobuf:"bytes,2,opt,name=payment_method_id,json=paymentMethodId" json:"payment_method_id,omitempty" bson:"pm_id"`
	// @inject_tag: bson:"project_id"
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty" bson:"project_id"`
	// @inject_tag: bson:"pm_commission"
	PaymentMethodCommission float64 `protobuf:"fixed64,4,opt,name=payment_method_commission,json=paymentMethodCommission" json:"payment_method_commission,omitempty" bson:"pm_commission"`
	// @inject_tag: bson:"psp_commission"
	PspCommission float64 `protobuf:"fixed64,5,opt,name=psp_commission,json=pspCommission" json:"psp_commission,omitempty" bson:"psp_commission"`
	// @inject_tag: bson:"total_commission_to_user"
	TotalCommissionToUser float64 `protobuf:"fixed64,6,opt,name=total_commission_to_user,json=totalCommissionToUser" json:"total_commission_to_user,omitempty" bson:"total_commission_to_user"`
	// @inject_tag: bson:"start_date"
	StartDate *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=start_date,json=startDate" json:"start_date,omitempty" bson:"start_date"`
	// @inject_tag: bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty" bson:"created_at"`
	// @inject_tag: bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" bson:"updated_at"`
}

func (m *Commission) Reset()                    { *m = Commission{} }
func (m *Commission) String() string            { return proto.CompactTextString(m) }
func (*Commission) ProtoMessage()               {}
func (*Commission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *Commission) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Commission) GetPaymentMethodId() string {
	if m != nil {
		return m.PaymentMethodId
	}
	return ""
}

func (m *Commission) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Commission) GetPaymentMethodCommission() float64 {
	if m != nil {
		return m.PaymentMethodCommission
	}
	return 0
}

func (m *Commission) GetPspCommission() float64 {
	if m != nil {
		return m.PspCommission
	}
	return 0
}

func (m *Commission) GetTotalCommissionToUser() float64 {
	if m != nil {
		return m.TotalCommissionToUser
	}
	return 0
}

func (m *Commission) GetStartDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Commission) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Commission) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type CardExpire struct {
	// @inject_tag: bson:"month"
	Month string `protobuf:"bytes,1,opt,name=month" json:"month,omitempty" bson:"month"`
	// @inject_tag: bson:"year"
	Year string `protobuf:"bytes,2,opt,name=year" json:"year,omitempty" bson:"year"`
}

func (m *CardExpire) Reset()                    { *m = CardExpire{} }
func (m *CardExpire) String() string            { return proto.CompactTextString(m) }
func (*CardExpire) ProtoMessage()               {}
func (*CardExpire) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CardExpire) GetMonth() string {
	if m != nil {
		return m.Month
	}
	return ""
}

func (m *CardExpire) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

type SavedCard struct {
	Id         string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Pan        string      `protobuf:"bytes,2,opt,name=pan" json:"pan,omitempty"`
	CardHolder string      `protobuf:"bytes,3,opt,name=card_holder,json=cardHolder" json:"card_holder,omitempty"`
	Expire     *CardExpire `protobuf:"bytes,4,opt,name=expire" json:"expire,omitempty"`
}

func (m *SavedCard) Reset()                    { *m = SavedCard{} }
func (m *SavedCard) String() string            { return proto.CompactTextString(m) }
func (*SavedCard) ProtoMessage()               {}
func (*SavedCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *SavedCard) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SavedCard) GetPan() string {
	if m != nil {
		return m.Pan
	}
	return ""
}

func (m *SavedCard) GetCardHolder() string {
	if m != nil {
		return m.CardHolder
	}
	return ""
}

func (m *SavedCard) GetExpire() *CardExpire {
	if m != nil {
		return m.Expire
	}
	return nil
}

type PaymentFormPaymentMethod struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// @inject_tag: json:"group_alias"
	Group         string `protobuf:"bytes,4,opt,name=group" json:"group_alias"`
	AccountRegexp string `protobuf:"bytes,5,opt,name=account_regexp,json=accountRegexp" json:"account_regexp,omitempty"`
	// @inject_tag: json:"has_saved_cards"
	HasSavedCards bool `protobuf:"varint,6,opt,name=has_saved_cards,json=hasSavedCards" json:"has_saved_cards"`
	// @inject_tag: json:"saved_cards,omitempty"
	SavedCards []*SavedCard `protobuf:"bytes,7,rep,name=saved_cards,json=savedCards" json:"saved_cards,omitempty"`
}

func (m *PaymentFormPaymentMethod) Reset()                    { *m = PaymentFormPaymentMethod{} }
func (m *PaymentFormPaymentMethod) String() string            { return proto.CompactTextString(m) }
func (*PaymentFormPaymentMethod) ProtoMessage()               {}
func (*PaymentFormPaymentMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *PaymentFormPaymentMethod) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentFormPaymentMethod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentFormPaymentMethod) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PaymentFormPaymentMethod) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *PaymentFormPaymentMethod) GetAccountRegexp() string {
	if m != nil {
		return m.AccountRegexp
	}
	return ""
}

func (m *PaymentFormPaymentMethod) GetHasSavedCards() bool {
	if m != nil {
		return m.HasSavedCards
	}
	return false
}

func (m *PaymentFormPaymentMethod) GetSavedCards() []*SavedCard {
	if m != nil {
		return m.SavedCards
	}
	return nil
}

type MerchantPaymentMethodPerTransactionCommission struct {
	// @inject_tag: validate:"omitempty,numeric,gte=0" json:"fee"
	Fee float64 `protobuf:"fixed64,1,opt,name=fee" json:"fee" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"currency"
	Currency string `protobuf:"bytes,2,opt,name=currency" json:"currency"`
}

func (m *MerchantPaymentMethodPerTransactionCommission) Reset() {
	*m = MerchantPaymentMethodPerTransactionCommission{}
}
func (m *MerchantPaymentMethodPerTransactionCommission) String() string {
	return proto.CompactTextString(m)
}
func (*MerchantPaymentMethodPerTransactionCommission) ProtoMessage() {}
func (*MerchantPaymentMethodPerTransactionCommission) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41}
}

func (m *MerchantPaymentMethodPerTransactionCommission) GetFee() float64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *MerchantPaymentMethodPerTransactionCommission) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type MerchantPaymentMethodCommissions struct {
	// @inject_tag: validate:"omitempty,numeric,gte=0,lte=100" json:"fee"
	Fee float64 `protobuf:"fixed64,1,opt,name=fee" json:"fee" validate:"omitempty,numeric,gte=0,lte=100"`
	// @inject_tag: validate:"required" json:"per_transaction"
	PerTransaction *MerchantPaymentMethodPerTransactionCommission `protobuf:"bytes,2,opt,name=per_transaction,json=perTransaction" json:"per_transaction" validate:"required"`
}

func (m *MerchantPaymentMethodCommissions) Reset()         { *m = MerchantPaymentMethodCommissions{} }
func (m *MerchantPaymentMethodCommissions) String() string { return proto.CompactTextString(m) }
func (*MerchantPaymentMethodCommissions) ProtoMessage()    {}
func (*MerchantPaymentMethodCommissions) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{42}
}

func (m *MerchantPaymentMethodCommissions) GetFee() float64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *MerchantPaymentMethodCommissions) GetPerTransaction() *MerchantPaymentMethodPerTransactionCommission {
	if m != nil {
		return m.PerTransaction
	}
	return nil
}

type MerchantPaymentMethodIntegration struct {
	// @inject_tag: json:"terminal_id"
	TerminalId string `protobuf:"bytes,1,opt,name=terminal_id,json=terminalId" json:"terminal_id"`
	// @inject_tag: json:"terminal_password"
	TerminalPassword string `protobuf:"bytes,2,opt,name=terminal_password,json=terminalPassword" json:"terminal_password"`
	// @inject_tag: json:"terminal_callback_password"
	TerminalCallbackPassword string `protobuf:"bytes,3,opt,name=terminal_callback_password,json=terminalCallbackPassword" json:"terminal_callback_password"`
	// @inject_tag: json:"integrated"
	Integrated bool `protobuf:"varint,4,opt,name=integrated" json:"integrated"`
}

func (m *MerchantPaymentMethodIntegration) Reset()         { *m = MerchantPaymentMethodIntegration{} }
func (m *MerchantPaymentMethodIntegration) String() string { return proto.CompactTextString(m) }
func (*MerchantPaymentMethodIntegration) ProtoMessage()    {}
func (*MerchantPaymentMethodIntegration) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43}
}

func (m *MerchantPaymentMethodIntegration) GetTerminalId() string {
	if m != nil {
		return m.TerminalId
	}
	return ""
}

func (m *MerchantPaymentMethodIntegration) GetTerminalPassword() string {
	if m != nil {
		return m.TerminalPassword
	}
	return ""
}

func (m *MerchantPaymentMethodIntegration) GetTerminalCallbackPassword() string {
	if m != nil {
		return m.TerminalCallbackPassword
	}
	return ""
}

func (m *MerchantPaymentMethodIntegration) GetIntegrated() bool {
	if m != nil {
		return m.Integrated
	}
	return false
}

type MerchantPaymentMethodIdentification struct {
	// @inject_tag: validate:"required,hexadecimal,len=24" json:"id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: validate:"required" json:"name"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name" validate:"required"`
}

func (m *MerchantPaymentMethodIdentification) Reset()         { *m = MerchantPaymentMethodIdentification{} }
func (m *MerchantPaymentMethodIdentification) String() string { return proto.CompactTextString(m) }
func (*MerchantPaymentMethodIdentification) ProtoMessage()    {}
func (*MerchantPaymentMethodIdentification) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{44}
}

func (m *MerchantPaymentMethodIdentification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MerchantPaymentMethodIdentification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MerchantPaymentMethod struct {
	PaymentMethod *MerchantPaymentMethodIdentification `protobuf:"bytes,3,opt,name=payment_method,json=paymentMethod" json:"payment_method,omitempty"`
	Commission    *MerchantPaymentMethodCommissions    `protobuf:"bytes,4,opt,name=commission" json:"commission,omitempty"`
	Integration   *MerchantPaymentMethodIntegration    `protobuf:"bytes,5,opt,name=integration" json:"integration,omitempty"`
	IsActive      bool                                 `protobuf:"varint,6,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
}

func (m *MerchantPaymentMethod) Reset()                    { *m = MerchantPaymentMethod{} }
func (m *MerchantPaymentMethod) String() string            { return proto.CompactTextString(m) }
func (*MerchantPaymentMethod) ProtoMessage()               {}
func (*MerchantPaymentMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *MerchantPaymentMethod) GetPaymentMethod() *MerchantPaymentMethodIdentification {
	if m != nil {
		return m.PaymentMethod
	}
	return nil
}

func (m *MerchantPaymentMethod) GetCommission() *MerchantPaymentMethodCommissions {
	if m != nil {
		return m.Commission
	}
	return nil
}

func (m *MerchantPaymentMethod) GetIntegration() *MerchantPaymentMethodIntegration {
	if m != nil {
		return m.Integration
	}
	return nil
}

func (m *MerchantPaymentMethod) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type RefundPayerData struct {
	Country string `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	Zip     string `protobuf:"bytes,2,opt,name=zip" json:"zip,omitempty"`
	State   string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *RefundPayerData) Reset()                    { *m = RefundPayerData{} }
func (m *RefundPayerData) String() string            { return proto.CompactTextString(m) }
func (*RefundPayerData) ProtoMessage()               {}
func (*RefundPayerData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *RefundPayerData) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *RefundPayerData) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *RefundPayerData) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type RefundOrder struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *RefundOrder) Reset()                    { *m = RefundOrder{} }
func (m *RefundOrder) String() string            { return proto.CompactTextString(m) }
func (*RefundOrder) ProtoMessage()               {}
func (*RefundOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *RefundOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RefundOrder) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Refund struct {
	Id             string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OriginalOrder  *RefundOrder               `protobuf:"bytes,2,opt,name=original_order,json=originalOrder" json:"original_order,omitempty"`
	ExternalId     string                     `protobuf:"bytes,3,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	Amount         float64                    `protobuf:"fixed64,4,opt,name=amount" json:"amount,omitempty"`
	CreatorId      string                     `protobuf:"bytes,5,opt,name=creatorId" json:"creatorId,omitempty"`
	Reason         string                     `protobuf:"bytes,6,opt,name=reason" json:"reason,omitempty"`
	Currency       string                     `protobuf:"bytes,7,opt,name=currency" json:"currency,omitempty"`
	Status         int32                      `protobuf:"varint,8,opt,name=status" json:"status,omitempty"`
	CreatedAt      *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt      *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	PayerData      *RefundPayerData           `protobuf:"bytes,11,opt,name=payer_data,json=payerData" json:"payer_data,omitempty"`
	SalesTax       float32                    `protobuf:"fixed32,12,opt,name=sales_tax,json=salesTax" json:"sales_tax,omitempty"`
	IsChargeback   bool                       `protobuf:"varint,13,opt,name=is_chargeback,json=isChargeback" json:"is_chargeback,omitempty"`
	CreatedOrderId string                     `protobuf:"bytes,14,opt,name=created_order_id,json=createdOrderId" json:"created_order_id,omitempty"`
}

func (m *Refund) Reset()                    { *m = Refund{} }
func (m *Refund) String() string            { return proto.CompactTextString(m) }
func (*Refund) ProtoMessage()               {}
func (*Refund) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *Refund) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Refund) GetOriginalOrder() *RefundOrder {
	if m != nil {
		return m.OriginalOrder
	}
	return nil
}

func (m *Refund) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *Refund) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Refund) GetCreatorId() string {
	if m != nil {
		return m.CreatorId
	}
	return ""
}

func (m *Refund) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Refund) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Refund) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Refund) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Refund) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Refund) GetPayerData() *RefundPayerData {
	if m != nil {
		return m.PayerData
	}
	return nil
}

func (m *Refund) GetSalesTax() float32 {
	if m != nil {
		return m.SalesTax
	}
	return 0
}

func (m *Refund) GetIsChargeback() bool {
	if m != nil {
		return m.IsChargeback
	}
	return false
}

func (m *Refund) GetCreatedOrderId() string {
	if m != nil {
		return m.CreatedOrderId
	}
	return ""
}

type MerchantPaymentMethodHistory struct {
	// @inject_tag: validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: validate:"required"
	PaymentMethod *MerchantPaymentMethod `protobuf:"bytes,3,opt,name=paymentMethod" json:"paymentMethod,omitempty" validate:"required"`
	// @inject_tag: json:"created_at" validate:"required"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at" validate:"required"`
	// @inject_tag: validate:"required,hexadecimal,len=24"
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty" validate:"required,hexadecimal,len=24"`
}

func (m *MerchantPaymentMethodHistory) Reset()                    { *m = MerchantPaymentMethodHistory{} }
func (m *MerchantPaymentMethodHistory) String() string            { return proto.CompactTextString(m) }
func (*MerchantPaymentMethodHistory) ProtoMessage()               {}
func (*MerchantPaymentMethodHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *MerchantPaymentMethodHistory) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MerchantPaymentMethodHistory) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *MerchantPaymentMethodHistory) GetPaymentMethod() *MerchantPaymentMethod {
	if m != nil {
		return m.PaymentMethod
	}
	return nil
}

func (m *MerchantPaymentMethodHistory) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *MerchantPaymentMethodHistory) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type CustomerIdentity struct {
	MerchantId string                     `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	ProjectId  string                     `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Type       string                     `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Value      string                     `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	Verified   bool                       `protobuf:"varint,5,opt,name=verified" json:"verified,omitempty"`
	CreatedAt  *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *CustomerIdentity) Reset()                    { *m = CustomerIdentity{} }
func (m *CustomerIdentity) String() string            { return proto.CompactTextString(m) }
func (*CustomerIdentity) ProtoMessage()               {}
func (*CustomerIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *CustomerIdentity) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *CustomerIdentity) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CustomerIdentity) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CustomerIdentity) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CustomerIdentity) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *CustomerIdentity) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type CustomerIpHistory struct {
	Ip        []byte                     `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *CustomerIpHistory) Reset()                    { *m = CustomerIpHistory{} }
func (m *CustomerIpHistory) String() string            { return proto.CompactTextString(m) }
func (*CustomerIpHistory) ProtoMessage()               {}
func (*CustomerIpHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *CustomerIpHistory) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *CustomerIpHistory) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type CustomerAddressHistory struct {
	Country    string                     `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	City       string                     `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	PostalCode string                     `protobuf:"bytes,3,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	State      string                     `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	CreatedAt  *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *CustomerAddressHistory) Reset()                    { *m = CustomerAddressHistory{} }
func (m *CustomerAddressHistory) String() string            { return proto.CompactTextString(m) }
func (*CustomerAddressHistory) ProtoMessage()               {}
func (*CustomerAddressHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *CustomerAddressHistory) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *CustomerAddressHistory) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CustomerAddressHistory) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *CustomerAddressHistory) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CustomerAddressHistory) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type CustomerStringValueHistory struct {
	Value     string                     `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *CustomerStringValueHistory) Reset()                    { *m = CustomerStringValueHistory{} }
func (m *CustomerStringValueHistory) String() string            { return proto.CompactTextString(m) }
func (*CustomerStringValueHistory) ProtoMessage()               {}
func (*CustomerStringValueHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *CustomerStringValueHistory) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CustomerStringValueHistory) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Customer struct {
	Id             string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TechEmail      string `protobuf:"bytes,2,opt,name=tech_email,json=techEmail" json:"tech_email,omitempty"`
	ExternalId     string `protobuf:"bytes,3,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	Email          string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	EmailVerified  bool   `protobuf:"varint,5,opt,name=email_verified,json=emailVerified" json:"email_verified,omitempty"`
	Phone          string `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
	PhoneVerified  bool   `protobuf:"varint,7,opt,name=phone_verified,json=phoneVerified" json:"phone_verified,omitempty"`
	Name           string `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	Ip             []byte `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`
	Locale         string `protobuf:"bytes,10,opt,name=locale" json:"locale,omitempty"`
	AcceptLanguage string `protobuf:"bytes,11,opt,name=accept_language,json=acceptLanguage" json:"accept_language,omitempty"`
	// @inject_tag: json:"-"
	UserAgent string               `protobuf:"bytes,12,opt,name=user_agent,json=userAgent" json:"-"`
	Address   *OrderBillingAddress `protobuf:"bytes,13,opt,name=address" json:"address,omitempty"`
	Identity  []*CustomerIdentity  `protobuf:"bytes,14,rep,name=identity" json:"identity,omitempty"`
	// @inject_tag: json:"-"
	IpHistory []*CustomerIpHistory `protobuf:"bytes,15,rep,name=ip_history,json=ipHistory" json:"-"`
	// @inject_tag: json:"-"
	AddressHistory []*CustomerAddressHistory `protobuf:"bytes,16,rep,name=address_history,json=addressHistory" json:"-"`
	// @inject_tag: json:"-"
	LocaleHistory []*CustomerStringValueHistory `protobuf:"bytes,17,rep,name=locale_history,json=localeHistory" json:"-"`
	// @inject_tag: json:"-"
	AcceptLanguageHistory []*CustomerStringValueHistory `protobuf:"bytes,18,rep,name=accept_language_history,json=acceptLanguageHistory" json:"-"`
	// @inject_tag: json:"metadata"
	Metadata map[string]string `protobuf:"bytes,19,rep,name=metadata" json:"metadata" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"-"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt" json:"-"`
	// @inject_tag: json:"-"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt" json:"-"`
	// @inject_tag: json:"notify_sale" bson:"notify_sale"
	NotifySale bool `protobuf:"varint,22,opt,name=notify_sale,json=notifySale" json:"notify_sale" bson:"notify_sale"`
	// @inject_tag: json:"notify_sale_email" bson:"notify_sale_email"
	NotifySaleEmail string `protobuf:"bytes,23,opt,name=notify_sale_email,json=notifySaleEmail" json:"notify_sale_email" bson:"notify_sale_email"`
	// @inject_tag: json:"notify_new_region" bson:"notify_new_region"
	NotifyNewRegion bool `protobuf:"varint,24,opt,name=notify_new_region,json=notifyNewRegion" json:"notify_new_region" bson:"notify_new_region"`
	// @inject_tag: json:"notify_new_region_email" bson:"notify_new_region_email"
	NotifyNewRegionEmail string `protobuf:"bytes,25,opt,name=notify_new_region_email,json=notifyNewRegionEmail" json:"notify_new_region_email" bson:"notify_new_region_email"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *Customer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Customer) GetTechEmail() string {
	if m != nil {
		return m.TechEmail
	}
	return ""
}

func (m *Customer) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *Customer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Customer) GetEmailVerified() bool {
	if m != nil {
		return m.EmailVerified
	}
	return false
}

func (m *Customer) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Customer) GetPhoneVerified() bool {
	if m != nil {
		return m.PhoneVerified
	}
	return false
}

func (m *Customer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Customer) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Customer) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *Customer) GetAcceptLanguage() string {
	if m != nil {
		return m.AcceptLanguage
	}
	return ""
}

func (m *Customer) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Customer) GetAddress() *OrderBillingAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Customer) GetIdentity() []*CustomerIdentity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *Customer) GetIpHistory() []*CustomerIpHistory {
	if m != nil {
		return m.IpHistory
	}
	return nil
}

func (m *Customer) GetAddressHistory() []*CustomerAddressHistory {
	if m != nil {
		return m.AddressHistory
	}
	return nil
}

func (m *Customer) GetLocaleHistory() []*CustomerStringValueHistory {
	if m != nil {
		return m.LocaleHistory
	}
	return nil
}

func (m *Customer) GetAcceptLanguageHistory() []*CustomerStringValueHistory {
	if m != nil {
		return m.AcceptLanguageHistory
	}
	return nil
}

func (m *Customer) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Customer) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Customer) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Customer) GetNotifySale() bool {
	if m != nil {
		return m.NotifySale
	}
	return false
}

func (m *Customer) GetNotifySaleEmail() string {
	if m != nil {
		return m.NotifySaleEmail
	}
	return ""
}

func (m *Customer) GetNotifyNewRegion() bool {
	if m != nil {
		return m.NotifyNewRegion
	}
	return false
}

func (m *Customer) GetNotifyNewRegionEmail() string {
	if m != nil {
		return m.NotifyNewRegionEmail
	}
	return ""
}

type TokenUserEmailValue struct {
	// @inject_tag: validate:"omitempty,email"
	Value    string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty" validate:"omitempty,email"`
	Verified bool   `protobuf:"varint,2,opt,name=verified" json:"verified,omitempty"`
}

func (m *TokenUserEmailValue) Reset()                    { *m = TokenUserEmailValue{} }
func (m *TokenUserEmailValue) String() string            { return proto.CompactTextString(m) }
func (*TokenUserEmailValue) ProtoMessage()               {}
func (*TokenUserEmailValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *TokenUserEmailValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TokenUserEmailValue) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

type TokenUserPhoneValue struct {
	// @inject_tag: validate:"omitempty,phone"
	Value    string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty" validate:"omitempty,phone"`
	Verified bool   `protobuf:"varint,2,opt,name=verified" json:"verified,omitempty"`
}

func (m *TokenUserPhoneValue) Reset()                    { *m = TokenUserPhoneValue{} }
func (m *TokenUserPhoneValue) String() string            { return proto.CompactTextString(m) }
func (*TokenUserPhoneValue) ProtoMessage()               {}
func (*TokenUserPhoneValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *TokenUserPhoneValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TokenUserPhoneValue) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

type TokenUserIpValue struct {
	// @inject_tag: validate:"omitempty,ip"
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty" validate:"omitempty,ip"`
}

func (m *TokenUserIpValue) Reset()                    { *m = TokenUserIpValue{} }
func (m *TokenUserIpValue) String() string            { return proto.CompactTextString(m) }
func (*TokenUserIpValue) ProtoMessage()               {}
func (*TokenUserIpValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *TokenUserIpValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TokenUserLocaleValue struct {
	// @inject_tag: validate:"omitempty,locale,min=5"
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty" validate:"omitempty,locale,min=5"`
}

func (m *TokenUserLocaleValue) Reset()                    { *m = TokenUserLocaleValue{} }
func (m *TokenUserLocaleValue) String() string            { return proto.CompactTextString(m) }
func (*TokenUserLocaleValue) ProtoMessage()               {}
func (*TokenUserLocaleValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *TokenUserLocaleValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TokenUserValue struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *TokenUserValue) Reset()                    { *m = TokenUserValue{} }
func (m *TokenUserValue) String() string            { return proto.CompactTextString(m) }
func (*TokenUserValue) ProtoMessage()               {}
func (*TokenUserValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *TokenUserValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TokenUser struct {
	// @inject_tag: validate:"required"
	Id       string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" validate:"required"`
	Email    *TokenUserEmailValue  `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Phone    *TokenUserPhoneValue  `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Name     *TokenUserValue       `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Ip       *TokenUserIpValue     `protobuf:"bytes,7,opt,name=ip" json:"ip,omitempty"`
	Locale   *TokenUserLocaleValue `protobuf:"bytes,8,opt,name=locale" json:"locale,omitempty"`
	Address  *OrderBillingAddress  `protobuf:"bytes,9,opt,name=address" json:"address,omitempty"`
	Metadata map[string]string     `protobuf:"bytes,10,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"-"
	UserAgent string `protobuf:"bytes,11,opt,name=user_agent,json=userAgent" json:"-"`
	// @inject_tag: json:"-"
	AcceptLanguage string `protobuf:"bytes,12,opt,name=accept_language,json=acceptLanguage" json:"-"`
}

func (m *TokenUser) Reset()                    { *m = TokenUser{} }
func (m *TokenUser) String() string            { return proto.CompactTextString(m) }
func (*TokenUser) ProtoMessage()               {}
func (*TokenUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *TokenUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TokenUser) GetEmail() *TokenUserEmailValue {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *TokenUser) GetPhone() *TokenUserPhoneValue {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *TokenUser) GetName() *TokenUserValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TokenUser) GetIp() *TokenUserIpValue {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *TokenUser) GetLocale() *TokenUserLocaleValue {
	if m != nil {
		return m.Locale
	}
	return nil
}

func (m *TokenUser) GetAddress() *OrderBillingAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *TokenUser) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TokenUser) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *TokenUser) GetAcceptLanguage() string {
	if m != nil {
		return m.AcceptLanguage
	}
	return ""
}

type TokenSettingsReturnUrl struct {
	// @inject_tag: validate:"omitempty,url"
	Success string `protobuf:"bytes,1,opt,name=success" json:"success,omitempty" validate:"omitempty,url"`
	// @inject_tag: validate:"omitempty,url"
	Fail string `protobuf:"bytes,2,opt,name=fail" json:"fail,omitempty" validate:"omitempty,url"`
}

func (m *TokenSettingsReturnUrl) Reset()                    { *m = TokenSettingsReturnUrl{} }
func (m *TokenSettingsReturnUrl) String() string            { return proto.CompactTextString(m) }
func (*TokenSettingsReturnUrl) ProtoMessage()               {}
func (*TokenSettingsReturnUrl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *TokenSettingsReturnUrl) GetSuccess() string {
	if m != nil {
		return m.Success
	}
	return ""
}

func (m *TokenSettingsReturnUrl) GetFail() string {
	if m != nil {
		return m.Fail
	}
	return ""
}

type TokenSettingsItem struct {
	// @inject_tag: validate:"required"
	Sku string `protobuf:"bytes,1,opt,name=sku" json:"sku,omitempty" validate:"required"`
	// @inject_tag: validate:"required,numeric,gt=0"
	Amount float64 `protobuf:"fixed64,5,opt,name=amount" json:"amount,omitempty" validate:"required,numeric,gt=0"`
	// @inject_tag: validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,4,opt,name=currency" json:"currency,omitempty" validate:"required,alpha,len=3"`
}

func (m *TokenSettingsItem) Reset()                    { *m = TokenSettingsItem{} }
func (m *TokenSettingsItem) String() string            { return proto.CompactTextString(m) }
func (*TokenSettingsItem) ProtoMessage()               {}
func (*TokenSettingsItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *TokenSettingsItem) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *TokenSettingsItem) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TokenSettingsItem) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type TokenSettings struct {
	// @inject_tag: json:"project_id" validate:"required,hexadecimal,len=24"
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"return_url"
	ReturnUrl *TokenSettingsReturnUrl `protobuf:"bytes,3,opt,name=return_url,json=returnUrl" json:"return_url"`
	// @inject_tag: json:"currency" validate:"omitempty,alpha,len=3"
	Currency string `protobuf:"bytes,4,opt,name=currency" json:"currency" validate:"omitempty,alpha,len=3"`
	// @inject_tag: json:"amount" validate:"omitempty,numeric,gt=0"
	Amount float64 `protobuf:"fixed64,5,opt,name=amount" json:"amount" validate:"omitempty,numeric,gt=0"`
	// @inject_tag: json:"payment_method"
	PaymentMethod string `protobuf:"bytes,6,opt,name=payment_method,json=paymentMethod" json:"payment_method"`
	// @inject_tag: json:"description"
	Description string `protobuf:"bytes,8,opt,name=description" json:"description"`
	// @inject_tag: json:"products_ids"
	ProductsIds []string `protobuf:"bytes,9,rep,name=products_ids,json=productsIds" json:"products_ids"`
	// @inject_tag: json:"metadata"
	Metadata map[string]string `protobuf:"bytes,10,rep,name=metadata" json:"metadata" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// @inject_tag: json:"platform_id"
	PlatformId string `protobuf:"bytes,11,opt,name=platform_id,json=platformId" json:"platform_id"`
	// @inject_tag: json:"type" validate:"required,oneof=simple key product virtual_currency"
	Type string `protobuf:"bytes,12,opt,name=type" json:"type" validate:"required,oneof=simple key product virtual_currency"`
	// @inject_tag: json:"is_buy_for_virtual_currency"
	IsBuyForVirtualCurrency bool `protobuf:"varint,13,opt,name=is_buy_for_virtual_currency,json=isBuyForVirtualCurrency" json:"is_buy_for_virtual_currency"`
}

func (m *TokenSettings) Reset()                    { *m = TokenSettings{} }
func (m *TokenSettings) String() string            { return proto.CompactTextString(m) }
func (*TokenSettings) ProtoMessage()               {}
func (*TokenSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *TokenSettings) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *TokenSettings) GetReturnUrl() *TokenSettingsReturnUrl {
	if m != nil {
		return m.ReturnUrl
	}
	return nil
}

func (m *TokenSettings) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *TokenSettings) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TokenSettings) GetPaymentMethod() string {
	if m != nil {
		return m.PaymentMethod
	}
	return ""
}

func (m *TokenSettings) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TokenSettings) GetProductsIds() []string {
	if m != nil {
		return m.ProductsIds
	}
	return nil
}

func (m *TokenSettings) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TokenSettings) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *TokenSettings) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TokenSettings) GetIsBuyForVirtualCurrency() bool {
	if m != nil {
		return m.IsBuyForVirtualCurrency
	}
	return false
}

type OrderIssuer struct {
	// @inject_tag: bson:"url" json:"url"
	Url string `protobuf:"bytes,1,opt,name=url" json:"url" bson:"url"`
	// @inject_tag: bson:"embedded" json:"embedded"
	Embedded bool `protobuf:"varint,2,opt,name=embedded" json:"embedded" bson:"embedded"`
	// @inject_tag: bson:"reference" json:"reference"
	Reference string `protobuf:"bytes,3,opt,name=reference" json:"reference" bson:"reference"`
	// @inject_tag: bson:"reference_type" json:"reference_type"
	ReferenceType string `protobuf:"bytes,4,opt,name=reference_type,json=referenceType" json:"reference_type" bson:"reference_type"`
	// @inject_tag: bson:"utm_source" json:"utm_source"
	UtmSource string `protobuf:"bytes,5,opt,name=utm_source,json=utmSource" json:"utm_source" bson:"utm_source"`
	// @inject_tag: bson:"utm_medium" json:"utm_medium"
	UtmMedium string `protobuf:"bytes,6,opt,name=utm_medium,json=utmMedium" json:"utm_medium" bson:"utm_medium"`
	// @inject_tag: bson:"utm_campaign" json:"utm_campaign"
	UtmCampaign string `protobuf:"bytes,7,opt,name=utm_campaign,json=utmCampaign" json:"utm_campaign" bson:"utm_campaign"`
	// @inject_tag: bson:"referrer_host" json:"referrer_host"
	ReferrerHost string `protobuf:"bytes,8,opt,name=referrer_host,json=referrerHost" json:"referrer_host" bson:"referrer_host"`
}

func (m *OrderIssuer) Reset()                    { *m = OrderIssuer{} }
func (m *OrderIssuer) String() string            { return proto.CompactTextString(m) }
func (*OrderIssuer) ProtoMessage()               {}
func (*OrderIssuer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *OrderIssuer) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *OrderIssuer) GetEmbedded() bool {
	if m != nil {
		return m.Embedded
	}
	return false
}

func (m *OrderIssuer) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *OrderIssuer) GetReferenceType() string {
	if m != nil {
		return m.ReferenceType
	}
	return ""
}

func (m *OrderIssuer) GetUtmSource() string {
	if m != nil {
		return m.UtmSource
	}
	return ""
}

func (m *OrderIssuer) GetUtmMedium() string {
	if m != nil {
		return m.UtmMedium
	}
	return ""
}

func (m *OrderIssuer) GetUtmCampaign() string {
	if m != nil {
		return m.UtmCampaign
	}
	return ""
}

func (m *OrderIssuer) GetReferrerHost() string {
	if m != nil {
		return m.ReferrerHost
	}
	return ""
}

type OrderNotificationRefund struct {
	// @inject_tag: validate:"required,numeric,gt=0" json:"amount"
	Amount float64 `protobuf:"fixed64,1,opt,name=amount" json:"amount" validate:"required,numeric,gt=0"`
	// @inject_tag: validate:"required,alpha,len=3" json:"currency"
	Currency string `protobuf:"bytes,2,opt,name=currency" json:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"reason"
	Reason string `protobuf:"bytes,3,opt,name=reason" json:"reason"`
	// @inject_tag: json:"code"
	Code string `protobuf:"bytes,4,opt,name=code" json:"code"`
	// @inject_tag: json:"receipt_number"
	ReceiptNumber string `protobuf:"bytes,5,opt,name=receipt_number,json=receiptNumber" json:"receipt_number"`
	// @inject_tag: json:"receipt_url"
	ReceiptUrl string `protobuf:"bytes,6,opt,name=receipt_url,json=receiptUrl" json:"receipt_url"`
}

func (m *OrderNotificationRefund) Reset()                    { *m = OrderNotificationRefund{} }
func (m *OrderNotificationRefund) String() string            { return proto.CompactTextString(m) }
func (*OrderNotificationRefund) ProtoMessage()               {}
func (*OrderNotificationRefund) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *OrderNotificationRefund) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderNotificationRefund) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *OrderNotificationRefund) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *OrderNotificationRefund) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *OrderNotificationRefund) GetReceiptNumber() string {
	if m != nil {
		return m.ReceiptNumber
	}
	return ""
}

func (m *OrderNotificationRefund) GetReceiptUrl() string {
	if m != nil {
		return m.ReceiptUrl
	}
	return ""
}

type GetCountryRequest struct {
	// @inject_tag: validate:"required,alpha,len=2"
	IsoCode string `protobuf:"bytes,1,opt,name=iso_code,json=isoCode" json:"iso_code,omitempty" validate:"required,alpha,len=2"`
}

func (m *GetCountryRequest) Reset()                    { *m = GetCountryRequest{} }
func (m *GetCountryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCountryRequest) ProtoMessage()               {}
func (*GetCountryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *GetCountryRequest) GetIsoCode() string {
	if m != nil {
		return m.IsoCode
	}
	return ""
}

type CountryVatThreshold struct {
	// @inject_tag: json:"year" bson:"year" validate:"numeric,gte=0"
	Year float64 `protobuf:"fixed64,1,opt,name=year" json:"year" bson:"year" validate:"numeric,gte=0"`
	// @inject_tag: json:"world" bson:"world" validate:"numeric,gte=0"
	World float64 `protobuf:"fixed64,2,opt,name=world" json:"world" bson:"world" validate:"numeric,gte=0"`
}

func (m *CountryVatThreshold) Reset()                    { *m = CountryVatThreshold{} }
func (m *CountryVatThreshold) String() string            { return proto.CompactTextString(m) }
func (*CountryVatThreshold) ProtoMessage()               {}
func (*CountryVatThreshold) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *CountryVatThreshold) GetYear() float64 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *CountryVatThreshold) GetWorld() float64 {
	if m != nil {
		return m.World
	}
	return 0
}

type Country struct {
	// @inject_tag: json:"-" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"-" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"iso_code_a2" bson:"iso_code_a2" validate:"required,alpha,len=2"
	IsoCodeA2 string `protobuf:"bytes,2,opt,name=iso_code_a2,json=isoCodeA2" json:"iso_code_a2" bson:"iso_code_a2" validate:"required,alpha,len=2"`
	// @inject_tag: json:"region" bson:"region" validate:"required"
	Region string `protobuf:"bytes,3,opt,name=region" json:"region" bson:"region" validate:"required"`
	// @inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,4,opt,name=currency" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"payments_allowed" bson:"payments_allowed"
	PaymentsAllowed bool `protobuf:"varint,5,opt,name=payments_allowed,json=paymentsAllowed" json:"payments_allowed" bson:"payments_allowed"`
	// @inject_tag: json:"change_allowed" bson:"change_allowed"
	ChangeAllowed bool `protobuf:"varint,6,opt,name=change_allowed,json=changeAllowed" json:"change_allowed" bson:"change_allowed"`
	// @inject_tag: json:"vat_enabled" bson:"vat_enabled"
	VatEnabled bool `protobuf:"varint,7,opt,name=vat_enabled,json=vatEnabled" json:"vat_enabled" bson:"vat_enabled"`
	// @inject_tag: json:"vat_currency" bson:"vat_currency" validate:"omitempty,alpha,len=3"
	VatCurrency string `protobuf:"bytes,8,opt,name=vat_currency,json=vatCurrency" json:"vat_currency" bson:"vat_currency" validate:"omitempty,alpha,len=3"`
	// @inject_tag: json:"price_group_id" bson:"price_group_id" validate:"required,hexadecimal,len=24"
	PriceGroupId string `protobuf:"bytes,9,opt,name=price_group_id,json=priceGroupId" json:"price_group_id" bson:"price_group_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"vat_threshold" bson:"vat_threshold" validate:"required,dive"
	VatThreshold *CountryVatThreshold `protobuf:"bytes,10,opt,name=vat_threshold,json=vatThreshold" json:"vat_threshold" bson:"vat_threshold" validate:"required,dive"`
	// @inject_tag: json:"vat_period_month" bson:"vat_period_month" validate:"numeric,gte=0,lte=12"
	VatPeriodMonth int32 `protobuf:"varint,11,opt,name=vat_period_month,json=vatPeriodMonth" json:"vat_period_month" bson:"vat_period_month" validate:"numeric,gte=0,lte=12"`
	// @inject_tag: json:"vat_deadline_days" bson:"vat_deadline_days" validate:"numeric,gte=0"
	VatDeadlineDays int32 `protobuf:"varint,12,opt,name=vat_deadline_days,json=vatDeadlineDays" json:"vat_deadline_days" bson:"vat_deadline_days" validate:"numeric,gte=0"`
	// @inject_tag: json:"vat_store_years" bson:"vat_store_years" validate:"numeric,gte=0"
	VatStoreYears int32 `protobuf:"varint,13,opt,name=vat_store_years,json=vatStoreYears" json:"vat_store_years" bson:"vat_store_years" validate:"numeric,gte=0"`
	// @inject_tag: json:"vat_currency_rates_policy" bson:"vat_currency_rates_policy" validate:"omitempty,oneof=on-day last-day mid-month"
	VatCurrencyRatesPolicy string `protobuf:"bytes,14,opt,name=vat_currency_rates_policy,json=vatCurrencyRatesPolicy" json:"vat_currency_rates_policy" bson:"vat_currency_rates_policy" validate:"omitempty,oneof=on-day last-day mid-month"`
	// @inject_tag: json:"vat_currency_rates_source" bson:"vat_currency_rates_source" validate:"alpha"
	VatCurrencyRatesSource string `protobuf:"bytes,15,opt,name=vat_currency_rates_source,json=vatCurrencyRatesSource" json:"vat_currency_rates_source" bson:"vat_currency_rates_source" validate:"alpha"`
	// @inject_tag: json:"-" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt" json:"-" bson:"created_at"`
	// @inject_tag: json:"-" bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt" json:"-" bson:"updated_at"`
	// @inject_tag: json:"payer_tariff_region" bson:"payer_tariff_region"
	PayerTariffRegion string `protobuf:"bytes,18,opt,name=payer_tariff_region,json=payerTariffRegion" json:"payer_tariff_region" bson:"payer_tariff_region"`
	// @inject_tag: json:"high_risk_payments_allowed" bson:"high_risk_payments_allowed"
	HighRiskPaymentsAllowed bool `protobuf:"varint,19,opt,name=high_risk_payments_allowed,json=highRiskPaymentsAllowed" json:"high_risk_payments_allowed" bson:"high_risk_payments_allowed"`
	// @inject_tag: json:"high_risk_change_allowed" bson:"high_risk_change_allowed"
	HighRiskChangeAllowed bool `protobuf:"varint,20,opt,name=high_risk_change_allowed,json=highRiskChangeAllowed" json:"high_risk_change_allowed" bson:"high_risk_change_allowed"`
}

func (m *Country) Reset()                    { *m = Country{} }
func (m *Country) String() string            { return proto.CompactTextString(m) }
func (*Country) ProtoMessage()               {}
func (*Country) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *Country) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Country) GetIsoCodeA2() string {
	if m != nil {
		return m.IsoCodeA2
	}
	return ""
}

func (m *Country) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Country) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Country) GetPaymentsAllowed() bool {
	if m != nil {
		return m.PaymentsAllowed
	}
	return false
}

func (m *Country) GetChangeAllowed() bool {
	if m != nil {
		return m.ChangeAllowed
	}
	return false
}

func (m *Country) GetVatEnabled() bool {
	if m != nil {
		return m.VatEnabled
	}
	return false
}

func (m *Country) GetVatCurrency() string {
	if m != nil {
		return m.VatCurrency
	}
	return ""
}

func (m *Country) GetPriceGroupId() string {
	if m != nil {
		return m.PriceGroupId
	}
	return ""
}

func (m *Country) GetVatThreshold() *CountryVatThreshold {
	if m != nil {
		return m.VatThreshold
	}
	return nil
}

func (m *Country) GetVatPeriodMonth() int32 {
	if m != nil {
		return m.VatPeriodMonth
	}
	return 0
}

func (m *Country) GetVatDeadlineDays() int32 {
	if m != nil {
		return m.VatDeadlineDays
	}
	return 0
}

func (m *Country) GetVatStoreYears() int32 {
	if m != nil {
		return m.VatStoreYears
	}
	return 0
}

func (m *Country) GetVatCurrencyRatesPolicy() string {
	if m != nil {
		return m.VatCurrencyRatesPolicy
	}
	return ""
}

func (m *Country) GetVatCurrencyRatesSource() string {
	if m != nil {
		return m.VatCurrencyRatesSource
	}
	return ""
}

func (m *Country) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Country) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Country) GetPayerTariffRegion() string {
	if m != nil {
		return m.PayerTariffRegion
	}
	return ""
}

func (m *Country) GetHighRiskPaymentsAllowed() bool {
	if m != nil {
		return m.HighRiskPaymentsAllowed
	}
	return false
}

func (m *Country) GetHighRiskChangeAllowed() bool {
	if m != nil {
		return m.HighRiskChangeAllowed
	}
	return false
}

type CountriesList struct {
	Countries []*Country `protobuf:"bytes,1,rep,name=countries" json:"countries,omitempty"`
}

func (m *CountriesList) Reset()                    { *m = CountriesList{} }
func (m *CountriesList) String() string            { return proto.CompactTextString(m) }
func (*CountriesList) ProtoMessage()               {}
func (*CountriesList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *CountriesList) GetCountries() []*Country {
	if m != nil {
		return m.Countries
	}
	return nil
}

type GetPriceGroupRequest struct {
	// @inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
}

func (m *GetPriceGroupRequest) Reset()                    { *m = GetPriceGroupRequest{} }
func (m *GetPriceGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPriceGroupRequest) ProtoMessage()               {}
func (*GetPriceGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *GetPriceGroupRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PriceGroup struct {
	// @inject_tag: json:"id" bson:"_id" validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,2,opt,name=currency" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"region" bson:"region" validate:"omitempty,alpha"
	Region string `protobuf:"bytes,3,opt,name=region" json:"region" bson:"region" validate:"omitempty,alpha"`
	// @inject_tag: validate:"required,numeric,gte=0" bson:"inflation_rate" json:"-"
	InflationRate float64 `protobuf:"fixed64,4,opt,name=inflation_rate,json=inflationRate" json:"-" validate:"required,numeric,gte=0" bson:"inflation_rate"`
	// @inject_tag: validate:"required,numeric" bson:"fraction" json:"-"
	Fraction float64 `protobuf:"fixed64,5,opt,name=fraction" json:"-" validate:"required,numeric" bson:"fraction"`
	// @inject_tag: json:"-" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"-" bson:"created_at"`
	// @inject_tag: json:"-" bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt" json:"-" bson:"updated_at"`
	// @inject_tag: json:"is_active" bson:"is_active"
	IsActive bool `protobuf:"varint,8,opt,name=is_active,json=isActive" json:"is_active" bson:"is_active"`
}

func (m *PriceGroup) Reset()                    { *m = PriceGroup{} }
func (m *PriceGroup) String() string            { return proto.CompactTextString(m) }
func (*PriceGroup) ProtoMessage()               {}
func (*PriceGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *PriceGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PriceGroup) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PriceGroup) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PriceGroup) GetInflationRate() float64 {
	if m != nil {
		return m.InflationRate
	}
	return 0
}

func (m *PriceGroup) GetFraction() float64 {
	if m != nil {
		return m.Fraction
	}
	return 0
}

func (m *PriceGroup) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PriceGroup) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PriceGroup) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type ZipCodeState struct {
	// @inject_tag: bson:"code"
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty" bson:"code"`
	// @inject_tag: bson:"name"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" bson:"name"`
}

func (m *ZipCodeState) Reset()                    { *m = ZipCodeState{} }
func (m *ZipCodeState) String() string            { return proto.CompactTextString(m) }
func (*ZipCodeState) ProtoMessage()               {}
func (*ZipCodeState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *ZipCodeState) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ZipCodeState) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ZipCode struct {
	Zip       string                     `protobuf:"bytes,1,opt,name=zip" json:"zip,omitempty"`
	Country   string                     `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
	City      string                     `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	State     *ZipCodeState              `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *ZipCode) Reset()                    { *m = ZipCode{} }
func (m *ZipCode) String() string            { return proto.CompactTextString(m) }
func (*ZipCode) ProtoMessage()               {}
func (*ZipCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *ZipCode) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *ZipCode) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ZipCode) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *ZipCode) GetState() *ZipCodeState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ZipCode) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type PaymentChannelCostSystem struct {
	// @inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"name" bson:"name" validate:"required,alpha"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name" bson:"name" validate:"required,alpha"`
	// @inject_tag: json:"region" bson:"region" validate:"required"
	Region string `protobuf:"bytes,3,opt,name=region" json:"region" bson:"region" validate:"required"`
	// @inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	Country string `protobuf:"bytes,4,opt,name=country" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"percent" bson:"percent" validate:"required,numeric,gte=0,lte=1"
	Percent float64 `protobuf:"fixed64,5,opt,name=percent" json:"percent" bson:"percent" validate:"required,numeric,gte=0,lte=1"`
	// @inject_tag: json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"
	FixAmount float64 `protobuf:"fixed64,6,opt,name=fix_amount,json=fixAmount" json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"
	FixAmountCurrency string `protobuf:"bytes,7,opt,name=fix_amount_currency,json=fixAmountCurrency" json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"created_at" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at" bson:"created_at"`
	// @inject_tag: json:"updated_at" bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at" bson:"updated_at"`
	// @inject_tag: json:"is_active" bson:"is_active"
	IsActive bool `protobuf:"varint,10,opt,name=is_active,json=isActive" json:"is_active" bson:"is_active"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	MccCode string `protobuf:"bytes,11,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,12,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id"`
}

func (m *PaymentChannelCostSystem) Reset()                    { *m = PaymentChannelCostSystem{} }
func (m *PaymentChannelCostSystem) String() string            { return proto.CompactTextString(m) }
func (*PaymentChannelCostSystem) ProtoMessage()               {}
func (*PaymentChannelCostSystem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *PaymentChannelCostSystem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentChannelCostSystem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentChannelCostSystem) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PaymentChannelCostSystem) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *PaymentChannelCostSystem) GetPercent() float64 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *PaymentChannelCostSystem) GetFixAmount() float64 {
	if m != nil {
		return m.FixAmount
	}
	return 0
}

func (m *PaymentChannelCostSystem) GetFixAmountCurrency() string {
	if m != nil {
		return m.FixAmountCurrency
	}
	return ""
}

func (m *PaymentChannelCostSystem) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PaymentChannelCostSystem) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PaymentChannelCostSystem) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *PaymentChannelCostSystem) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

func (m *PaymentChannelCostSystem) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

type PaymentChannelCostSystemRequest struct {
	// @inject_tag: json:"name" bson:"name" validate:"required,alpha"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name" bson:"name" validate:"required,alpha"`
	// @inject_tag: json:"region" bson:"region" validate:"required"
	Region string `protobuf:"bytes,2,opt,name=region" json:"region" bson:"region" validate:"required"`
	// @inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	Country string `protobuf:"bytes,3,opt,name=country" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
	MccCode string `protobuf:"bytes,4,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24" query:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,5,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24" query:"operating_company_id"`
}

func (m *PaymentChannelCostSystemRequest) Reset()         { *m = PaymentChannelCostSystemRequest{} }
func (m *PaymentChannelCostSystemRequest) String() string { return proto.CompactTextString(m) }
func (*PaymentChannelCostSystemRequest) ProtoMessage()    {}
func (*PaymentChannelCostSystemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{75}
}

func (m *PaymentChannelCostSystemRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentChannelCostSystemRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PaymentChannelCostSystemRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *PaymentChannelCostSystemRequest) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

func (m *PaymentChannelCostSystemRequest) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

type PaymentChannelCostSystemList struct {
	// @inject_tag: json:"items"
	Items []*PaymentChannelCostSystem `protobuf:"bytes,1,rep,name=items" json:"items"`
}

func (m *PaymentChannelCostSystemList) Reset()                    { *m = PaymentChannelCostSystemList{} }
func (m *PaymentChannelCostSystemList) String() string            { return proto.CompactTextString(m) }
func (*PaymentChannelCostSystemList) ProtoMessage()               {}
func (*PaymentChannelCostSystemList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *PaymentChannelCostSystemList) GetItems() []*PaymentChannelCostSystem {
	if m != nil {
		return m.Items
	}
	return nil
}

type PaymentChannelCostMerchant struct {
	// @inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"name" bson:"name" validate:"required,name"
	Name string `protobuf:"bytes,3,opt,name=name" json:"name" bson:"name" validate:"required,name"`
	// @inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"
	PayoutCurrency string `protobuf:"bytes,4,opt,name=payout_currency,json=payoutCurrency" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"min_amount" bson:"min_amount" validate:"required,numeric,gte=0"
	MinAmount float64 `protobuf:"fixed64,5,opt,name=min_amount,json=minAmount" json:"min_amount" bson:"min_amount" validate:"required,numeric,gte=0"`
	// @inject_tag: json:"region" bson:"region" validate:"required"
	Region string `protobuf:"bytes,6,opt,name=region" json:"region" bson:"region" validate:"required"`
	// @inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	Country string `protobuf:"bytes,7,opt,name=country" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"method_percent" bson:"method_percent" validate:"required,numeric,gte=0,lte=1"
	MethodPercent float64 `protobuf:"fixed64,8,opt,name=method_percent,json=methodPercent" json:"method_percent" bson:"method_percent" validate:"required,numeric,gte=0,lte=1"`
	// @inject_tag: json:"method_fix_amount" bson:"method_fix_amount" validate:"numeric,gte=0"
	MethodFixAmount float64 `protobuf:"fixed64,9,opt,name=method_fix_amount,json=methodFixAmount" json:"method_fix_amount" bson:"method_fix_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"method_fix_amount_currency" bson:"method_fix_amount_currency" validate:"required,alpha,len=3"
	MethodFixAmountCurrency string `protobuf:"bytes,10,opt,name=method_fix_amount_currency,json=methodFixAmountCurrency" json:"method_fix_amount_currency" bson:"method_fix_amount_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"ps_percent" bson:"ps_percent" validate:"required,numeric,gte=0,lte=1"
	PsPercent float64 `protobuf:"fixed64,11,opt,name=ps_percent,json=psPercent" json:"ps_percent" bson:"ps_percent" validate:"required,numeric,gte=0,lte=1"`
	// @inject_tag: json:"ps_fixed_fee" bson:"ps_fixed_fee" validate:"numeric,gte=0"
	PsFixedFee float64 `protobuf:"fixed64,12,opt,name=ps_fixed_fee,json=psFixedFee" json:"ps_fixed_fee" bson:"ps_fixed_fee" validate:"numeric,gte=0"`
	// @inject_tag: json:"ps_fixed_fee_currency" bson:"ps_fixed_fee_currency" validate:"required,alpha,len=3"
	PsFixedFeeCurrency string `protobuf:"bytes,13,opt,name=ps_fixed_fee_currency,json=psFixedFeeCurrency" json:"ps_fixed_fee_currency" bson:"ps_fixed_fee_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"created_at" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt" json:"created_at" bson:"created_at"`
	// @inject_tag: json:"updated_at" bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt" json:"updated_at" bson:"updated_at"`
	// @inject_tag: json:"is_active" bson:"is_active"
	IsActive bool `protobuf:"varint,16,opt,name=is_active,json=isActive" json:"is_active" bson:"is_active"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	MccCode string `protobuf:"bytes,17,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code"`
}

func (m *PaymentChannelCostMerchant) Reset()                    { *m = PaymentChannelCostMerchant{} }
func (m *PaymentChannelCostMerchant) String() string            { return proto.CompactTextString(m) }
func (*PaymentChannelCostMerchant) ProtoMessage()               {}
func (*PaymentChannelCostMerchant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *PaymentChannelCostMerchant) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentChannelCostMerchant) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *PaymentChannelCostMerchant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentChannelCostMerchant) GetPayoutCurrency() string {
	if m != nil {
		return m.PayoutCurrency
	}
	return ""
}

func (m *PaymentChannelCostMerchant) GetMinAmount() float64 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

func (m *PaymentChannelCostMerchant) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PaymentChannelCostMerchant) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *PaymentChannelCostMerchant) GetMethodPercent() float64 {
	if m != nil {
		return m.MethodPercent
	}
	return 0
}

func (m *PaymentChannelCostMerchant) GetMethodFixAmount() float64 {
	if m != nil {
		return m.MethodFixAmount
	}
	return 0
}

func (m *PaymentChannelCostMerchant) GetMethodFixAmountCurrency() string {
	if m != nil {
		return m.MethodFixAmountCurrency
	}
	return ""
}

func (m *PaymentChannelCostMerchant) GetPsPercent() float64 {
	if m != nil {
		return m.PsPercent
	}
	return 0
}

func (m *PaymentChannelCostMerchant) GetPsFixedFee() float64 {
	if m != nil {
		return m.PsFixedFee
	}
	return 0
}

func (m *PaymentChannelCostMerchant) GetPsFixedFeeCurrency() string {
	if m != nil {
		return m.PsFixedFeeCurrency
	}
	return ""
}

func (m *PaymentChannelCostMerchant) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PaymentChannelCostMerchant) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PaymentChannelCostMerchant) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *PaymentChannelCostMerchant) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

type PaymentChannelCostMerchantRequest struct {
	// @inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"name" bson:"name" validate:"required,alpha" query:"name"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name" bson:"name" validate:"required,alpha" query:"name"`
	// @inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"
	PayoutCurrency string `protobuf:"bytes,3,opt,name=payout_currency,json=payoutCurrency" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"`
	// @inject_tag: json:"amount" bson:"amount" validate:"required,numeric,gte=0" query:"amount"
	Amount float64 `protobuf:"fixed64,4,opt,name=amount" json:"amount" bson:"amount" validate:"required,numeric,gte=0" query:"amount"`
	// @inject_tag: json:"region" bson:"region" validate:"required" query:"region"
	Region string `protobuf:"bytes,5,opt,name=region" json:"region" bson:"region" validate:"required" query:"region"`
	// @inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"
	Country string `protobuf:"bytes,6,opt,name=country" json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
	MccCode string `protobuf:"bytes,7,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"`
}

func (m *PaymentChannelCostMerchantRequest) Reset()         { *m = PaymentChannelCostMerchantRequest{} }
func (m *PaymentChannelCostMerchantRequest) String() string { return proto.CompactTextString(m) }
func (*PaymentChannelCostMerchantRequest) ProtoMessage()    {}
func (*PaymentChannelCostMerchantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{78}
}

func (m *PaymentChannelCostMerchantRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *PaymentChannelCostMerchantRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentChannelCostMerchantRequest) GetPayoutCurrency() string {
	if m != nil {
		return m.PayoutCurrency
	}
	return ""
}

func (m *PaymentChannelCostMerchantRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PaymentChannelCostMerchantRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PaymentChannelCostMerchantRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *PaymentChannelCostMerchantRequest) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

type PaymentChannelCostMerchantList struct {
	// @inject_tag: json:"items"
	Items []*PaymentChannelCostMerchant `protobuf:"bytes,1,rep,name=items" json:"items"`
}

func (m *PaymentChannelCostMerchantList) Reset()                    { *m = PaymentChannelCostMerchantList{} }
func (m *PaymentChannelCostMerchantList) String() string            { return proto.CompactTextString(m) }
func (*PaymentChannelCostMerchantList) ProtoMessage()               {}
func (*PaymentChannelCostMerchantList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *PaymentChannelCostMerchantList) GetItems() []*PaymentChannelCostMerchant {
	if m != nil {
		return m.Items
	}
	return nil
}

type PaymentChannelCostMerchantListRequest struct {
	// @inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"`
}

func (m *PaymentChannelCostMerchantListRequest) Reset()         { *m = PaymentChannelCostMerchantListRequest{} }
func (m *PaymentChannelCostMerchantListRequest) String() string { return proto.CompactTextString(m) }
func (*PaymentChannelCostMerchantListRequest) ProtoMessage()    {}
func (*PaymentChannelCostMerchantListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{80}
}

func (m *PaymentChannelCostMerchantListRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

type MoneyBackCostSystem struct {
	// @inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"name" bson:"name" validate:"required,alpha"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name" bson:"name" validate:"required,alpha"`
	// @inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"
	PayoutCurrency string `protobuf:"bytes,3,opt,name=payout_currency,json=payoutCurrency" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback"
	UndoReason string `protobuf:"bytes,4,opt,name=undo_reason,json=undoReason" json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback"`
	// @inject_tag: json:"region" bson:"region" validate:"required"
	Region string `protobuf:"bytes,5,opt,name=region" json:"region" bson:"region" validate:"required"`
	// @inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	Country string `protobuf:"bytes,6,opt,name=country" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"days_from" bson:"days_from" validate:"numeric,gte=0"
	DaysFrom int32 `protobuf:"varint,7,opt,name=days_from,json=daysFrom" json:"days_from" bson:"days_from" validate:"numeric,gte=0"`
	// @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1"
	PaymentStage int32 `protobuf:"varint,8,opt,name=payment_stage,json=paymentStage" json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1"`
	// @inject_tag: json:"percent" bson:"percent" validate:"numeric,gte=0,lte=1"
	Percent float64 `protobuf:"fixed64,9,opt,name=percent" json:"percent" bson:"percent" validate:"numeric,gte=0,lte=1"`
	// @inject_tag: json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"
	FixAmount float64 `protobuf:"fixed64,10,opt,name=fix_amount,json=fixAmount" json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"created_at" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt" json:"created_at" bson:"created_at"`
	// @inject_tag: json:"updated_at" bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt" json:"updated_at" bson:"updated_at"`
	// @inject_tag: json:"is_active" bson:"is_active"
	IsActive bool `protobuf:"varint,13,opt,name=is_active,json=isActive" json:"is_active" bson:"is_active"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	MccCode string `protobuf:"bytes,14,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,15,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id"`
	// @inject_tag: json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"
	FixAmountCurrency string `protobuf:"bytes,16,opt,name=fix_amount_currency,json=fixAmountCurrency" json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"`
}

func (m *MoneyBackCostSystem) Reset()                    { *m = MoneyBackCostSystem{} }
func (m *MoneyBackCostSystem) String() string            { return proto.CompactTextString(m) }
func (*MoneyBackCostSystem) ProtoMessage()               {}
func (*MoneyBackCostSystem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *MoneyBackCostSystem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MoneyBackCostSystem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MoneyBackCostSystem) GetPayoutCurrency() string {
	if m != nil {
		return m.PayoutCurrency
	}
	return ""
}

func (m *MoneyBackCostSystem) GetUndoReason() string {
	if m != nil {
		return m.UndoReason
	}
	return ""
}

func (m *MoneyBackCostSystem) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *MoneyBackCostSystem) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *MoneyBackCostSystem) GetDaysFrom() int32 {
	if m != nil {
		return m.DaysFrom
	}
	return 0
}

func (m *MoneyBackCostSystem) GetPaymentStage() int32 {
	if m != nil {
		return m.PaymentStage
	}
	return 0
}

func (m *MoneyBackCostSystem) GetPercent() float64 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *MoneyBackCostSystem) GetFixAmount() float64 {
	if m != nil {
		return m.FixAmount
	}
	return 0
}

func (m *MoneyBackCostSystem) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *MoneyBackCostSystem) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *MoneyBackCostSystem) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *MoneyBackCostSystem) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

func (m *MoneyBackCostSystem) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

func (m *MoneyBackCostSystem) GetFixAmountCurrency() string {
	if m != nil {
		return m.FixAmountCurrency
	}
	return ""
}

type MoneyBackCostSystemRequest struct {
	// @inject_tag: json:"name" bson:"name" validate:"required,alpha" query:"name"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name" bson:"name" validate:"required,alpha" query:"name"`
	// @inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"
	PayoutCurrency string `protobuf:"bytes,2,opt,name=payout_currency,json=payoutCurrency" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"`
	// @inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback" query:"undo_reason"
	UndoReason string `protobuf:"bytes,3,opt,name=undo_reason,json=undoReason" json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback" query:"undo_reason"`
	// @inject_tag: json:"region" bson:"region" validate:"required" query:"region"
	Region string `protobuf:"bytes,4,opt,name=region" json:"region" bson:"region" validate:"required" query:"region"`
	// @inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"
	Country string `protobuf:"bytes,5,opt,name=country" json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"`
	// @inject_tag: json:"days" bson:"days" validate:"required,numeric,gte=0" query:"days"
	Days int32 `protobuf:"varint,6,opt,name=days" json:"days" bson:"days" validate:"required,numeric,gte=0" query:"days"`
	// @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1" query:"payment_stage"
	PaymentStage int32 `protobuf:"varint,7,opt,name=payment_stage,json=paymentStage" json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1" query:"payment_stage"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
	MccCode string `protobuf:"bytes,8,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24" query:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,9,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id" validate:"required,hexadecimal,len=24" query:"operating_company_id"`
}

func (m *MoneyBackCostSystemRequest) Reset()                    { *m = MoneyBackCostSystemRequest{} }
func (m *MoneyBackCostSystemRequest) String() string            { return proto.CompactTextString(m) }
func (*MoneyBackCostSystemRequest) ProtoMessage()               {}
func (*MoneyBackCostSystemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *MoneyBackCostSystemRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MoneyBackCostSystemRequest) GetPayoutCurrency() string {
	if m != nil {
		return m.PayoutCurrency
	}
	return ""
}

func (m *MoneyBackCostSystemRequest) GetUndoReason() string {
	if m != nil {
		return m.UndoReason
	}
	return ""
}

func (m *MoneyBackCostSystemRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *MoneyBackCostSystemRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *MoneyBackCostSystemRequest) GetDays() int32 {
	if m != nil {
		return m.Days
	}
	return 0
}

func (m *MoneyBackCostSystemRequest) GetPaymentStage() int32 {
	if m != nil {
		return m.PaymentStage
	}
	return 0
}

func (m *MoneyBackCostSystemRequest) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

func (m *MoneyBackCostSystemRequest) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

type MoneyBackCostSystemList struct {
	// @inject_tag: json:"items"
	Items []*MoneyBackCostSystem `protobuf:"bytes,1,rep,name=items" json:"items"`
}

func (m *MoneyBackCostSystemList) Reset()                    { *m = MoneyBackCostSystemList{} }
func (m *MoneyBackCostSystemList) String() string            { return proto.CompactTextString(m) }
func (*MoneyBackCostSystemList) ProtoMessage()               {}
func (*MoneyBackCostSystemList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *MoneyBackCostSystemList) GetItems() []*MoneyBackCostSystem {
	if m != nil {
		return m.Items
	}
	return nil
}

type MoneyBackCostMerchant struct {
	// @inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"name" bson:"name" validate:"required,name"
	Name string `protobuf:"bytes,3,opt,name=name" json:"name" bson:"name" validate:"required,name"`
	// @inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"
	PayoutCurrency string `protobuf:"bytes,4,opt,name=payout_currency,json=payoutCurrency" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback"
	UndoReason string `protobuf:"bytes,5,opt,name=undo_reason,json=undoReason" json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback"`
	// @inject_tag: json:"region" bson:"region" validate:"required"
	Region string `protobuf:"bytes,6,opt,name=region" json:"region" bson:"region" validate:"required"`
	// @inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	Country string `protobuf:"bytes,7,opt,name=country" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"days_from" bson:"days_from" validate:"numeric,gte=0"
	DaysFrom int32 `protobuf:"varint,8,opt,name=days_from,json=daysFrom" json:"days_from" bson:"days_from" validate:"numeric,gte=0"`
	// @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1"
	PaymentStage int32 `protobuf:"varint,9,opt,name=payment_stage,json=paymentStage" json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1"`
	// @inject_tag: json:"percent" bson:"percent" validate:"numeric,gte=0,lte=1"
	Percent float64 `protobuf:"fixed64,10,opt,name=percent" json:"percent" bson:"percent" validate:"numeric,gte=0,lte=1"`
	// @inject_tag: json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"
	FixAmount float64 `protobuf:"fixed64,11,opt,name=fix_amount,json=fixAmount" json:"fix_amount" bson:"fix_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"
	FixAmountCurrency string `protobuf:"bytes,12,opt,name=fix_amount_currency,json=fixAmountCurrency" json:"fix_amount_currency" bson:"fix_amount_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"is_paid_by_merchant" bson:"is_paid_by_merchant"
	IsPaidByMerchant bool `protobuf:"varint,13,opt,name=is_paid_by_merchant,json=isPaidByMerchant" json:"is_paid_by_merchant" bson:"is_paid_by_merchant"`
	// @inject_tag: json:"created_at" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt" json:"created_at" bson:"created_at"`
	// @inject_tag: json:"updated_at" bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt" json:"updated_at" bson:"updated_at"`
	// @inject_tag: json:"is_active" bson:"is_active"
	IsActive bool `protobuf:"varint,16,opt,name=is_active,json=isActive" json:"is_active" bson:"is_active"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	MccCode string `protobuf:"bytes,17,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code"`
}

func (m *MoneyBackCostMerchant) Reset()                    { *m = MoneyBackCostMerchant{} }
func (m *MoneyBackCostMerchant) String() string            { return proto.CompactTextString(m) }
func (*MoneyBackCostMerchant) ProtoMessage()               {}
func (*MoneyBackCostMerchant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *MoneyBackCostMerchant) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MoneyBackCostMerchant) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *MoneyBackCostMerchant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MoneyBackCostMerchant) GetPayoutCurrency() string {
	if m != nil {
		return m.PayoutCurrency
	}
	return ""
}

func (m *MoneyBackCostMerchant) GetUndoReason() string {
	if m != nil {
		return m.UndoReason
	}
	return ""
}

func (m *MoneyBackCostMerchant) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *MoneyBackCostMerchant) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *MoneyBackCostMerchant) GetDaysFrom() int32 {
	if m != nil {
		return m.DaysFrom
	}
	return 0
}

func (m *MoneyBackCostMerchant) GetPaymentStage() int32 {
	if m != nil {
		return m.PaymentStage
	}
	return 0
}

func (m *MoneyBackCostMerchant) GetPercent() float64 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *MoneyBackCostMerchant) GetFixAmount() float64 {
	if m != nil {
		return m.FixAmount
	}
	return 0
}

func (m *MoneyBackCostMerchant) GetFixAmountCurrency() string {
	if m != nil {
		return m.FixAmountCurrency
	}
	return ""
}

func (m *MoneyBackCostMerchant) GetIsPaidByMerchant() bool {
	if m != nil {
		return m.IsPaidByMerchant
	}
	return false
}

func (m *MoneyBackCostMerchant) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *MoneyBackCostMerchant) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *MoneyBackCostMerchant) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *MoneyBackCostMerchant) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

type MoneyBackCostMerchantRequest struct {
	// @inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"name" bson:"name" validate:"required,alpha" query:"name"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name" bson:"name" validate:"required,alpha" query:"name"`
	// @inject_tag: json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"
	PayoutCurrency string `protobuf:"bytes,3,opt,name=payout_currency,json=payoutCurrency" json:"payout_currency" bson:"payout_currency" validate:"required,alpha,len=3" query:"payout_currency"`
	// @inject_tag: json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback" query:"undo_reason"
	UndoReason string `protobuf:"bytes,4,opt,name=undo_reason,json=undoReason" json:"undo_reason" bson:"undo_reason" validate:"required,alpha,oneof=refund reversal chargeback" query:"undo_reason"`
	// @inject_tag: json:"region" bson:"region" validate:"required" query:"region"
	Region string `protobuf:"bytes,5,opt,name=region" json:"region" bson:"region" validate:"required" query:"region"`
	// @inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"
	Country string `protobuf:"bytes,6,opt,name=country" json:"country" bson:"country" validate:"omitempty,alpha,len=2" query:"country"`
	// @inject_tag: json:"days" bson:"days" validate:"required,numeric,gte=0" query:"days"
	Days int32 `protobuf:"varint,7,opt,name=days" json:"days" bson:"days" validate:"required,numeric,gte=0" query:"days"`
	// @inject_tag: json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1" query:"payment_stage"
	PaymentStage int32 `protobuf:"varint,8,opt,name=payment_stage,json=paymentStage" json:"payment_stage" bson:"payment_stage" validate:"numeric,gte=1" query:"payment_stage"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"
	MccCode string `protobuf:"bytes,9,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code" validate:"required,numeric,len=4" query:"mcc_code"`
}

func (m *MoneyBackCostMerchantRequest) Reset()                    { *m = MoneyBackCostMerchantRequest{} }
func (m *MoneyBackCostMerchantRequest) String() string            { return proto.CompactTextString(m) }
func (*MoneyBackCostMerchantRequest) ProtoMessage()               {}
func (*MoneyBackCostMerchantRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *MoneyBackCostMerchantRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *MoneyBackCostMerchantRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MoneyBackCostMerchantRequest) GetPayoutCurrency() string {
	if m != nil {
		return m.PayoutCurrency
	}
	return ""
}

func (m *MoneyBackCostMerchantRequest) GetUndoReason() string {
	if m != nil {
		return m.UndoReason
	}
	return ""
}

func (m *MoneyBackCostMerchantRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *MoneyBackCostMerchantRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *MoneyBackCostMerchantRequest) GetDays() int32 {
	if m != nil {
		return m.Days
	}
	return 0
}

func (m *MoneyBackCostMerchantRequest) GetPaymentStage() int32 {
	if m != nil {
		return m.PaymentStage
	}
	return 0
}

func (m *MoneyBackCostMerchantRequest) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

type PaymentCostDeleteRequest struct {
	// @inject_tag: json:"id" bson:"_id" validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"required,hexadecimal,len=24"`
}

func (m *PaymentCostDeleteRequest) Reset()                    { *m = PaymentCostDeleteRequest{} }
func (m *PaymentCostDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*PaymentCostDeleteRequest) ProtoMessage()               {}
func (*PaymentCostDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *PaymentCostDeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MoneyBackCostMerchantList struct {
	// @inject_tag: json:"items"
	Items []*MoneyBackCostMerchant `protobuf:"bytes,1,rep,name=items" json:"items"`
}

func (m *MoneyBackCostMerchantList) Reset()                    { *m = MoneyBackCostMerchantList{} }
func (m *MoneyBackCostMerchantList) String() string            { return proto.CompactTextString(m) }
func (*MoneyBackCostMerchantList) ProtoMessage()               {}
func (*MoneyBackCostMerchantList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *MoneyBackCostMerchantList) GetItems() []*MoneyBackCostMerchant {
	if m != nil {
		return m.Items
	}
	return nil
}

type MoneyBackCostMerchantListRequest struct {
	// @inject_tag: json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id" bson:"merchant_id" validate:"required,hexadecimal,len=24"`
}

func (m *MoneyBackCostMerchantListRequest) Reset()         { *m = MoneyBackCostMerchantListRequest{} }
func (m *MoneyBackCostMerchantListRequest) String() string { return proto.CompactTextString(m) }
func (*MoneyBackCostMerchantListRequest) ProtoMessage()    {}
func (*MoneyBackCostMerchantListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{88}
}

func (m *MoneyBackCostMerchantListRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

type PayoutCostSystem struct {
	// @inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"intrabank_cost_amount" bson:"intrabank_cost_amount" validate:"numeric,gte=0"
	IntrabankCostAmount float64 `protobuf:"fixed64,2,opt,name=intrabank_cost_amount,json=intrabankCostAmount" json:"intrabank_cost_amount" bson:"intrabank_cost_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"intrabank_cost_currency" bson:"intrabank_cost_currency" validate:"required,alpha,len=3"
	IntrabankCostCurrency string `protobuf:"bytes,3,opt,name=intrabank_cost_currency,json=intrabankCostCurrency" json:"intrabank_cost_currency" bson:"intrabank_cost_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"interbank_cost_amount" bson:"interbank_cost_amount" validate:"numeric,gte=0"
	InterbankCostAmount float64 `protobuf:"fixed64,4,opt,name=interbank_cost_amount,json=interbankCostAmount" json:"interbank_cost_amount" bson:"interbank_cost_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"interbank_cost_currency" bson:"interbank_cost_currency" validate:"required,alpha,len=3"
	InterbankCostCurrency string `protobuf:"bytes,5,opt,name=interbank_cost_currency,json=interbankCostCurrency" json:"interbank_cost_currency" bson:"interbank_cost_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"is_active" bson:"is_active"
	IsActive bool `protobuf:"varint,6,opt,name=is_active,json=isActive" json:"is_active" bson:"is_active"`
	// @inject_tag: json:"-" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"-" bson:"created_at"`
}

func (m *PayoutCostSystem) Reset()                    { *m = PayoutCostSystem{} }
func (m *PayoutCostSystem) String() string            { return proto.CompactTextString(m) }
func (*PayoutCostSystem) ProtoMessage()               {}
func (*PayoutCostSystem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *PayoutCostSystem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PayoutCostSystem) GetIntrabankCostAmount() float64 {
	if m != nil {
		return m.IntrabankCostAmount
	}
	return 0
}

func (m *PayoutCostSystem) GetIntrabankCostCurrency() string {
	if m != nil {
		return m.IntrabankCostCurrency
	}
	return ""
}

func (m *PayoutCostSystem) GetInterbankCostAmount() float64 {
	if m != nil {
		return m.InterbankCostAmount
	}
	return 0
}

func (m *PayoutCostSystem) GetInterbankCostCurrency() string {
	if m != nil {
		return m.InterbankCostCurrency
	}
	return ""
}

func (m *PayoutCostSystem) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *PayoutCostSystem) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type AccountingEntrySource struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *AccountingEntrySource) Reset()                    { *m = AccountingEntrySource{} }
func (m *AccountingEntrySource) String() string            { return proto.CompactTextString(m) }
func (*AccountingEntrySource) ProtoMessage()               {}
func (*AccountingEntrySource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *AccountingEntrySource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountingEntrySource) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type AccountingEntry struct {
	Id                 string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Object             string                     `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
	Type               string                     `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Source             *AccountingEntrySource     `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	MerchantId         string                     `protobuf:"bytes,5,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	Amount             float64                    `protobuf:"fixed64,6,opt,name=amount" json:"amount,omitempty"`
	Currency           string                     `protobuf:"bytes,7,opt,name=currency" json:"currency,omitempty"`
	Reason             string                     `protobuf:"bytes,8,opt,name=reason" json:"reason,omitempty"`
	Status             string                     `protobuf:"bytes,9,opt,name=status" json:"status,omitempty"`
	Country            string                     `protobuf:"bytes,10,opt,name=country" json:"country,omitempty"`
	OriginalAmount     float64                    `protobuf:"fixed64,11,opt,name=original_amount,json=originalAmount" json:"original_amount,omitempty"`
	OriginalCurrency   string                     `protobuf:"bytes,12,opt,name=original_currency,json=originalCurrency" json:"original_currency,omitempty"`
	LocalAmount        float64                    `protobuf:"fixed64,13,opt,name=local_amount,json=localAmount" json:"local_amount,omitempty"`
	LocalCurrency      string                     `protobuf:"bytes,14,opt,name=local_currency,json=localCurrency" json:"local_currency,omitempty"`
	CreatedAt          *google_protobuf.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	AvailableOn        *google_protobuf.Timestamp `protobuf:"bytes,16,opt,name=available_on,json=availableOn" json:"available_on,omitempty"`
	OperatingCompanyId string                     `protobuf:"bytes,17,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id,omitempty"`
}

func (m *AccountingEntry) Reset()                    { *m = AccountingEntry{} }
func (m *AccountingEntry) String() string            { return proto.CompactTextString(m) }
func (*AccountingEntry) ProtoMessage()               {}
func (*AccountingEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *AccountingEntry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountingEntry) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *AccountingEntry) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AccountingEntry) GetSource() *AccountingEntrySource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *AccountingEntry) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *AccountingEntry) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *AccountingEntry) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *AccountingEntry) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AccountingEntry) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *AccountingEntry) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *AccountingEntry) GetOriginalAmount() float64 {
	if m != nil {
		return m.OriginalAmount
	}
	return 0
}

func (m *AccountingEntry) GetOriginalCurrency() string {
	if m != nil {
		return m.OriginalCurrency
	}
	return ""
}

func (m *AccountingEntry) GetLocalAmount() float64 {
	if m != nil {
		return m.LocalAmount
	}
	return 0
}

func (m *AccountingEntry) GetLocalCurrency() string {
	if m != nil {
		return m.LocalCurrency
	}
	return ""
}

func (m *AccountingEntry) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *AccountingEntry) GetAvailableOn() *google_protobuf.Timestamp {
	if m != nil {
		return m.AvailableOn
	}
	return nil
}

func (m *AccountingEntry) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

type RoyaltyReportTotals struct {
	// @inject_tag: bson:"transactions_count"
	TransactionsCount int32 `protobuf:"varint,2,opt,name=transactions_count,json=transactionsCount" json:"transactions_count,omitempty" bson:"transactions_count"`
	// @inject_tag: bson:"fee_amount"
	FeeAmount float64 `protobuf:"fixed64,3,opt,name=fee_amount,json=feeAmount" json:"fee_amount,omitempty" bson:"fee_amount"`
	// @inject_tag: bson:"vat_amount"
	VatAmount float64 `protobuf:"fixed64,4,opt,name=vat_amount,json=vatAmount" json:"vat_amount,omitempty" bson:"vat_amount"`
	// @inject_tag: bson:"payout_amount"
	PayoutAmount float64 `protobuf:"fixed64,5,opt,name=payout_amount,json=payoutAmount" json:"payout_amount,omitempty" bson:"payout_amount"`
	// @inject_tag: bson:"rolling_reserve_total_amount"
	RollingReserveAmount float64 `protobuf:"fixed64,6,opt,name=rolling_reserve_amount,json=rollingReserveAmount" json:"rolling_reserve_amount,omitempty" bson:"rolling_reserve_total_amount"`
	// @inject_tag: bson:"correction_total_amount"
	CorrectionAmount float64 `protobuf:"fixed64,7,opt,name=correction_amount,json=correctionAmount" json:"correction_amount,omitempty" bson:"correction_total_amount"`
}

func (m *RoyaltyReportTotals) Reset()                    { *m = RoyaltyReportTotals{} }
func (m *RoyaltyReportTotals) String() string            { return proto.CompactTextString(m) }
func (*RoyaltyReportTotals) ProtoMessage()               {}
func (*RoyaltyReportTotals) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *RoyaltyReportTotals) GetTransactionsCount() int32 {
	if m != nil {
		return m.TransactionsCount
	}
	return 0
}

func (m *RoyaltyReportTotals) GetFeeAmount() float64 {
	if m != nil {
		return m.FeeAmount
	}
	return 0
}

func (m *RoyaltyReportTotals) GetVatAmount() float64 {
	if m != nil {
		return m.VatAmount
	}
	return 0
}

func (m *RoyaltyReportTotals) GetPayoutAmount() float64 {
	if m != nil {
		return m.PayoutAmount
	}
	return 0
}

func (m *RoyaltyReportTotals) GetRollingReserveAmount() float64 {
	if m != nil {
		return m.RollingReserveAmount
	}
	return 0
}

func (m *RoyaltyReportTotals) GetCorrectionAmount() float64 {
	if m != nil {
		return m.CorrectionAmount
	}
	return 0
}

type RoyaltyReportProductSummaryItem struct {
	// @inject_tag: bson:"product" json:"product"
	Product string `protobuf:"bytes,1,opt,name=product" json:"product" bson:"product"`
	// @inject_tag: bson:"region" json:"region"
	Region string `protobuf:"bytes,2,opt,name=region" json:"region" bson:"region"`
	// @inject_tag: bson:"total_transactions" json:"total_transactions"
	TotalTransactions int32 `protobuf:"varint,3,opt,name=total_transactions,json=totalTransactions" json:"total_transactions" bson:"total_transactions"`
	// @inject_tag: bson:"sales_count" json:"sales_count"
	SalesCount int32 `protobuf:"varint,4,opt,name=sales_count,json=salesCount" json:"sales_count" bson:"sales_count"`
	// @inject_tag: bson:"gross_sales_amount" json:"gross_sales_amount"
	GrossSalesAmount float64 `protobuf:"fixed64,5,opt,name=gross_sales_amount,json=grossSalesAmount" json:"gross_sales_amount" bson:"gross_sales_amount"`
	// @inject_tag: bson:"returns_count" json:"returns_count"
	ReturnsCount int32 `protobuf:"varint,6,opt,name=returns_count,json=returnsCount" json:"returns_count" bson:"returns_count"`
	// @inject_tag: bson:"gross_returns_amount" json:"gross_returns_amount"
	GrossReturnsAmount float64 `protobuf:"fixed64,7,opt,name=gross_returns_amount,json=grossReturnsAmount" json:"gross_returns_amount" bson:"gross_returns_amount"`
	// @inject_tag: bson:"gross_total_amount" json:"gross_total_amount"
	GrossTotalAmount float64 `protobuf:"fixed64,8,opt,name=gross_total_amount,json=grossTotalAmount" json:"gross_total_amount" bson:"gross_total_amount"`
	// @inject_tag: bson:"total_fees" json:"total_fees"
	TotalFees float64 `protobuf:"fixed64,9,opt,name=total_fees,json=totalFees" json:"total_fees" bson:"total_fees"`
	// @inject_tag: bson:"total_vat" json:"total_vat"
	TotalVat float64 `protobuf:"fixed64,10,opt,name=total_vat,json=totalVat" json:"total_vat" bson:"total_vat"`
	// @inject_tag: bson:"payout_amount" json:"payout_amount"
	PayoutAmount float64 `protobuf:"fixed64,11,opt,name=payout_amount,json=payoutAmount" json:"payout_amount" bson:"payout_amount"`
}

func (m *RoyaltyReportProductSummaryItem) Reset()         { *m = RoyaltyReportProductSummaryItem{} }
func (m *RoyaltyReportProductSummaryItem) String() string { return proto.CompactTextString(m) }
func (*RoyaltyReportProductSummaryItem) ProtoMessage()    {}
func (*RoyaltyReportProductSummaryItem) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{93}
}

func (m *RoyaltyReportProductSummaryItem) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *RoyaltyReportProductSummaryItem) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *RoyaltyReportProductSummaryItem) GetTotalTransactions() int32 {
	if m != nil {
		return m.TotalTransactions
	}
	return 0
}

func (m *RoyaltyReportProductSummaryItem) GetSalesCount() int32 {
	if m != nil {
		return m.SalesCount
	}
	return 0
}

func (m *RoyaltyReportProductSummaryItem) GetGrossSalesAmount() float64 {
	if m != nil {
		return m.GrossSalesAmount
	}
	return 0
}

func (m *RoyaltyReportProductSummaryItem) GetReturnsCount() int32 {
	if m != nil {
		return m.ReturnsCount
	}
	return 0
}

func (m *RoyaltyReportProductSummaryItem) GetGrossReturnsAmount() float64 {
	if m != nil {
		return m.GrossReturnsAmount
	}
	return 0
}

func (m *RoyaltyReportProductSummaryItem) GetGrossTotalAmount() float64 {
	if m != nil {
		return m.GrossTotalAmount
	}
	return 0
}

func (m *RoyaltyReportProductSummaryItem) GetTotalFees() float64 {
	if m != nil {
		return m.TotalFees
	}
	return 0
}

func (m *RoyaltyReportProductSummaryItem) GetTotalVat() float64 {
	if m != nil {
		return m.TotalVat
	}
	return 0
}

func (m *RoyaltyReportProductSummaryItem) GetPayoutAmount() float64 {
	if m != nil {
		return m.PayoutAmount
	}
	return 0
}

type RoyaltyReportCorrectionItem struct {
	// @inject_tag: bson:"accounting_entry_id" json:"accounting_entry_id"
	AccountingEntryId string `protobuf:"bytes,1,opt,name=accounting_entry_id,json=accountingEntryId" json:"accounting_entry_id" bson:"accounting_entry_id"`
	// @inject_tag: bson:"amount" json:"amount"
	Amount float64 `protobuf:"fixed64,2,opt,name=amount" json:"amount" bson:"amount"`
	// @inject_tag: bson:"currency" json:"currency"
	Currency string `protobuf:"bytes,3,opt,name=currency" json:"currency" bson:"currency"`
	// @inject_tag: bson:"reason" json:"reason"
	Reason string `protobuf:"bytes,4,opt,name=reason" json:"reason" bson:"reason"`
	// @inject_tag: bson:"entry_date" json:"entry_date"
	EntryDate *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=entry_date,json=entryDate" json:"entry_date" bson:"entry_date"`
}

func (m *RoyaltyReportCorrectionItem) Reset()                    { *m = RoyaltyReportCorrectionItem{} }
func (m *RoyaltyReportCorrectionItem) String() string            { return proto.CompactTextString(m) }
func (*RoyaltyReportCorrectionItem) ProtoMessage()               {}
func (*RoyaltyReportCorrectionItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *RoyaltyReportCorrectionItem) GetAccountingEntryId() string {
	if m != nil {
		return m.AccountingEntryId
	}
	return ""
}

func (m *RoyaltyReportCorrectionItem) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *RoyaltyReportCorrectionItem) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *RoyaltyReportCorrectionItem) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RoyaltyReportCorrectionItem) GetEntryDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.EntryDate
	}
	return nil
}

type RoyaltyReportSummary struct {
	// @inject_tag: bson:"products_items" json:"products_items"
	ProductsItems []*RoyaltyReportProductSummaryItem `protobuf:"bytes,1,rep,name=products_items,json=productsItems" json:"products_items" bson:"products_items"`
	// @inject_tag: bson:"products_total" json:"products_total"
	ProductsTotal *RoyaltyReportProductSummaryItem `protobuf:"bytes,2,opt,name=products_total,json=productsTotal" json:"products_total" bson:"products_total"`
	// @inject_tag: bson:"corrections" json:"corrections"
	Corrections []*RoyaltyReportCorrectionItem `protobuf:"bytes,3,rep,name=corrections" json:"corrections" bson:"corrections"`
	// @inject_tag: bson:"rolling_reserves" json:"rolling_reserves"
	RollingReserves []*RoyaltyReportCorrectionItem `protobuf:"bytes,4,rep,name=rolling_reserves,json=rollingReserves" json:"rolling_reserves" bson:"rolling_reserves"`
}

func (m *RoyaltyReportSummary) Reset()                    { *m = RoyaltyReportSummary{} }
func (m *RoyaltyReportSummary) String() string            { return proto.CompactTextString(m) }
func (*RoyaltyReportSummary) ProtoMessage()               {}
func (*RoyaltyReportSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *RoyaltyReportSummary) GetProductsItems() []*RoyaltyReportProductSummaryItem {
	if m != nil {
		return m.ProductsItems
	}
	return nil
}

func (m *RoyaltyReportSummary) GetProductsTotal() *RoyaltyReportProductSummaryItem {
	if m != nil {
		return m.ProductsTotal
	}
	return nil
}

func (m *RoyaltyReportSummary) GetCorrections() []*RoyaltyReportCorrectionItem {
	if m != nil {
		return m.Corrections
	}
	return nil
}

func (m *RoyaltyReportSummary) GetRollingReserves() []*RoyaltyReportCorrectionItem {
	if m != nil {
		return m.RollingReserves
	}
	return nil
}

type RoyaltyReport struct {
	// @inject_tag: bson:"_id" json:"id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id"`
	// @inject_tag: bson:"merchant_id" json:"merchant_id"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId" json:"merchant_id" bson:"merchant_id"`
	// @inject_tag: bson:"created_at" json:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt" json:"created_at" bson:"created_at"`
	// @inject_tag: bson:"updated_at" json:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt" json:"updated_at" bson:"updated_at"`
	// @inject_tag: bson:"payout_date" json:"payout_date"
	PayoutDate *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=payout_date,json=payoutDate" json:"payout_date" bson:"payout_date"`
	// @inject_tag: bson:"status" json:"status"
	Status string `protobuf:"bytes,6,opt,name=status" json:"status" bson:"status"`
	// @inject_tag: bson:"period_from" json:"period_from"
	PeriodFrom *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=period_from,json=periodFrom" json:"period_from" bson:"period_from"`
	// @inject_tag: bson:"period_to" json:"period_to"
	PeriodTo *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=period_to,json=periodTo" json:"period_to" bson:"period_to"`
	// @inject_tag: bson:"accept_expire_at" json:"accept_expire_at"
	AcceptExpireAt *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=accept_expire_at,json=acceptExpireAt" json:"accept_expire_at" bson:"accept_expire_at"`
	// @inject_tag: bson:"merchant_id" json:"accepted_at"
	AcceptedAt *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=accepted_at,json=acceptedAt" json:"accepted_at" bson:"merchant_id"`
	// @inject_tag: bson:"totals" json:"totals"
	Totals *RoyaltyReportTotals `protobuf:"bytes,11,opt,name=totals" json:"totals" bson:"totals"`
	// @inject_tag: bson:"currency" json:"currency"
	Currency string `protobuf:"bytes,12,opt,name=currency" json:"currency" bson:"currency"`
	// @inject_tag: bson:"summary" json:"summary"
	Summary *RoyaltyReportSummary `protobuf:"bytes,13,opt,name=summary" json:"summary" bson:"summary"`
	// @inject_tag: bson:"dispute_reason" json:"dispute_reason"
	DisputeReason string `protobuf:"bytes,14,opt,name=dispute_reason,json=disputeReason" json:"dispute_reason" bson:"dispute_reason"`
	// @inject_tag: bson:"dispute_started_at" json:"dispute_closed_at"
	DisputeStartedAt *google_protobuf.Timestamp `protobuf:"bytes,15,opt,name=dispute_started_at,json=disputeStartedAt" json:"dispute_closed_at" bson:"dispute_started_at"`
	// @inject_tag: bson:"dispute_closed_at" json:"dispute_closed_at"
	DisputeClosedAt *google_protobuf.Timestamp `protobuf:"bytes,16,opt,name=dispute_closed_at,json=disputeClosedAt" json:"dispute_closed_at" bson:"dispute_closed_at"`
	// @inject_tag: bson:"is_auto_accepted" json:"is_auto_accepted"
	IsAutoAccepted bool `protobuf:"varint,17,opt,name=is_auto_accepted,json=isAutoAccepted" json:"is_auto_accepted" bson:"is_auto_accepted"`
	// @inject_tag: bson:"payout_document_id" json:"payout_document_id"
	PayoutDocumentId string `protobuf:"bytes,18,opt,name=payout_document_id,json=payoutDocumentId" json:"payout_document_id" bson:"payout_document_id"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,19,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id"`
}

func (m *RoyaltyReport) Reset()                    { *m = RoyaltyReport{} }
func (m *RoyaltyReport) String() string            { return proto.CompactTextString(m) }
func (*RoyaltyReport) ProtoMessage()               {}
func (*RoyaltyReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *RoyaltyReport) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoyaltyReport) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *RoyaltyReport) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *RoyaltyReport) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *RoyaltyReport) GetPayoutDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.PayoutDate
	}
	return nil
}

func (m *RoyaltyReport) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RoyaltyReport) GetPeriodFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.PeriodFrom
	}
	return nil
}

func (m *RoyaltyReport) GetPeriodTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.PeriodTo
	}
	return nil
}

func (m *RoyaltyReport) GetAcceptExpireAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.AcceptExpireAt
	}
	return nil
}

func (m *RoyaltyReport) GetAcceptedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.AcceptedAt
	}
	return nil
}

func (m *RoyaltyReport) GetTotals() *RoyaltyReportTotals {
	if m != nil {
		return m.Totals
	}
	return nil
}

func (m *RoyaltyReport) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *RoyaltyReport) GetSummary() *RoyaltyReportSummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *RoyaltyReport) GetDisputeReason() string {
	if m != nil {
		return m.DisputeReason
	}
	return ""
}

func (m *RoyaltyReport) GetDisputeStartedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.DisputeStartedAt
	}
	return nil
}

func (m *RoyaltyReport) GetDisputeClosedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.DisputeClosedAt
	}
	return nil
}

func (m *RoyaltyReport) GetIsAutoAccepted() bool {
	if m != nil {
		return m.IsAutoAccepted
	}
	return false
}

func (m *RoyaltyReport) GetPayoutDocumentId() string {
	if m != nil {
		return m.PayoutDocumentId
	}
	return ""
}

func (m *RoyaltyReport) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

type RoyaltyReportChanges struct {
	Id              string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RoyaltyReportId string                     `protobuf:"bytes,2,opt,name=royalty_report_id,json=royaltyReportId" json:"royalty_report_id,omitempty"`
	Source          string                     `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	Ip              string                     `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Hash            string                     `protobuf:"bytes,7,opt,name=hash" json:"hash,omitempty"`
	CreatedAt       *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *RoyaltyReportChanges) Reset()                    { *m = RoyaltyReportChanges{} }
func (m *RoyaltyReportChanges) String() string            { return proto.CompactTextString(m) }
func (*RoyaltyReportChanges) ProtoMessage()               {}
func (*RoyaltyReportChanges) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *RoyaltyReportChanges) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoyaltyReportChanges) GetRoyaltyReportId() string {
	if m != nil {
		return m.RoyaltyReportId
	}
	return ""
}

func (m *RoyaltyReportChanges) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RoyaltyReportChanges) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RoyaltyReportChanges) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *RoyaltyReportChanges) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type VatTransaction struct {
	// @inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"order_id" bson:"order_id" validate:"required,hexadecimal,len=24"
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId" json:"order_id" bson:"order_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"transaction_id" bson:"transaction_id" validate:"required"
	TransactionId string `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId" json:"transaction_id" bson:"transaction_id" validate:"required"`
	// @inject_tag: json:"transaction_type" bson:"transaction_type" validate:"required,oneof=payment refund chargeback"
	TransactionType string `protobuf:"bytes,4,opt,name=transaction_type,json=transactionType" json:"transaction_type" bson:"transaction_type" validate:"required,oneof=payment refund chargeback"`
	// @inject_tag: json:"transaction_amount" bson:"transaction_amount" validate:"numeric,gte=0"
	TransactionAmount float64 `protobuf:"fixed64,5,opt,name=transaction_amount,json=transactionAmount" json:"transaction_amount" bson:"transaction_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"transaction_currency" bson:"transaction_currency" validate:"required,alpha,len=3"
	TransactionCurrency string `protobuf:"bytes,6,opt,name=transaction_currency,json=transactionCurrency" json:"transaction_currency" bson:"transaction_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"vat_amount" bson:"vat_amount" validate:"numeric,gte=0"
	VatAmount float64 `protobuf:"fixed64,7,opt,name=vat_amount,json=vatAmount" json:"vat_amount" bson:"vat_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"vat_currency" bson:"vat_currency" validate:"required,alpha,len=3"
	VatCurrency string `protobuf:"bytes,8,opt,name=vat_currency,json=vatCurrency" json:"vat_currency" bson:"vat_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"fees_amount" bson:"fees_amount" validate:"numeric,gte=0"
	FeesAmount float64 `protobuf:"fixed64,9,opt,name=fees_amount,json=feesAmount" json:"fees_amount" bson:"fees_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"fees_currency" bson:"fees_currency" validate:"required,alpha,len=3"
	FeesCurrency string `protobuf:"bytes,10,opt,name=fees_currency,json=feesCurrency" json:"fees_currency" bson:"fees_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"local_transaction_amount" bson:"local_transaction_amount" validate:"omitempty,numeric,gte=0"
	LocalTransactionAmount float64 `protobuf:"fixed64,11,opt,name=local_transaction_amount,json=localTransactionAmount" json:"local_transaction_amount" bson:"local_transaction_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"local_vat_amount" bson:"local_vat_amount" validate:"omitempty,numeric,gte=0"
	LocalVatAmount float64 `protobuf:"fixed64,12,opt,name=local_vat_amount,json=localVatAmount" json:"local_vat_amount" bson:"local_vat_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"local_fees_amount" bson:"local_fees_amount" validate:"omitempty,numeric,gte=0"
	LocalFeesAmount float64 `protobuf:"fixed64,13,opt,name=local_fees_amount,json=localFeesAmount" json:"local_fees_amount" bson:"local_fees_amount" validate:"omitempty,numeric,gte=0"`
	// @inject_tag: json:"local_currency" bson:"local_currency" validate:"required,alpha,len=3"
	LocalCurrency string `protobuf:"bytes,14,opt,name=local_currency,json=localCurrency" json:"local_currency" bson:"local_currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"local_amounts_approximate" bson:"local_amounts_alocal_amounts_approximatepproximated" validate:"required,alpha,len=3"
	LocalAmountsApproximate bool `protobuf:"varint,15,opt,name=local_amounts_approximate,json=localAmountsApproximate" json:"local_amounts_approximate" bson:"local_amounts_alocal_amounts_approximatepproximated" validate:"required,alpha,len=3"`
	// @inject_tag: json:"billing_address_criteria" bson:"billing_address_criteria" validate:"required,oneof=ip bin language customer form"
	BillingAddressCriteria string `protobuf:"bytes,16,opt,name=billing_address_criteria,json=billingAddressCriteria" json:"billing_address_criteria" bson:"billing_address_criteria" validate:"required,oneof=ip bin language customer form"`
	// @inject_tag: json:"billing_address" bson:"billing_address" validate:"required,dive"
	BillingAddress *OrderBillingAddress `protobuf:"bytes,17,opt,name=billing_address,json=billingAddress" json:"billing_address" bson:"billing_address" validate:"required,dive"`
	// @inject_tag: json:"user_id" bson:"user_id" validate:"omitempty,hexadecimal,len=24"
	UserId string `protobuf:"bytes,18,opt,name=user_id,json=userId" json:"user_id" bson:"user_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"payment_method" bson:"payment_method" validate:"required"
	PaymentMethod string `protobuf:"bytes,19,opt,name=payment_method,json=paymentMethod" json:"payment_method" bson:"payment_method" validate:"required"`
	// @inject_tag: json:"is_deduction" bson:"is_deduction"
	IsDeduction bool `protobuf:"varint,20,opt,name=is_deduction,json=isDeduction" json:"is_deduction" bson:"is_deduction"`
	// @inject_tag: json:"country" bson:"country" validate:"required,alpha,len=2"
	Country string `protobuf:"bytes,21,opt,name=country" json:"country" bson:"country" validate:"required,alpha,len=2"`
	// @inject_tag: json:"date_time" bson:"date_time"
	DateTime *google_protobuf.Timestamp `protobuf:"bytes,22,opt,name=date_time,json=dateTime" json:"date_time" bson:"date_time"`
}

func (m *VatTransaction) Reset()                    { *m = VatTransaction{} }
func (m *VatTransaction) String() string            { return proto.CompactTextString(m) }
func (*VatTransaction) ProtoMessage()               {}
func (*VatTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *VatTransaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VatTransaction) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *VatTransaction) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *VatTransaction) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

func (m *VatTransaction) GetTransactionAmount() float64 {
	if m != nil {
		return m.TransactionAmount
	}
	return 0
}

func (m *VatTransaction) GetTransactionCurrency() string {
	if m != nil {
		return m.TransactionCurrency
	}
	return ""
}

func (m *VatTransaction) GetVatAmount() float64 {
	if m != nil {
		return m.VatAmount
	}
	return 0
}

func (m *VatTransaction) GetVatCurrency() string {
	if m != nil {
		return m.VatCurrency
	}
	return ""
}

func (m *VatTransaction) GetFeesAmount() float64 {
	if m != nil {
		return m.FeesAmount
	}
	return 0
}

func (m *VatTransaction) GetFeesCurrency() string {
	if m != nil {
		return m.FeesCurrency
	}
	return ""
}

func (m *VatTransaction) GetLocalTransactionAmount() float64 {
	if m != nil {
		return m.LocalTransactionAmount
	}
	return 0
}

func (m *VatTransaction) GetLocalVatAmount() float64 {
	if m != nil {
		return m.LocalVatAmount
	}
	return 0
}

func (m *VatTransaction) GetLocalFeesAmount() float64 {
	if m != nil {
		return m.LocalFeesAmount
	}
	return 0
}

func (m *VatTransaction) GetLocalCurrency() string {
	if m != nil {
		return m.LocalCurrency
	}
	return ""
}

func (m *VatTransaction) GetLocalAmountsApproximate() bool {
	if m != nil {
		return m.LocalAmountsApproximate
	}
	return false
}

func (m *VatTransaction) GetBillingAddressCriteria() string {
	if m != nil {
		return m.BillingAddressCriteria
	}
	return ""
}

func (m *VatTransaction) GetBillingAddress() *OrderBillingAddress {
	if m != nil {
		return m.BillingAddress
	}
	return nil
}

func (m *VatTransaction) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *VatTransaction) GetPaymentMethod() string {
	if m != nil {
		return m.PaymentMethod
	}
	return ""
}

func (m *VatTransaction) GetIsDeduction() bool {
	if m != nil {
		return m.IsDeduction
	}
	return false
}

func (m *VatTransaction) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *VatTransaction) GetDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.DateTime
	}
	return nil
}

type VatReport struct {
	// @inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"country" bson:"country" validate:"required,alpha,len=2"
	Country string `protobuf:"bytes,2,opt,name=country" json:"country" bson:"country" validate:"required,alpha,len=2"`
	// @inject_tag: json:"vat_rate" bson:"vat_rate" validate:"numeric,gte=0,lte=1"
	VatRate float64 `protobuf:"fixed64,3,opt,name=vat_rate,json=vatRate" json:"vat_rate" bson:"vat_rate" validate:"numeric,gte=0,lte=1"`
	// @inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,4,opt,name=currency" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"transactions_count" bson:"transactions_count" validate:"numeric,gte=0"
	TransactionsCount int32 `protobuf:"varint,5,opt,name=transactions_count,json=transactionsCount" json:"transactions_count" bson:"transactions_count" validate:"numeric,gte=0"`
	// @inject_tag: json:"gross_revenue" bson:"gross_revenue" validate:"numeric,gte=0"
	GrossRevenue float64 `protobuf:"fixed64,6,opt,name=gross_revenue,json=grossRevenue" json:"gross_revenue" bson:"gross_revenue" validate:"numeric,gte=0"`
	// @inject_tag: json:"vat_amount" bson:"vat_amount" validate:"numeric,gte=0"
	VatAmount float64 `protobuf:"fixed64,7,opt,name=vat_amount,json=vatAmount" json:"vat_amount" bson:"vat_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"fees_amount" bson:"fees_amount" validate:"numeric,gte=0"
	FeesAmount float64 `protobuf:"fixed64,8,opt,name=fees_amount,json=feesAmount" json:"fees_amount" bson:"fees_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"deduction_amount" bson:"deduction_amount" validate:"numeric,gte=0"
	DeductionAmount float64 `protobuf:"fixed64,9,opt,name=deduction_amount,json=deductionAmount" json:"deduction_amount" bson:"deduction_amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"correction_amount" bson:"correction_amount" validate:"numeric,lte=0"
	CorrectionAmount float64 `protobuf:"fixed64,10,opt,name=correction_amount,json=correctionAmount" json:"correction_amount" bson:"correction_amount" validate:"numeric,lte=0"`
	// @inject_tag: json:"status" bson:"status" validate:"required,alpha,oneof=threshold expired pending need_to_pay paid overdue canceled"
	Status string `protobuf:"bytes,11,opt,name=status" json:"status" bson:"status" validate:"required,alpha,oneof=threshold expired pending need_to_pay paid overdue canceled"`
	// @inject_tag: json:"country_annual_turnover" bson:"country_annual_turnover" validate:"numeric,gte=0"
	CountryAnnualTurnover float64 `protobuf:"fixed64,12,opt,name=country_annual_turnover,json=countryAnnualTurnover" json:"country_annual_turnover" bson:"country_annual_turnover" validate:"numeric,gte=0"`
	// @inject_tag: json:"world_annual_turnover" bson:"world_annual_turnover" validate:"numeric,gte=0"
	WorldAnnualTurnover float64 `protobuf:"fixed64,13,opt,name=world_annual_turnover,json=worldAnnualTurnover" json:"world_annual_turnover" bson:"world_annual_turnover" validate:"numeric,gte=0"`
	// @inject_tag: json:"amounts_approximate" bson:"amounts_approximate"
	AmountsApproximate bool `protobuf:"varint,14,opt,name=amounts_approximate,json=amountsApproximate" json:"amounts_approximate" bson:"amounts_approximate"`
	// @inject_tag: json:"date_from" bson:"date_from"
	DateFrom *google_protobuf.Timestamp `protobuf:"bytes,15,opt,name=date_from,json=dateFrom" json:"date_from" bson:"date_from"`
	// @inject_tag: json:"date_to" bson:"date_to"
	DateTo *google_protobuf.Timestamp `protobuf:"bytes,16,opt,name=date_to,json=dateTo" json:"date_to" bson:"date_to"`
	// @inject_tag: json:"pay_until_date" bson:"pay_until_date"
	PayUntilDate *google_protobuf.Timestamp `protobuf:"bytes,17,opt,name=pay_until_date,json=payUntilDate" json:"pay_until_date" bson:"pay_until_date"`
	// @inject_tag: json:"created_at" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt" json:"created_at" bson:"created_at"`
	// @inject_tag: json:"updated_at" bson:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt" json:"updated_at" bson:"updated_at"`
	// @inject_tag: json:"paid_at" bson:"paid_at"
	PaidAt *google_protobuf.Timestamp `protobuf:"bytes,20,opt,name=paid_at,json=paidAt" json:"paid_at" bson:"paid_at"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,21,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id"`
}

func (m *VatReport) Reset()                    { *m = VatReport{} }
func (m *VatReport) String() string            { return proto.CompactTextString(m) }
func (*VatReport) ProtoMessage()               {}
func (*VatReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *VatReport) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VatReport) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *VatReport) GetVatRate() float64 {
	if m != nil {
		return m.VatRate
	}
	return 0
}

func (m *VatReport) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *VatReport) GetTransactionsCount() int32 {
	if m != nil {
		return m.TransactionsCount
	}
	return 0
}

func (m *VatReport) GetGrossRevenue() float64 {
	if m != nil {
		return m.GrossRevenue
	}
	return 0
}

func (m *VatReport) GetVatAmount() float64 {
	if m != nil {
		return m.VatAmount
	}
	return 0
}

func (m *VatReport) GetFeesAmount() float64 {
	if m != nil {
		return m.FeesAmount
	}
	return 0
}

func (m *VatReport) GetDeductionAmount() float64 {
	if m != nil {
		return m.DeductionAmount
	}
	return 0
}

func (m *VatReport) GetCorrectionAmount() float64 {
	if m != nil {
		return m.CorrectionAmount
	}
	return 0
}

func (m *VatReport) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *VatReport) GetCountryAnnualTurnover() float64 {
	if m != nil {
		return m.CountryAnnualTurnover
	}
	return 0
}

func (m *VatReport) GetWorldAnnualTurnover() float64 {
	if m != nil {
		return m.WorldAnnualTurnover
	}
	return 0
}

func (m *VatReport) GetAmountsApproximate() bool {
	if m != nil {
		return m.AmountsApproximate
	}
	return false
}

func (m *VatReport) GetDateFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.DateFrom
	}
	return nil
}

func (m *VatReport) GetDateTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.DateTo
	}
	return nil
}

func (m *VatReport) GetPayUntilDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.PayUntilDate
	}
	return nil
}

func (m *VatReport) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *VatReport) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *VatReport) GetPaidAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.PaidAt
	}
	return nil
}

func (m *VatReport) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

type AnnualTurnover struct {
	// @inject_tag: json:"year" bson:"year" validate:"required,numeric,gte=2019"
	Year int32 `protobuf:"varint,1,opt,name=year" json:"year" bson:"year" validate:"required,numeric,gte=2019"`
	// @inject_tag: json:"country" bson:"country" validate:"omitempty,alpha,len=2"
	Country string `protobuf:"bytes,2,opt,name=country" json:"country" bson:"country" validate:"omitempty,alpha,len=2"`
	// @inject_tag: json:"amount" bson:"amount" validate:"numeric,gte=0"
	Amount float64 `protobuf:"fixed64,3,opt,name=amount" json:"amount" bson:"amount" validate:"numeric,gte=0"`
	// @inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,4,opt,name=currency" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,5,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id"`
}

func (m *AnnualTurnover) Reset()                    { *m = AnnualTurnover{} }
func (m *AnnualTurnover) String() string            { return proto.CompactTextString(m) }
func (*AnnualTurnover) ProtoMessage()               {}
func (*AnnualTurnover) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *AnnualTurnover) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *AnnualTurnover) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *AnnualTurnover) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *AnnualTurnover) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *AnnualTurnover) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

type OrderViewMoney struct {
	// @inject_tag: json:"amount"
	Amount float64 `protobuf:"fixed64,1,opt,name=amount" json:"amount"`
	// @inject_tag: json:"currency"
	Currency string `protobuf:"bytes,2,opt,name=currency" json:"currency"`
}

func (m *OrderViewMoney) Reset()                    { *m = OrderViewMoney{} }
func (m *OrderViewMoney) String() string            { return proto.CompactTextString(m) }
func (*OrderViewMoney) ProtoMessage()               {}
func (*OrderViewMoney) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *OrderViewMoney) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderViewMoney) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type OrderViewPublic struct {
	// @inject_tag: json:"-" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"-" bson:"_id"`
	// @inject_tag: json:"uuid" bson:"uuid"
	Uuid string `protobuf:"bytes,2,opt,name=uuid" json:"uuid" bson:"uuid"`
	// @inject_tag: json:"total_payment_amount" bson:"total_payment_amount"
	TotalPaymentAmount float64 `protobuf:"fixed64,3,opt,name=total_payment_amount,json=totalPaymentAmount" json:"total_payment_amount" bson:"total_payment_amount"`
	// @inject_tag: json:"currency" bson:"currency"
	Currency string `protobuf:"bytes,4,opt,name=currency" json:"currency" bson:"currency"`
	// @inject_tag: json:"project" bson:"project"
	Project *ProjectOrder `protobuf:"bytes,5,opt,name=project" json:"project" bson:"project"`
	// @inject_tag: bson:"created_at" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty" bson:"created_at" bson:"created_at"`
	// @inject_tag: json:"transaction" bson:"pm_order_id"
	Transaction string `protobuf:"bytes,7,opt,name=transaction" json:"transaction" bson:"pm_order_id"`
	// @inject_tag: json:"payment_method" bson:"payment_method"
	PaymentMethod *PaymentMethodOrder `protobuf:"bytes,8,opt,name=payment_method,json=paymentMethod" json:"payment_method" bson:"payment_method"`
	// @inject_tag: json:"country_code" bson:"country_code"
	CountryCode string `protobuf:"bytes,9,opt,name=country_code,json=countryCode" json:"country_code" bson:"country_code"`
	// @inject_tag: json:"merchant_id" bson:"merchant_id"
	MerchantId string `protobuf:"bytes,10,opt,name=merchant_id,json=merchantId" json:"merchant_id" bson:"merchant_id"`
	// @inject_tag: json:"locale" bson:"locale"
	Locale string `protobuf:"bytes,11,opt,name=locale" json:"locale" bson:"locale"`
	// @inject_tag: json:"status" bson:"status"
	Status string `protobuf:"bytes,12,opt,name=status" json:"status" bson:"status"`
	// @inject_tag: json:"transaction_date" bson:"pm_order_close_date"
	TransactionDate *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=transaction_date,json=transactionDate" json:"transaction_date" bson:"pm_order_close_date"`
	// @inject_tag: json:"user" bson:"user"
	User *OrderUser `protobuf:"bytes,14,opt,name=user" json:"user" bson:"user"`
	// @inject_tag: json:"billing_address" bson:"billing_address"
	BillingAddress *OrderBillingAddress `protobuf:"bytes,15,opt,name=billing_address,json=billingAddress" json:"billing_address" bson:"billing_address"`
	// @inject_tag: json:"type" bson:"type"
	Type string `protobuf:"bytes,16,opt,name=type" json:"type" bson:"type"`
	// @inject_tag: json:"is_vat_deduction" bson:"is_vat_deduction"
	IsVatDeduction bool `protobuf:"varint,17,opt,name=is_vat_deduction,json=isVatDeduction" json:"is_vat_deduction" bson:"is_vat_deduction"`
	// @inject_tag: json:"gross_revenue" bson:"gross_revenue"
	GrossRevenue *OrderViewMoney `protobuf:"bytes,18,opt,name=gross_revenue,json=grossRevenue" json:"gross_revenue" bson:"gross_revenue"`
	// @inject_tag: json:"tax_fee" bson:"tax_fee"
	TaxFee *OrderViewMoney `protobuf:"bytes,19,opt,name=tax_fee,json=taxFee" json:"tax_fee" bson:"tax_fee"`
	// @inject_tag: json:"tax_fee_currency_exchange_fee" bson:"tax_fee_currency_exchange_fee"
	TaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,20,opt,name=tax_fee_currency_exchange_fee,json=taxFeeCurrencyExchangeFee" json:"tax_fee_currency_exchange_fee" bson:"tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"tax_fee_total" bson:"tax_fee_total"
	TaxFeeTotal *OrderViewMoney `protobuf:"bytes,21,opt,name=tax_fee_total,json=taxFeeTotal" json:"tax_fee_total" bson:"tax_fee_total"`
	// @inject_tag: json:"method_fee_total" bson:"method_fee_total"
	MethodFeeTotal *OrderViewMoney `protobuf:"bytes,22,opt,name=method_fee_total,json=methodFeeTotal" json:"method_fee_total" bson:"method_fee_total"`
	// @inject_tag: json:"method_fee_tariff" bson:"method_fee_tariff"
	MethodFeeTariff *OrderViewMoney `protobuf:"bytes,23,opt,name=method_fee_tariff,json=methodFeeTariff" json:"method_fee_tariff" bson:"method_fee_tariff"`
	// @inject_tag: json:"method_fixed_fee_tariff" bson:"method_fixed_fee_tariff"
	MethodFixedFeeTariff *OrderViewMoney `protobuf:"bytes,24,opt,name=method_fixed_fee_tariff,json=methodFixedFeeTariff" json:"method_fixed_fee_tariff" bson:"method_fixed_fee_tariff"`
	// @inject_tag: json:"paysuper_fixed_fee" bson:"paysuper_fixed_fee"
	PaysuperFixedFee *OrderViewMoney `protobuf:"bytes,25,opt,name=paysuper_fixed_fee,json=paysuperFixedFee" json:"paysuper_fixed_fee" bson:"paysuper_fixed_fee"`
	// @inject_tag: json:"fees_total" bson:"fees_total"
	FeesTotal *OrderViewMoney `protobuf:"bytes,26,opt,name=fees_total,json=feesTotal" json:"fees_total" bson:"fees_total"`
	// @inject_tag: json:"fees_total_local" bson:"fees_total_local"
	FeesTotalLocal *OrderViewMoney `protobuf:"bytes,27,opt,name=fees_total_local,json=feesTotalLocal" json:"fees_total_local" bson:"fees_total_local"`
	// @inject_tag: json:"net_revenue" bson:"net_revenue"
	NetRevenue *OrderViewMoney `protobuf:"bytes,28,opt,name=net_revenue,json=netRevenue" json:"net_revenue" bson:"net_revenue"`
	// @inject_tag: json:"refund_gross_revenue" bson:"refund_gross_revenue"
	RefundGrossRevenue *OrderViewMoney `protobuf:"bytes,29,opt,name=refund_gross_revenue,json=refundGrossRevenue" json:"refund_gross_revenue" bson:"refund_gross_revenue"`
	// @inject_tag: json:"method_refund_fee_tariff" bson:"method_refund_fee_tariff"
	MethodRefundFeeTariff *OrderViewMoney `protobuf:"bytes,30,opt,name=method_refund_fee_tariff,json=methodRefundFeeTariff" json:"method_refund_fee_tariff" bson:"method_refund_fee_tariff"`
	// @inject_tag: json:"merchant_refund_fixed_fee_tariff" bson:"merchant_refund_fixed_fee_tariff"
	MerchantRefundFixedFeeTariff *OrderViewMoney `protobuf:"bytes,31,opt,name=merchant_refund_fixed_fee_tariff,json=merchantRefundFixedFeeTariff" json:"merchant_refund_fixed_fee_tariff" bson:"merchant_refund_fixed_fee_tariff"`
	// @inject_tag: json:"refund_tax_fee" bson:"refund_tax_fee"
	RefundTaxFee *OrderViewMoney `protobuf:"bytes,32,opt,name=refund_tax_fee,json=refundTaxFee" json:"refund_tax_fee" bson:"refund_tax_fee"`
	// @inject_tag: json:"refund_tax_fee_currency_exchange_fee" bson:"refund_tax_fee_currency_exchange_fee"
	RefundTaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,33,opt,name=refund_tax_fee_currency_exchange_fee,json=refundTaxFeeCurrencyExchangeFee" json:"refund_tax_fee_currency_exchange_fee" bson:"refund_tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"paysuper_refund_tax_fee_currency_exchange_fee" bson:"paysuper_refund_tax_fee_currency_exchange_fee"
	PaysuperRefundTaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,34,opt,name=paysuper_refund_tax_fee_currency_exchange_fee,json=paysuperRefundTaxFeeCurrencyExchangeFee" json:"paysuper_refund_tax_fee_currency_exchange_fee" bson:"paysuper_refund_tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"refund_reverse_revenue" bson:"refund_reverse_revenue"
	RefundReverseRevenue *OrderViewMoney `protobuf:"bytes,35,opt,name=refund_reverse_revenue,json=refundReverseRevenue" json:"refund_reverse_revenue" bson:"refund_reverse_revenue"`
	// @inject_tag: json:"refund_fees_total" bson:"refund_fees_total"
	RefundFeesTotal *OrderViewMoney `protobuf:"bytes,36,opt,name=refund_fees_total,json=refundFeesTotal" json:"refund_fees_total" bson:"refund_fees_total"`
	// @inject_tag: json:"refund_fees_total_local" bson:"refund_fees_total_local"
	RefundFeesTotalLocal *OrderViewMoney `protobuf:"bytes,37,opt,name=refund_fees_total_local,json=refundFeesTotalLocal" json:"refund_fees_total_local" bson:"refund_fees_total_local"`
	Issuer               *OrderIssuer    `protobuf:"bytes,38,opt,name=issuer" json:"issuer,omitempty"`
	// @inject_tag: json:"items" bson:"items"
	Items []*OrderItem `protobuf:"bytes,39,rep,name=items" json:"items" bson:"items"`
	// @inject_tag: json:"merchant_payout_currency" bson:"merchant_payout_currency"
	MerchantPayoutCurrency string `protobuf:"bytes,40,opt,name=merchant_payout_currency,json=merchantPayoutCurrency" json:"merchant_payout_currency" bson:"merchant_payout_currency"`
	// @inject_tag: json:"parent_order" bson:"parent_order"
	ParentOrder *ParentOrder `protobuf:"bytes,41,opt,name=parent_order,json=parentOrder" json:"parent_order" bson:"parent_order"`
	// @inject_tag: json:"refund" bson:"refund"
	Refund *OrderNotificationRefund `protobuf:"bytes,42,opt,name=refund" json:"refund" bson:"refund"`
	// @inject_tag: json:"cancellation" bson:"cancellation"
	Cancellation *OrderNotificationCancellation `protobuf:"bytes,43,opt,name=cancellation" json:"cancellation" bson:"cancellation"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,44,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id"`
	// @inject_tag: json:"refund_allowed" bson:"refund_allowed"
	RefundAllowed bool `protobuf:"varint,45,opt,name=refund_allowed,json=refundAllowed" json:"refund_allowed" bson:"refund_allowed"`
	// @inject_tag: json:"order_charge" bson:"order_charge"
	OrderCharge *OrderViewMoney `protobuf:"bytes,46,opt,name=order_charge,json=orderCharge" json:"order_charge" bson:"order_charge"`
	// @inject_tag: json:"payment_ip_country"
	PaymentIpCountry string `protobuf:"bytes,47,opt,name=payment_ip_country,json=paymentIpCountry" json:"payment_ip_country"`
	// @inject_tag: json:"is_ip_country_mismatch_bin" bson:"is_ip_country_mismatch_bin"
	IsIpCountryMismatchBin bool `protobuf:"varint,48,opt,name=is_ip_country_mismatch_bin,json=isIpCountryMismatchBin" json:"is_ip_country_mismatch_bin" bson:"is_ip_country_mismatch_bin"`
	// @inject_tag: json:"billing_country_changed_by_user" bson:"billing_country_changed_by_user"
	BillingCountryChangedByUser bool `protobuf:"varint,49,opt,name=billing_country_changed_by_user,json=billingCountryChangedByUser" json:"billing_country_changed_by_user" bson:"billing_country_changed_by_user"`
	// @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
	VatPayer string `protobuf:"bytes,50,opt,name=vat_payer,json=vatPayer" json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"`
	// @inject_tag: json:"is_production" bson:"is_production"
	IsProduction bool `protobuf:"varint,51,opt,name=is_production,json=isProduction" json:"is_production" bson:"is_production"`
}

func (m *OrderViewPublic) Reset()                    { *m = OrderViewPublic{} }
func (m *OrderViewPublic) String() string            { return proto.CompactTextString(m) }
func (*OrderViewPublic) ProtoMessage()               {}
func (*OrderViewPublic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *OrderViewPublic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderViewPublic) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *OrderViewPublic) GetTotalPaymentAmount() float64 {
	if m != nil {
		return m.TotalPaymentAmount
	}
	return 0
}

func (m *OrderViewPublic) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *OrderViewPublic) GetProject() *ProjectOrder {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *OrderViewPublic) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *OrderViewPublic) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

func (m *OrderViewPublic) GetPaymentMethod() *PaymentMethodOrder {
	if m != nil {
		return m.PaymentMethod
	}
	return nil
}

func (m *OrderViewPublic) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *OrderViewPublic) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *OrderViewPublic) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *OrderViewPublic) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *OrderViewPublic) GetTransactionDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.TransactionDate
	}
	return nil
}

func (m *OrderViewPublic) GetUser() *OrderUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *OrderViewPublic) GetBillingAddress() *OrderBillingAddress {
	if m != nil {
		return m.BillingAddress
	}
	return nil
}

func (m *OrderViewPublic) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *OrderViewPublic) GetIsVatDeduction() bool {
	if m != nil {
		return m.IsVatDeduction
	}
	return false
}

func (m *OrderViewPublic) GetGrossRevenue() *OrderViewMoney {
	if m != nil {
		return m.GrossRevenue
	}
	return nil
}

func (m *OrderViewPublic) GetTaxFee() *OrderViewMoney {
	if m != nil {
		return m.TaxFee
	}
	return nil
}

func (m *OrderViewPublic) GetTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if m != nil {
		return m.TaxFeeCurrencyExchangeFee
	}
	return nil
}

func (m *OrderViewPublic) GetTaxFeeTotal() *OrderViewMoney {
	if m != nil {
		return m.TaxFeeTotal
	}
	return nil
}

func (m *OrderViewPublic) GetMethodFeeTotal() *OrderViewMoney {
	if m != nil {
		return m.MethodFeeTotal
	}
	return nil
}

func (m *OrderViewPublic) GetMethodFeeTariff() *OrderViewMoney {
	if m != nil {
		return m.MethodFeeTariff
	}
	return nil
}

func (m *OrderViewPublic) GetMethodFixedFeeTariff() *OrderViewMoney {
	if m != nil {
		return m.MethodFixedFeeTariff
	}
	return nil
}

func (m *OrderViewPublic) GetPaysuperFixedFee() *OrderViewMoney {
	if m != nil {
		return m.PaysuperFixedFee
	}
	return nil
}

func (m *OrderViewPublic) GetFeesTotal() *OrderViewMoney {
	if m != nil {
		return m.FeesTotal
	}
	return nil
}

func (m *OrderViewPublic) GetFeesTotalLocal() *OrderViewMoney {
	if m != nil {
		return m.FeesTotalLocal
	}
	return nil
}

func (m *OrderViewPublic) GetNetRevenue() *OrderViewMoney {
	if m != nil {
		return m.NetRevenue
	}
	return nil
}

func (m *OrderViewPublic) GetRefundGrossRevenue() *OrderViewMoney {
	if m != nil {
		return m.RefundGrossRevenue
	}
	return nil
}

func (m *OrderViewPublic) GetMethodRefundFeeTariff() *OrderViewMoney {
	if m != nil {
		return m.MethodRefundFeeTariff
	}
	return nil
}

func (m *OrderViewPublic) GetMerchantRefundFixedFeeTariff() *OrderViewMoney {
	if m != nil {
		return m.MerchantRefundFixedFeeTariff
	}
	return nil
}

func (m *OrderViewPublic) GetRefundTaxFee() *OrderViewMoney {
	if m != nil {
		return m.RefundTaxFee
	}
	return nil
}

func (m *OrderViewPublic) GetRefundTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if m != nil {
		return m.RefundTaxFeeCurrencyExchangeFee
	}
	return nil
}

func (m *OrderViewPublic) GetPaysuperRefundTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if m != nil {
		return m.PaysuperRefundTaxFeeCurrencyExchangeFee
	}
	return nil
}

func (m *OrderViewPublic) GetRefundReverseRevenue() *OrderViewMoney {
	if m != nil {
		return m.RefundReverseRevenue
	}
	return nil
}

func (m *OrderViewPublic) GetRefundFeesTotal() *OrderViewMoney {
	if m != nil {
		return m.RefundFeesTotal
	}
	return nil
}

func (m *OrderViewPublic) GetRefundFeesTotalLocal() *OrderViewMoney {
	if m != nil {
		return m.RefundFeesTotalLocal
	}
	return nil
}

func (m *OrderViewPublic) GetIssuer() *OrderIssuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *OrderViewPublic) GetItems() []*OrderItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *OrderViewPublic) GetMerchantPayoutCurrency() string {
	if m != nil {
		return m.MerchantPayoutCurrency
	}
	return ""
}

func (m *OrderViewPublic) GetParentOrder() *ParentOrder {
	if m != nil {
		return m.ParentOrder
	}
	return nil
}

func (m *OrderViewPublic) GetRefund() *OrderNotificationRefund {
	if m != nil {
		return m.Refund
	}
	return nil
}

func (m *OrderViewPublic) GetCancellation() *OrderNotificationCancellation {
	if m != nil {
		return m.Cancellation
	}
	return nil
}

func (m *OrderViewPublic) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

func (m *OrderViewPublic) GetRefundAllowed() bool {
	if m != nil {
		return m.RefundAllowed
	}
	return false
}

func (m *OrderViewPublic) GetOrderCharge() *OrderViewMoney {
	if m != nil {
		return m.OrderCharge
	}
	return nil
}

func (m *OrderViewPublic) GetPaymentIpCountry() string {
	if m != nil {
		return m.PaymentIpCountry
	}
	return ""
}

func (m *OrderViewPublic) GetIsIpCountryMismatchBin() bool {
	if m != nil {
		return m.IsIpCountryMismatchBin
	}
	return false
}

func (m *OrderViewPublic) GetBillingCountryChangedByUser() bool {
	if m != nil {
		return m.BillingCountryChangedByUser
	}
	return false
}

func (m *OrderViewPublic) GetVatPayer() string {
	if m != nil {
		return m.VatPayer
	}
	return ""
}

func (m *OrderViewPublic) GetIsProduction() bool {
	if m != nil {
		return m.IsProduction
	}
	return false
}

type OrderViewPrivate struct {
	// @inject_tag: json:"-" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"-" bson:"_id"`
	// @inject_tag: json:"uuid" bson:"uuid"
	Uuid string `protobuf:"bytes,2,opt,name=uuid" json:"uuid" bson:"uuid"`
	// @inject_tag: json:"total_payment_amount" bson:"total_payment_amount"
	TotalPaymentAmount float64 `protobuf:"fixed64,3,opt,name=total_payment_amount,json=totalPaymentAmount" json:"total_payment_amount" bson:"total_payment_amount"`
	// @inject_tag: json:"currency" bson:"currency"
	Currency string `protobuf:"bytes,4,opt,name=currency" json:"currency" bson:"currency"`
	// @inject_tag: json:"project" bson:"project"
	Project *ProjectOrder `protobuf:"bytes,5,opt,name=project" json:"project" bson:"project"`
	// @inject_tag: json:"created_at" bson:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at" bson:"created_at"`
	// @inject_tag: json:"transaction" bson:"pm_order_id"
	Transaction string `protobuf:"bytes,7,opt,name=transaction" json:"transaction" bson:"pm_order_id"`
	// @inject_tag: json:"payment_method" bson:"payment_method"
	PaymentMethod *PaymentMethodOrder `protobuf:"bytes,8,opt,name=payment_method,json=paymentMethod" json:"payment_method" bson:"payment_method"`
	// @inject_tag: json:"country_code" bson:"country_code"
	CountryCode string `protobuf:"bytes,9,opt,name=country_code,json=countryCode" json:"country_code" bson:"country_code"`
	// @inject_tag: json:"merchant_id" bson:"merchant_id"
	MerchantId string `protobuf:"bytes,10,opt,name=merchant_id,json=merchantId" json:"merchant_id" bson:"merchant_id"`
	// @inject_tag: json:"locale" bson:"locale"
	Locale string `protobuf:"bytes,11,opt,name=locale" json:"locale" bson:"locale"`
	// @inject_tag: json:"status" bson:"status"
	Status string `protobuf:"bytes,12,opt,name=status" json:"status" bson:"status"`
	// @inject_tag: json:"transaction_date" bson:"pm_order_close_date"
	TransactionDate *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=transaction_date,json=transactionDate" json:"transaction_date" bson:"pm_order_close_date"`
	// @inject_tag: json:"user" bson:"user"
	User *OrderUser `protobuf:"bytes,14,opt,name=user" json:"user" bson:"user"`
	// @inject_tag: json:"billing_address" bson:"billing_address"
	BillingAddress *OrderBillingAddress `protobuf:"bytes,15,opt,name=billing_address,json=billingAddress" json:"billing_address" bson:"billing_address"`
	// @inject_tag: json:"type" bson:"type"
	Type string `protobuf:"bytes,16,opt,name=type" json:"type" bson:"type"`
	// @inject_tag: json:"is_vat_deduction" bson:"is_vat_deduction"
	IsVatDeduction bool `protobuf:"varint,17,opt,name=is_vat_deduction,json=isVatDeduction" json:"is_vat_deduction" bson:"is_vat_deduction"`
	// @inject_tag: json:"payment_gross_revenue_local" bson:"payment_gross_revenue_local"
	PaymentGrossRevenueLocal *OrderViewMoney `protobuf:"bytes,18,opt,name=payment_gross_revenue_local,json=paymentGrossRevenueLocal" json:"payment_gross_revenue_local" bson:"payment_gross_revenue_local"`
	// @inject_tag: json:"payment_gross_revenue_origin" bson:"payment_gross_revenue_origin"
	PaymentGrossRevenueOrigin *OrderViewMoney `protobuf:"bytes,19,opt,name=payment_gross_revenue_origin,json=paymentGrossRevenueOrigin" json:"payment_gross_revenue_origin" bson:"payment_gross_revenue_origin"`
	// @inject_tag: json:"payment_gross_revenue" bson:"payment_gross_revenue"
	PaymentGrossRevenue *OrderViewMoney `protobuf:"bytes,20,opt,name=payment_gross_revenue,json=paymentGrossRevenue" json:"payment_gross_revenue" bson:"payment_gross_revenue"`
	// @inject_tag: json:"payment_tax_fee" bson:"payment_tax_fee"
	PaymentTaxFee *OrderViewMoney `protobuf:"bytes,21,opt,name=payment_tax_fee,json=paymentTaxFee" json:"payment_tax_fee" bson:"payment_tax_fee"`
	// @inject_tag: json:"payment_tax_fee_local" bson:"payment_tax_fee_local"
	PaymentTaxFeeLocal *OrderViewMoney `protobuf:"bytes,22,opt,name=payment_tax_fee_local,json=paymentTaxFeeLocal" json:"payment_tax_fee_local" bson:"payment_tax_fee_local"`
	// @inject_tag: json:"payment_tax_fee_origin" bson:"payment_tax_fee_origin"
	PaymentTaxFeeOrigin *OrderViewMoney `protobuf:"bytes,23,opt,name=payment_tax_fee_origin,json=paymentTaxFeeOrigin" json:"payment_tax_fee_origin" bson:"payment_tax_fee_origin"`
	// @inject_tag: json:"payment_tax_fee_currency_exchange_fee" bson:"payment_tax_fee_currency_exchange_fee"
	PaymentTaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,24,opt,name=payment_tax_fee_currency_exchange_fee,json=paymentTaxFeeCurrencyExchangeFee" json:"payment_tax_fee_currency_exchange_fee" bson:"payment_tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"payment_tax_fee_total" bson:"payment_tax_fee_total"
	PaymentTaxFeeTotal *OrderViewMoney `protobuf:"bytes,25,opt,name=payment_tax_fee_total,json=paymentTaxFeeTotal" json:"payment_tax_fee_total" bson:"payment_tax_fee_total"`
	// @inject_tag: json:"payment_gross_revenue_fx" bson:"payment_gross_revenue_fx"
	PaymentGrossRevenueFx *OrderViewMoney `protobuf:"bytes,26,opt,name=payment_gross_revenue_fx,json=paymentGrossRevenueFx" json:"payment_gross_revenue_fx" bson:"payment_gross_revenue_fx"`
	// @inject_tag: json:"payment_gross_revenue_fx_tax_fee" bson:"payment_gross_revenue_fx_tax_fee"
	PaymentGrossRevenueFxTaxFee *OrderViewMoney `protobuf:"bytes,27,opt,name=payment_gross_revenue_fx_tax_fee,json=paymentGrossRevenueFxTaxFee" json:"payment_gross_revenue_fx_tax_fee" bson:"payment_gross_revenue_fx_tax_fee"`
	// @inject_tag: json:"payment_gross_revenue_fx_profit" bson:"payment_gross_revenue_fx_profit"
	PaymentGrossRevenueFxProfit *OrderViewMoney `protobuf:"bytes,28,opt,name=payment_gross_revenue_fx_profit,json=paymentGrossRevenueFxProfit" json:"payment_gross_revenue_fx_profit" bson:"payment_gross_revenue_fx_profit"`
	// @inject_tag: json:"gross_revenue" bson:"gross_revenue"
	GrossRevenue *OrderViewMoney `protobuf:"bytes,29,opt,name=gross_revenue,json=grossRevenue" json:"gross_revenue" bson:"gross_revenue"`
	// @inject_tag: json:"tax_fee" bson:"tax_fee"
	TaxFee *OrderViewMoney `protobuf:"bytes,30,opt,name=tax_fee,json=taxFee" json:"tax_fee" bson:"tax_fee"`
	// @inject_tag: json:"tax_fee_currency_exchange_fee" bson:"tax_fee_currency_exchange_fee"
	TaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,31,opt,name=tax_fee_currency_exchange_fee,json=taxFeeCurrencyExchangeFee" json:"tax_fee_currency_exchange_fee" bson:"tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"tax_fee_total" bson:"tax_fee_total"
	TaxFeeTotal *OrderViewMoney `protobuf:"bytes,32,opt,name=tax_fee_total,json=taxFeeTotal" json:"tax_fee_total" bson:"tax_fee_total"`
	// @inject_tag: json:"method_fee_total" bson:"method_fee_total"
	MethodFeeTotal *OrderViewMoney `protobuf:"bytes,33,opt,name=method_fee_total,json=methodFeeTotal" json:"method_fee_total" bson:"method_fee_total"`
	// @inject_tag: json:"method_fee_tariff" bson:"method_fee_tariff"
	MethodFeeTariff *OrderViewMoney `protobuf:"bytes,34,opt,name=method_fee_tariff,json=methodFeeTariff" json:"method_fee_tariff" bson:"method_fee_tariff"`
	// @inject_tag: json:"paysuper_method_fee_tariff_self_cost" bson:"paysuper_method_fee_tariff_self_cost"
	PaysuperMethodFeeTariffSelfCost *OrderViewMoney `protobuf:"bytes,35,opt,name=paysuper_method_fee_tariff_self_cost,json=paysuperMethodFeeTariffSelfCost" json:"paysuper_method_fee_tariff_self_cost" bson:"paysuper_method_fee_tariff_self_cost"`
	// @inject_tag: json:"paysuper_method_fee_profit" bson:"paysuper_method_fee_profit"
	PaysuperMethodFeeProfit *OrderViewMoney `protobuf:"bytes,36,opt,name=paysuper_method_fee_profit,json=paysuperMethodFeeProfit" json:"paysuper_method_fee_profit" bson:"paysuper_method_fee_profit"`
	// @inject_tag: json:"method_fixed_fee_tariff" bson:"method_fixed_fee_tariff"
	MethodFixedFeeTariff *OrderViewMoney `protobuf:"bytes,37,opt,name=method_fixed_fee_tariff,json=methodFixedFeeTariff" json:"method_fixed_fee_tariff" bson:"method_fixed_fee_tariff"`
	// @inject_tag: json:"paysuper_method_fixed_fee_tariff_fx_profit" bson:"paysuper_method_fixed_fee_tariff_fx_profit"
	PaysuperMethodFixedFeeTariffFxProfit *OrderViewMoney `protobuf:"bytes,38,opt,name=paysuper_method_fixed_fee_tariff_fx_profit,json=paysuperMethodFixedFeeTariffFxProfit" json:"paysuper_method_fixed_fee_tariff_fx_profit" bson:"paysuper_method_fixed_fee_tariff_fx_profit"`
	// @inject_tag: json:"paysuper_method_fixed_fee_tariff_self_cost" bson:"paysuper_method_fixed_fee_tariff_self_cost"
	PaysuperMethodFixedFeeTariffSelfCost *OrderViewMoney `protobuf:"bytes,39,opt,name=paysuper_method_fixed_fee_tariff_self_cost,json=paysuperMethodFixedFeeTariffSelfCost" json:"paysuper_method_fixed_fee_tariff_self_cost" bson:"paysuper_method_fixed_fee_tariff_self_cost"`
	// @inject_tag: json:"paysuper_method_fixed_fee_tariff_total_profit" bson:"paysuper_method_fixed_fee_tariff_total_profit"
	PaysuperMethodFixedFeeTariffTotalProfit *OrderViewMoney `protobuf:"bytes,40,opt,name=paysuper_method_fixed_fee_tariff_total_profit,json=paysuperMethodFixedFeeTariffTotalProfit" json:"paysuper_method_fixed_fee_tariff_total_profit" bson:"paysuper_method_fixed_fee_tariff_total_profit"`
	// @inject_tag: json:"paysuper_fixed_fee" bson:"paysuper_fixed_fee"
	PaysuperFixedFee *OrderViewMoney `protobuf:"bytes,41,opt,name=paysuper_fixed_fee,json=paysuperFixedFee" json:"paysuper_fixed_fee" bson:"paysuper_fixed_fee"`
	// @inject_tag: json:"paysuper_fixed_fee_fx_profit" bson:"paysuper_fixed_fee_fx_profit"
	PaysuperFixedFeeFxProfit *OrderViewMoney `protobuf:"bytes,42,opt,name=paysuper_fixed_fee_fx_profit,json=paysuperFixedFeeFxProfit" json:"paysuper_fixed_fee_fx_profit" bson:"paysuper_fixed_fee_fx_profit"`
	// @inject_tag: json:"fees_total" bson:"fees_total"
	FeesTotal *OrderViewMoney `protobuf:"bytes,43,opt,name=fees_total,json=feesTotal" json:"fees_total" bson:"fees_total"`
	// @inject_tag: json:"fees_total_local" bson:"fees_total_local"
	FeesTotalLocal *OrderViewMoney `protobuf:"bytes,44,opt,name=fees_total_local,json=feesTotalLocal" json:"fees_total_local" bson:"fees_total_local"`
	// @inject_tag: json:"net_revenue" bson:"net_revenue"
	NetRevenue *OrderViewMoney `protobuf:"bytes,45,opt,name=net_revenue,json=netRevenue" json:"net_revenue" bson:"net_revenue"`
	// @inject_tag: json:"paysuper_method_total_profit" bson:"paysuper_method_total_profit"
	PaysuperMethodTotalProfit *OrderViewMoney `protobuf:"bytes,46,opt,name=paysuper_method_total_profit,json=paysuperMethodTotalProfit" json:"paysuper_method_total_profit" bson:"paysuper_method_total_profit"`
	// @inject_tag: json:"paysuper_total_profit" bson:"paysuper_total_profit"
	PaysuperTotalProfit *OrderViewMoney `protobuf:"bytes,47,opt,name=paysuper_total_profit,json=paysuperTotalProfit" json:"paysuper_total_profit" bson:"paysuper_total_profit"`
	// @inject_tag: json:"payment_refund_gross_revenue_local" bson:"payment_refund_gross_revenue_local"
	PaymentRefundGrossRevenueLocal *OrderViewMoney `protobuf:"bytes,48,opt,name=payment_refund_gross_revenue_local,json=paymentRefundGrossRevenueLocal" json:"payment_refund_gross_revenue_local" bson:"payment_refund_gross_revenue_local"`
	// @inject_tag: json:"payment_refund_gross_revenue_origin" bson:"payment_refund_gross_revenue_origin"
	PaymentRefundGrossRevenueOrigin *OrderViewMoney `protobuf:"bytes,49,opt,name=payment_refund_gross_revenue_origin,json=paymentRefundGrossRevenueOrigin" json:"payment_refund_gross_revenue_origin" bson:"payment_refund_gross_revenue_origin"`
	// @inject_tag: json:"payment_refund_gross_revenue" bson:"payment_refund_gross_revenue"
	PaymentRefundGrossRevenue *OrderViewMoney `protobuf:"bytes,50,opt,name=payment_refund_gross_revenue,json=paymentRefundGrossRevenue" json:"payment_refund_gross_revenue" bson:"payment_refund_gross_revenue"`
	// @inject_tag: json:"payment_refund_tax_fee" bson:"payment_refund_tax_fee"
	PaymentRefundTaxFee *OrderViewMoney `protobuf:"bytes,51,opt,name=payment_refund_tax_fee,json=paymentRefundTaxFee" json:"payment_refund_tax_fee" bson:"payment_refund_tax_fee"`
	// @inject_tag: json:"payment_refund_tax_fee_local" bson:"payment_refund_tax_fee_local"
	PaymentRefundTaxFeeLocal *OrderViewMoney `protobuf:"bytes,52,opt,name=payment_refund_tax_fee_local,json=paymentRefundTaxFeeLocal" json:"payment_refund_tax_fee_local" bson:"payment_refund_tax_fee_local"`
	// @inject_tag: json:"payment_refund_tax_fee_origin" bson:"payment_refund_tax_fee_origin"
	PaymentRefundTaxFeeOrigin *OrderViewMoney `protobuf:"bytes,53,opt,name=payment_refund_tax_fee_origin,json=paymentRefundTaxFeeOrigin" json:"payment_refund_tax_fee_origin" bson:"payment_refund_tax_fee_origin"`
	// @inject_tag: json:"payment_refund_fee_tariff" bson:"payment_refund_fee_tariff"
	PaymentRefundFeeTariff *OrderViewMoney `protobuf:"bytes,54,opt,name=payment_refund_fee_tariff,json=paymentRefundFeeTariff" json:"payment_refund_fee_tariff" bson:"payment_refund_fee_tariff"`
	// @inject_tag: json:"method_refund_fixed_fee_tariff" bson:"method_refund_fixed_fee_tariff"
	MethodRefundFixedFeeTariff *OrderViewMoney `protobuf:"bytes,55,opt,name=method_refund_fixed_fee_tariff,json=methodRefundFixedFeeTariff" json:"method_refund_fixed_fee_tariff" bson:"method_refund_fixed_fee_tariff"`
	// @inject_tag: json:"refund_gross_revenue" bson:"refund_gross_revenue"
	RefundGrossRevenue *OrderViewMoney `protobuf:"bytes,56,opt,name=refund_gross_revenue,json=refundGrossRevenue" json:"refund_gross_revenue" bson:"refund_gross_revenue"`
	// @inject_tag: json:"refund_gross_revenue_fx" bson:"refund_gross_revenue_fx"
	RefundGrossRevenueFx *OrderViewMoney `protobuf:"bytes,57,opt,name=refund_gross_revenue_fx,json=refundGrossRevenueFx" json:"refund_gross_revenue_fx" bson:"refund_gross_revenue_fx"`
	// @inject_tag: json:"method_refund_fee_tariff" bson:"method_refund_fee_tariff"
	MethodRefundFeeTariff *OrderViewMoney `protobuf:"bytes,58,opt,name=method_refund_fee_tariff,json=methodRefundFeeTariff" json:"method_refund_fee_tariff" bson:"method_refund_fee_tariff"`
	// @inject_tag: json:"paysuper_method_refund_fee_tariff_profit" bson:"paysuper_method_refund_fee_tariff_profit"
	PaysuperMethodRefundFeeTariffProfit *OrderViewMoney `protobuf:"bytes,59,opt,name=paysuper_method_refund_fee_tariff_profit,json=paysuperMethodRefundFeeTariffProfit" json:"paysuper_method_refund_fee_tariff_profit" bson:"paysuper_method_refund_fee_tariff_profit"`
	// @inject_tag: json:"paysuper_method_refund_fixed_fee_tariff_self_cost" bson:"paysuper_method_refund_fixed_fee_tariff_self_cost"
	PaysuperMethodRefundFixedFeeTariffSelfCost *OrderViewMoney `protobuf:"bytes,60,opt,name=paysuper_method_refund_fixed_fee_tariff_self_cost,json=paysuperMethodRefundFixedFeeTariffSelfCost" json:"paysuper_method_refund_fixed_fee_tariff_self_cost" bson:"paysuper_method_refund_fixed_fee_tariff_self_cost"`
	// @inject_tag: json:"merchant_refund_fixed_fee_tariff" bson:"merchant_refund_fixed_fee_tariff"
	MerchantRefundFixedFeeTariff *OrderViewMoney `protobuf:"bytes,61,opt,name=merchant_refund_fixed_fee_tariff,json=merchantRefundFixedFeeTariff" json:"merchant_refund_fixed_fee_tariff" bson:"merchant_refund_fixed_fee_tariff"`
	// @inject_tag: json:"paysuper_method_refund_fixed_fee_tariff_profit" bson:"paysuper_method_refund_fixed_fee_tariff_profit"
	PaysuperMethodRefundFixedFeeTariffProfit *OrderViewMoney `protobuf:"bytes,62,opt,name=paysuper_method_refund_fixed_fee_tariff_profit,json=paysuperMethodRefundFixedFeeTariffProfit" json:"paysuper_method_refund_fixed_fee_tariff_profit" bson:"paysuper_method_refund_fixed_fee_tariff_profit"`
	// @inject_tag: json:"refund_tax_fee" bson:"refund_tax_fee"
	RefundTaxFee *OrderViewMoney `protobuf:"bytes,63,opt,name=refund_tax_fee,json=refundTaxFee" json:"refund_tax_fee" bson:"refund_tax_fee"`
	// @inject_tag: json:"refund_tax_fee_currency_exchange_fee" bson:"refund_tax_fee_currency_exchange_fee"
	RefundTaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,64,opt,name=refund_tax_fee_currency_exchange_fee,json=refundTaxFeeCurrencyExchangeFee" json:"refund_tax_fee_currency_exchange_fee" bson:"refund_tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"paysuper_refund_tax_fee_currency_exchange_fee" bson:"paysuper_refund_tax_fee_currency_exchange_fee"
	PaysuperRefundTaxFeeCurrencyExchangeFee *OrderViewMoney `protobuf:"bytes,65,opt,name=paysuper_refund_tax_fee_currency_exchange_fee,json=paysuperRefundTaxFeeCurrencyExchangeFee" json:"paysuper_refund_tax_fee_currency_exchange_fee" bson:"paysuper_refund_tax_fee_currency_exchange_fee"`
	// @inject_tag: json:"refund_tax_fee_total" bson:"refund_tax_fee_total"
	RefundTaxFeeTotal *OrderViewMoney `protobuf:"bytes,66,opt,name=refund_tax_fee_total,json=refundTaxFeeTotal" json:"refund_tax_fee_total" bson:"refund_tax_fee_total"`
	// @inject_tag: json:"refund_reverse_revenue" bson:"refund_reverse_revenue"
	RefundReverseRevenue *OrderViewMoney `protobuf:"bytes,67,opt,name=refund_reverse_revenue,json=refundReverseRevenue" json:"refund_reverse_revenue" bson:"refund_reverse_revenue"`
	// @inject_tag: json:"refund_fees_total" bson:"refund_fees_total"
	RefundFeesTotal *OrderViewMoney `protobuf:"bytes,68,opt,name=refund_fees_total,json=refundFeesTotal" json:"refund_fees_total" bson:"refund_fees_total"`
	// @inject_tag: json:"refund_fees_total_local" bson:"refund_fees_total_local"
	RefundFeesTotalLocal *OrderViewMoney `protobuf:"bytes,69,opt,name=refund_fees_total_local,json=refundFeesTotalLocal" json:"refund_fees_total_local" bson:"refund_fees_total_local"`
	// @inject_tag: json:"paysuper_refund_total_profit" bson:"paysuper_refund_total_profit"
	PaysuperRefundTotalProfit *OrderViewMoney `protobuf:"bytes,70,opt,name=paysuper_refund_total_profit,json=paysuperRefundTotalProfit" json:"paysuper_refund_total_profit" bson:"paysuper_refund_total_profit"`
	// @inject_tag: json:"issuer" bson:"issuer"
	Issuer *OrderIssuer `protobuf:"bytes,71,opt,name=issuer" json:"issuer" bson:"issuer"`
	// @inject_tag: json:"items" bson:"items"
	Items []*OrderItem `protobuf:"bytes,72,rep,name=items" json:"items" bson:"items"`
	// @inject_tag: json:"merchant_payout_currency" bson:"merchant_payout_currency"
	MerchantPayoutCurrency string `protobuf:"bytes,73,opt,name=merchant_payout_currency,json=merchantPayoutCurrency" json:"merchant_payout_currency" bson:"merchant_payout_currency"`
	// @inject_tag: json:"parent_order" bson:"parent_order"
	ParentOrder *ParentOrder `protobuf:"bytes,74,opt,name=parent_order,json=parentOrder" json:"parent_order" bson:"parent_order"`
	// @inject_tag: json:"refund" bson:"refund"
	Refund *OrderNotificationRefund `protobuf:"bytes,75,opt,name=refund" json:"refund" bson:"refund"`
	// @inject_tag: json:"cancellation" bson:"cancellation"
	Cancellation *OrderNotificationCancellation `protobuf:"bytes,76,opt,name=cancellation" json:"cancellation" bson:"cancellation"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	MccCode string `protobuf:"bytes,77,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,78,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id"`
	// @inject_tag: json:"is_high_risk" bson:"is_high_risk"
	IsHighRisk bool `protobuf:"varint,79,opt,name=is_high_risk,json=isHighRisk" json:"is_high_risk" bson:"is_high_risk"`
	// @inject_tag: json:"refund_allowed"  bson:"refund_allowed"
	RefundAllowed bool `protobuf:"varint,80,opt,name=refund_allowed,json=refundAllowed" json:"refund_allowed" bson:"refund_allowed"`
	// @inject_tag: json:"order_charge" bson:"order_charge"
	OrderCharge *OrderViewMoney `protobuf:"bytes,81,opt,name=order_charge,json=orderCharge" json:"order_charge" bson:"order_charge"`
	// @inject_tag: json:"payment_ip_country"
	PaymentIpCountry string `protobuf:"bytes,82,opt,name=payment_ip_country,json=paymentIpCountry" json:"payment_ip_country"`
	// @inject_tag: json:"is_ip_country_mismatch_bin" bson:"is_ip_country_mismatch_bin"
	IsIpCountryMismatchBin bool `protobuf:"varint,83,opt,name=is_ip_country_mismatch_bin,json=isIpCountryMismatchBin" json:"is_ip_country_mismatch_bin" bson:"is_ip_country_mismatch_bin"`
	// @inject_tag: json:"billing_country_changed_by_user" bson:"billing_country_changed_by_user"
	BillingCountryChangedByUser bool `protobuf:"varint,84,opt,name=billing_country_changed_by_user,json=billingCountryChangedByUser" json:"billing_country_changed_by_user" bson:"billing_country_changed_by_user"`
	// @inject_tag: json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"
	VatPayer string `protobuf:"bytes,85,opt,name=vat_payer,json=vatPayer" json:"vat_payer" bson:"vat_payer" validate:"oneof=buyer seller nobody"`
	// @inject_tag: json:"is_production" bson:"is_production"
	IsProduction bool `protobuf:"varint,86,opt,name=is_production,json=isProduction" json:"is_production" bson:"is_production"`
}

func (m *OrderViewPrivate) Reset()                    { *m = OrderViewPrivate{} }
func (m *OrderViewPrivate) String() string            { return proto.CompactTextString(m) }
func (*OrderViewPrivate) ProtoMessage()               {}
func (*OrderViewPrivate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *OrderViewPrivate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderViewPrivate) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *OrderViewPrivate) GetTotalPaymentAmount() float64 {
	if m != nil {
		return m.TotalPaymentAmount
	}
	return 0
}

func (m *OrderViewPrivate) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *OrderViewPrivate) GetProject() *ProjectOrder {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *OrderViewPrivate) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *OrderViewPrivate) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

func (m *OrderViewPrivate) GetPaymentMethod() *PaymentMethodOrder {
	if m != nil {
		return m.PaymentMethod
	}
	return nil
}

func (m *OrderViewPrivate) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *OrderViewPrivate) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *OrderViewPrivate) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *OrderViewPrivate) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *OrderViewPrivate) GetTransactionDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.TransactionDate
	}
	return nil
}

func (m *OrderViewPrivate) GetUser() *OrderUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *OrderViewPrivate) GetBillingAddress() *OrderBillingAddress {
	if m != nil {
		return m.BillingAddress
	}
	return nil
}

func (m *OrderViewPrivate) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *OrderViewPrivate) GetIsVatDeduction() bool {
	if m != nil {
		return m.IsVatDeduction
	}
	return false
}

func (m *OrderViewPrivate) GetPaymentGrossRevenueLocal() *OrderViewMoney {
	if m != nil {
		return m.PaymentGrossRevenueLocal
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentGrossRevenueOrigin() *OrderViewMoney {
	if m != nil {
		return m.PaymentGrossRevenueOrigin
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentGrossRevenue() *OrderViewMoney {
	if m != nil {
		return m.PaymentGrossRevenue
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentTaxFee() *OrderViewMoney {
	if m != nil {
		return m.PaymentTaxFee
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentTaxFeeLocal() *OrderViewMoney {
	if m != nil {
		return m.PaymentTaxFeeLocal
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentTaxFeeOrigin() *OrderViewMoney {
	if m != nil {
		return m.PaymentTaxFeeOrigin
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if m != nil {
		return m.PaymentTaxFeeCurrencyExchangeFee
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentTaxFeeTotal() *OrderViewMoney {
	if m != nil {
		return m.PaymentTaxFeeTotal
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentGrossRevenueFx() *OrderViewMoney {
	if m != nil {
		return m.PaymentGrossRevenueFx
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentGrossRevenueFxTaxFee() *OrderViewMoney {
	if m != nil {
		return m.PaymentGrossRevenueFxTaxFee
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentGrossRevenueFxProfit() *OrderViewMoney {
	if m != nil {
		return m.PaymentGrossRevenueFxProfit
	}
	return nil
}

func (m *OrderViewPrivate) GetGrossRevenue() *OrderViewMoney {
	if m != nil {
		return m.GrossRevenue
	}
	return nil
}

func (m *OrderViewPrivate) GetTaxFee() *OrderViewMoney {
	if m != nil {
		return m.TaxFee
	}
	return nil
}

func (m *OrderViewPrivate) GetTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if m != nil {
		return m.TaxFeeCurrencyExchangeFee
	}
	return nil
}

func (m *OrderViewPrivate) GetTaxFeeTotal() *OrderViewMoney {
	if m != nil {
		return m.TaxFeeTotal
	}
	return nil
}

func (m *OrderViewPrivate) GetMethodFeeTotal() *OrderViewMoney {
	if m != nil {
		return m.MethodFeeTotal
	}
	return nil
}

func (m *OrderViewPrivate) GetMethodFeeTariff() *OrderViewMoney {
	if m != nil {
		return m.MethodFeeTariff
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperMethodFeeTariffSelfCost() *OrderViewMoney {
	if m != nil {
		return m.PaysuperMethodFeeTariffSelfCost
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperMethodFeeProfit() *OrderViewMoney {
	if m != nil {
		return m.PaysuperMethodFeeProfit
	}
	return nil
}

func (m *OrderViewPrivate) GetMethodFixedFeeTariff() *OrderViewMoney {
	if m != nil {
		return m.MethodFixedFeeTariff
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperMethodFixedFeeTariffFxProfit() *OrderViewMoney {
	if m != nil {
		return m.PaysuperMethodFixedFeeTariffFxProfit
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperMethodFixedFeeTariffSelfCost() *OrderViewMoney {
	if m != nil {
		return m.PaysuperMethodFixedFeeTariffSelfCost
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperMethodFixedFeeTariffTotalProfit() *OrderViewMoney {
	if m != nil {
		return m.PaysuperMethodFixedFeeTariffTotalProfit
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperFixedFee() *OrderViewMoney {
	if m != nil {
		return m.PaysuperFixedFee
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperFixedFeeFxProfit() *OrderViewMoney {
	if m != nil {
		return m.PaysuperFixedFeeFxProfit
	}
	return nil
}

func (m *OrderViewPrivate) GetFeesTotal() *OrderViewMoney {
	if m != nil {
		return m.FeesTotal
	}
	return nil
}

func (m *OrderViewPrivate) GetFeesTotalLocal() *OrderViewMoney {
	if m != nil {
		return m.FeesTotalLocal
	}
	return nil
}

func (m *OrderViewPrivate) GetNetRevenue() *OrderViewMoney {
	if m != nil {
		return m.NetRevenue
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperMethodTotalProfit() *OrderViewMoney {
	if m != nil {
		return m.PaysuperMethodTotalProfit
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperTotalProfit() *OrderViewMoney {
	if m != nil {
		return m.PaysuperTotalProfit
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentRefundGrossRevenueLocal() *OrderViewMoney {
	if m != nil {
		return m.PaymentRefundGrossRevenueLocal
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentRefundGrossRevenueOrigin() *OrderViewMoney {
	if m != nil {
		return m.PaymentRefundGrossRevenueOrigin
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentRefundGrossRevenue() *OrderViewMoney {
	if m != nil {
		return m.PaymentRefundGrossRevenue
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentRefundTaxFee() *OrderViewMoney {
	if m != nil {
		return m.PaymentRefundTaxFee
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentRefundTaxFeeLocal() *OrderViewMoney {
	if m != nil {
		return m.PaymentRefundTaxFeeLocal
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentRefundTaxFeeOrigin() *OrderViewMoney {
	if m != nil {
		return m.PaymentRefundTaxFeeOrigin
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentRefundFeeTariff() *OrderViewMoney {
	if m != nil {
		return m.PaymentRefundFeeTariff
	}
	return nil
}

func (m *OrderViewPrivate) GetMethodRefundFixedFeeTariff() *OrderViewMoney {
	if m != nil {
		return m.MethodRefundFixedFeeTariff
	}
	return nil
}

func (m *OrderViewPrivate) GetRefundGrossRevenue() *OrderViewMoney {
	if m != nil {
		return m.RefundGrossRevenue
	}
	return nil
}

func (m *OrderViewPrivate) GetRefundGrossRevenueFx() *OrderViewMoney {
	if m != nil {
		return m.RefundGrossRevenueFx
	}
	return nil
}

func (m *OrderViewPrivate) GetMethodRefundFeeTariff() *OrderViewMoney {
	if m != nil {
		return m.MethodRefundFeeTariff
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperMethodRefundFeeTariffProfit() *OrderViewMoney {
	if m != nil {
		return m.PaysuperMethodRefundFeeTariffProfit
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperMethodRefundFixedFeeTariffSelfCost() *OrderViewMoney {
	if m != nil {
		return m.PaysuperMethodRefundFixedFeeTariffSelfCost
	}
	return nil
}

func (m *OrderViewPrivate) GetMerchantRefundFixedFeeTariff() *OrderViewMoney {
	if m != nil {
		return m.MerchantRefundFixedFeeTariff
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperMethodRefundFixedFeeTariffProfit() *OrderViewMoney {
	if m != nil {
		return m.PaysuperMethodRefundFixedFeeTariffProfit
	}
	return nil
}

func (m *OrderViewPrivate) GetRefundTaxFee() *OrderViewMoney {
	if m != nil {
		return m.RefundTaxFee
	}
	return nil
}

func (m *OrderViewPrivate) GetRefundTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if m != nil {
		return m.RefundTaxFeeCurrencyExchangeFee
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperRefundTaxFeeCurrencyExchangeFee() *OrderViewMoney {
	if m != nil {
		return m.PaysuperRefundTaxFeeCurrencyExchangeFee
	}
	return nil
}

func (m *OrderViewPrivate) GetRefundTaxFeeTotal() *OrderViewMoney {
	if m != nil {
		return m.RefundTaxFeeTotal
	}
	return nil
}

func (m *OrderViewPrivate) GetRefundReverseRevenue() *OrderViewMoney {
	if m != nil {
		return m.RefundReverseRevenue
	}
	return nil
}

func (m *OrderViewPrivate) GetRefundFeesTotal() *OrderViewMoney {
	if m != nil {
		return m.RefundFeesTotal
	}
	return nil
}

func (m *OrderViewPrivate) GetRefundFeesTotalLocal() *OrderViewMoney {
	if m != nil {
		return m.RefundFeesTotalLocal
	}
	return nil
}

func (m *OrderViewPrivate) GetPaysuperRefundTotalProfit() *OrderViewMoney {
	if m != nil {
		return m.PaysuperRefundTotalProfit
	}
	return nil
}

func (m *OrderViewPrivate) GetIssuer() *OrderIssuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *OrderViewPrivate) GetItems() []*OrderItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *OrderViewPrivate) GetMerchantPayoutCurrency() string {
	if m != nil {
		return m.MerchantPayoutCurrency
	}
	return ""
}

func (m *OrderViewPrivate) GetParentOrder() *ParentOrder {
	if m != nil {
		return m.ParentOrder
	}
	return nil
}

func (m *OrderViewPrivate) GetRefund() *OrderNotificationRefund {
	if m != nil {
		return m.Refund
	}
	return nil
}

func (m *OrderViewPrivate) GetCancellation() *OrderNotificationCancellation {
	if m != nil {
		return m.Cancellation
	}
	return nil
}

func (m *OrderViewPrivate) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

func (m *OrderViewPrivate) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

func (m *OrderViewPrivate) GetIsHighRisk() bool {
	if m != nil {
		return m.IsHighRisk
	}
	return false
}

func (m *OrderViewPrivate) GetRefundAllowed() bool {
	if m != nil {
		return m.RefundAllowed
	}
	return false
}

func (m *OrderViewPrivate) GetOrderCharge() *OrderViewMoney {
	if m != nil {
		return m.OrderCharge
	}
	return nil
}

func (m *OrderViewPrivate) GetPaymentIpCountry() string {
	if m != nil {
		return m.PaymentIpCountry
	}
	return ""
}

func (m *OrderViewPrivate) GetIsIpCountryMismatchBin() bool {
	if m != nil {
		return m.IsIpCountryMismatchBin
	}
	return false
}

func (m *OrderViewPrivate) GetBillingCountryChangedByUser() bool {
	if m != nil {
		return m.BillingCountryChangedByUser
	}
	return false
}

func (m *OrderViewPrivate) GetVatPayer() string {
	if m != nil {
		return m.VatPayer
	}
	return ""
}

func (m *OrderViewPrivate) GetIsProduction() bool {
	if m != nil {
		return m.IsProduction
	}
	return false
}

type RecommendedPrice struct {
	// @inject_tag: json:"region"
	Region string `protobuf:"bytes,1,opt,name=region" json:"region"`
	// @inject_tag: json:"currency"
	Currency string `protobuf:"bytes,2,opt,name=currency" json:"currency"`
	// @inject_tag: json:"amount"
	Amount float64 `protobuf:"fixed64,3,opt,name=amount" json:"amount"`
}

func (m *RecommendedPrice) Reset()                    { *m = RecommendedPrice{} }
func (m *RecommendedPrice) String() string            { return proto.CompactTextString(m) }
func (*RecommendedPrice) ProtoMessage()               {}
func (*RecommendedPrice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

func (m *RecommendedPrice) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *RecommendedPrice) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *RecommendedPrice) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type PriceTable struct {
	// @inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"currency" bson:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,2,opt,name=currency" json:"currency" bson:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"ranges"
	Ranges []*PriceTableRange `protobuf:"bytes,3,rep,name=ranges" json:"ranges"`
}

func (m *PriceTable) Reset()                    { *m = PriceTable{} }
func (m *PriceTable) String() string            { return proto.CompactTextString(m) }
func (*PriceTable) ProtoMessage()               {}
func (*PriceTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *PriceTable) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PriceTable) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PriceTable) GetRanges() []*PriceTableRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

type PriceTableRange struct {
	// @inject_tag: json:"position" bson:"position"
	Position int32 `protobuf:"varint,1,opt,name=position" json:"position" bson:"position"`
	// @inject_tag: json:"from"
	From float64 `protobuf:"fixed64,3,opt,name=from" json:"from"`
	// @inject_tag: json:"to"
	To float64 `protobuf:"fixed64,4,opt,name=to" json:"to"`
}

func (m *PriceTableRange) Reset()                    { *m = PriceTableRange{} }
func (m *PriceTableRange) String() string            { return proto.CompactTextString(m) }
func (*PriceTableRange) ProtoMessage()               {}
func (*PriceTableRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *PriceTableRange) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *PriceTableRange) GetFrom() float64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *PriceTableRange) GetTo() float64 {
	if m != nil {
		return m.To
	}
	return 0
}

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RangeInt struct {
	// @inject_tag: json:"from"
	From int32 `protobuf:"varint,1,opt,name=from" json:"from"`
	// @inject_tag: json:"to"
	To int32 `protobuf:"varint,2,opt,name=to" json:"to"`
}

func (m *RangeInt) Reset()                    { *m = RangeInt{} }
func (m *RangeInt) String() string            { return proto.CompactTextString(m) }
func (*RangeInt) ProtoMessage()               {}
func (*RangeInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

func (m *RangeInt) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *RangeInt) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

type MerchantTariffRatesPayment struct {
	// @inject_tag: json:"min_amount" bson:"min_amount"
	MinAmount float64 `protobuf:"fixed64,1,opt,name=min_amount,json=minAmount" json:"min_amount" bson:"min_amount"`
	// @inject_tag: json:"max_amount" bson:"max_amount"
	MaxAmount float64 `protobuf:"fixed64,2,opt,name=max_amount,json=maxAmount" json:"max_amount" bson:"max_amount"`
	// @inject_tag: json:"method_name" bson:"method_name"
	MethodName string `protobuf:"bytes,3,opt,name=method_name,json=methodName" json:"method_name" bson:"method_name"`
	// @inject_tag: json:"method_percent_fee" bson:"method_percent_fee"
	MethodPercentFee float64 `protobuf:"fixed64,4,opt,name=method_percent_fee,json=methodPercentFee" json:"method_percent_fee" bson:"method_percent_fee"`
	// @inject_tag: json:"method_fixed_fee" bson:"method_fixed_fee"
	MethodFixedFee float64 `protobuf:"fixed64,5,opt,name=method_fixed_fee,json=methodFixedFee" json:"method_fixed_fee" bson:"method_fixed_fee"`
	// @inject_tag: json:"method_fixed_fee_currency" bson:"method_fixed_fee_currency"
	MethodFixedFeeCurrency string `protobuf:"bytes,6,opt,name=method_fixed_fee_currency,json=methodFixedFeeCurrency" json:"method_fixed_fee_currency" bson:"method_fixed_fee_currency"`
	// @inject_tag: json:"ps_percent_fee" bson:"ps_percent_fee"
	PsPercentFee float64 `protobuf:"fixed64,7,opt,name=ps_percent_fee,json=psPercentFee" json:"ps_percent_fee" bson:"ps_percent_fee"`
	// @inject_tag: json:"ps_fixed_fee" bson:"ps_fixed_fee"
	PsFixedFee float64 `protobuf:"fixed64,8,opt,name=ps_fixed_fee,json=psFixedFee" json:"ps_fixed_fee" bson:"ps_fixed_fee"`
	// @inject_tag: json:"ps_fixed_fee_currency" bson:"ps_fixed_fee_currency"
	PsFixedFeeCurrency string `protobuf:"bytes,9,opt,name=ps_fixed_fee_currency,json=psFixedFeeCurrency" json:"ps_fixed_fee_currency" bson:"ps_fixed_fee_currency"`
	// @inject_tag: json:"merchant_home_region" bson:"merchant_home_region"
	MerchantHomeRegion string `protobuf:"bytes,10,opt,name=merchant_home_region,json=merchantHomeRegion" json:"merchant_home_region" bson:"merchant_home_region"`
	// @inject_tag: json:"payer_region" bson:"payer_region"
	PayerRegion string `protobuf:"bytes,11,opt,name=payer_region,json=payerRegion" json:"payer_region" bson:"payer_region"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	MccCode string `protobuf:"bytes,12,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code"`
	// @inject_tag: json:"is_active" bson:"is_active"
	IsActive bool `protobuf:"varint,13,opt,name=is_active,json=isActive" json:"is_active" bson:"is_active"`
}

func (m *MerchantTariffRatesPayment) Reset()                    { *m = MerchantTariffRatesPayment{} }
func (m *MerchantTariffRatesPayment) String() string            { return proto.CompactTextString(m) }
func (*MerchantTariffRatesPayment) ProtoMessage()               {}
func (*MerchantTariffRatesPayment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *MerchantTariffRatesPayment) GetMinAmount() float64 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

func (m *MerchantTariffRatesPayment) GetMaxAmount() float64 {
	if m != nil {
		return m.MaxAmount
	}
	return 0
}

func (m *MerchantTariffRatesPayment) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *MerchantTariffRatesPayment) GetMethodPercentFee() float64 {
	if m != nil {
		return m.MethodPercentFee
	}
	return 0
}

func (m *MerchantTariffRatesPayment) GetMethodFixedFee() float64 {
	if m != nil {
		return m.MethodFixedFee
	}
	return 0
}

func (m *MerchantTariffRatesPayment) GetMethodFixedFeeCurrency() string {
	if m != nil {
		return m.MethodFixedFeeCurrency
	}
	return ""
}

func (m *MerchantTariffRatesPayment) GetPsPercentFee() float64 {
	if m != nil {
		return m.PsPercentFee
	}
	return 0
}

func (m *MerchantTariffRatesPayment) GetPsFixedFee() float64 {
	if m != nil {
		return m.PsFixedFee
	}
	return 0
}

func (m *MerchantTariffRatesPayment) GetPsFixedFeeCurrency() string {
	if m != nil {
		return m.PsFixedFeeCurrency
	}
	return ""
}

func (m *MerchantTariffRatesPayment) GetMerchantHomeRegion() string {
	if m != nil {
		return m.MerchantHomeRegion
	}
	return ""
}

func (m *MerchantTariffRatesPayment) GetPayerRegion() string {
	if m != nil {
		return m.PayerRegion
	}
	return ""
}

func (m *MerchantTariffRatesPayment) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

func (m *MerchantTariffRatesPayment) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type MerchantTariffRatesSettingsItem struct {
	// @inject_tag: json:"method_name" bson:"method_name"
	MethodName string `protobuf:"bytes,1,opt,name=method_name,json=methodName" json:"method_name" bson:"method_name"`
	// @inject_tag: json:"method_percent_fee" bson:"method_percent_fee"
	MethodPercentFee float64 `protobuf:"fixed64,2,opt,name=method_percent_fee,json=methodPercentFee" json:"method_percent_fee" bson:"method_percent_fee"`
	// @inject_tag: json:"method_fixed_fee" bson:"method_fixed_fee"
	MethodFixedFee float64 `protobuf:"fixed64,3,opt,name=method_fixed_fee,json=methodFixedFee" json:"method_fixed_fee" bson:"method_fixed_fee"`
	// @inject_tag: json:"method_fixed_fee_currency" bson:"method_fixed_fee_currency"
	MethodFixedFeeCurrency string `protobuf:"bytes,4,opt,name=method_fixed_fee_currency,json=methodFixedFeeCurrency" json:"method_fixed_fee_currency" bson:"method_fixed_fee_currency"`
	// @inject_tag: json:"is_paid_by_merchant" bson:"is_paid_by_merchant"
	IsPaidByMerchant bool `protobuf:"varint,5,opt,name=is_paid_by_merchant,json=isPaidByMerchant" json:"is_paid_by_merchant" bson:"is_paid_by_merchant"`
}

func (m *MerchantTariffRatesSettingsItem) Reset()         { *m = MerchantTariffRatesSettingsItem{} }
func (m *MerchantTariffRatesSettingsItem) String() string { return proto.CompactTextString(m) }
func (*MerchantTariffRatesSettingsItem) ProtoMessage()    {}
func (*MerchantTariffRatesSettingsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{110}
}

func (m *MerchantTariffRatesSettingsItem) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *MerchantTariffRatesSettingsItem) GetMethodPercentFee() float64 {
	if m != nil {
		return m.MethodPercentFee
	}
	return 0
}

func (m *MerchantTariffRatesSettingsItem) GetMethodFixedFee() float64 {
	if m != nil {
		return m.MethodFixedFee
	}
	return 0
}

func (m *MerchantTariffRatesSettingsItem) GetMethodFixedFeeCurrency() string {
	if m != nil {
		return m.MethodFixedFeeCurrency
	}
	return ""
}

func (m *MerchantTariffRatesSettingsItem) GetIsPaidByMerchant() bool {
	if m != nil {
		return m.IsPaidByMerchant
	}
	return false
}

type MerchantTariffRatesSettings struct {
	// @inject_tag: json:"refund" bson:"refund"
	Refund []*MerchantTariffRatesSettingsItem `protobuf:"bytes,1,rep,name=refund" json:"refund" bson:"refund"`
	// @inject_tag: json:"chargeback" bson:"chargeback"
	Chargeback []*MerchantTariffRatesSettingsItem `protobuf:"bytes,2,rep,name=chargeback" json:"chargeback" bson:"chargeback"`
	// @inject_tag: json:"payout" bson:"payout"
	Payout map[string]*MerchantTariffRatesSettingsItem `protobuf:"bytes,3,rep,name=payout" json:"payout" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" bson:"payout"`
	// @inject_tag: json:"minimal_payout" bson:"minimal_payout"
	MinimalPayout map[string]float32 `protobuf:"bytes,4,rep,name=minimal_payout,json=minimalPayout" json:"minimal_payout" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value" bson:"minimal_payout"`
	// @inject_tag: json:"mcc_code" bson:"mcc_code"
	MccCode string `protobuf:"bytes,5,opt,name=mcc_code,json=mccCode" json:"mcc_code" bson:"mcc_code"`
}

func (m *MerchantTariffRatesSettings) Reset()                    { *m = MerchantTariffRatesSettings{} }
func (m *MerchantTariffRatesSettings) String() string            { return proto.CompactTextString(m) }
func (*MerchantTariffRatesSettings) ProtoMessage()               {}
func (*MerchantTariffRatesSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{111} }

func (m *MerchantTariffRatesSettings) GetRefund() []*MerchantTariffRatesSettingsItem {
	if m != nil {
		return m.Refund
	}
	return nil
}

func (m *MerchantTariffRatesSettings) GetChargeback() []*MerchantTariffRatesSettingsItem {
	if m != nil {
		return m.Chargeback
	}
	return nil
}

func (m *MerchantTariffRatesSettings) GetPayout() map[string]*MerchantTariffRatesSettingsItem {
	if m != nil {
		return m.Payout
	}
	return nil
}

func (m *MerchantTariffRatesSettings) GetMinimalPayout() map[string]float32 {
	if m != nil {
		return m.MinimalPayout
	}
	return nil
}

func (m *MerchantTariffRatesSettings) GetMccCode() string {
	if m != nil {
		return m.MccCode
	}
	return ""
}

type Key struct {
	// @inject_tag: json:"id" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id"`
	// @inject_tag: json:"code" validate:"required,max=50"
	Code string `protobuf:"bytes,2,opt,name=code" json:"code" validate:"required,max=50"`
	// @inject_tag: validate:"required,hexadecimal,len=24"
	KeyProductId string `protobuf:"bytes,3,opt,name=key_product_id,json=keyProductId" json:"key_product_id,omitempty" validate:"required,hexadecimal,len=24"`
	// @inject_tag: validate:"required,max=255"
	PlatformId string `protobuf:"bytes,5,opt,name=platform_id,json=platformId" json:"platform_id,omitempty" validate:"required,max=255"`
	// @inject_tag: validate:"omitempty,hexadecimal,len=24"
	OrderId   string                     `protobuf:"bytes,6,opt,name=order_id,json=orderId" json:"order_id,omitempty" validate:"omitempty,hexadecimal,len=24"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// @inject_tag: validate:"omitempty"
	ReservedTo *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=reserved_to,json=reservedTo" json:"reserved_to,omitempty" validate:"omitempty"`
	// @inject_tag: validate:"omitempty"
	RedeemedAt *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=redeemed_at,json=redeemedAt" json:"redeemed_at,omitempty" validate:"omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *Key) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Key) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Key) GetKeyProductId() string {
	if m != nil {
		return m.KeyProductId
	}
	return ""
}

func (m *Key) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *Key) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *Key) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Key) GetReservedTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.ReservedTo
	}
	return nil
}

func (m *Key) GetRedeemedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.RedeemedAt
	}
	return nil
}

type PayoutDocument struct {
	// @inject_tag: json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"merchant_id" bson:"merchant_id" validate:"omitempty,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId" json:"merchant_id" bson:"merchant_id" validate:"omitempty,hexadecimal,len=24"`
	// @inject_tag: json:"source_id"
	SourceId []string `protobuf:"bytes,3,rep,name=source_id,json=sourceId" json:"source_id"`
	// @inject_tag: json:"total_fees" validate:"numeric,gte=0"
	TotalFees float64 `protobuf:"fixed64,4,opt,name=total_fees,json=totalFees" json:"total_fees" validate:"numeric,gte=0"`
	// @inject_tag: json:"balance" validate:"numeric,gte=0"
	Balance float64 `protobuf:"fixed64,5,opt,name=balance" json:"balance" validate:"numeric,gte=0"`
	// @inject_tag: json:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,6,opt,name=currency" json:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"period_from"
	PeriodFrom *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=period_from,json=periodFrom" json:"period_from"`
	// @inject_tag: json:"period_to"
	PeriodTo *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=period_to,json=periodTo" json:"period_to"`
	// @inject_tag: json:"total_transactions"
	TotalTransactions int32 `protobuf:"varint,9,opt,name=total_transactions,json=totalTransactions" json:"total_transactions"`
	// @inject_tag: json:"description" validate:"omitempty,max=255"
	Description string `protobuf:"bytes,10,opt,name=description" json:"description" validate:"omitempty,max=255"`
	// @inject_tag: json:"destination" validate:"max=255"
	Destination *MerchantBanking `protobuf:"bytes,11,opt,name=destination" json:"destination" validate:"max=255"`
	// @inject_tag: json:"merchant_agreement_number" validate:"max=255"
	MerchantAgreementNumber string `protobuf:"bytes,12,opt,name=merchant_agreement_number,json=merchantAgreementNumber" json:"merchant_agreement_number" validate:"max=255"`
	// @inject_tag: json:"company"
	Company *MerchantCompanyInfo `protobuf:"bytes,13,opt,name=company" json:"company"`
	// @inject_tag: json:"status" validate:"required,oneof=skip pending in_progress paid canceled failed"
	Status string `protobuf:"bytes,14,opt,name=status" json:"status" validate:"required,oneof=skip pending in_progress paid canceled failed"`
	// @inject_tag: json:"transaction" validate:"max=255"
	Transaction string `protobuf:"bytes,15,opt,name=transaction" json:"transaction" validate:"max=255"`
	// @inject_tag: json:"failure_code" validate:"omitempty,oneof=account_closed account_frozen account_restricted destination_bank_invalid could_not_process declined insufficient_funds invalid_account_number incorrect_account_holder_name invalid_currency"
	FailureCode string `protobuf:"bytes,16,opt,name=failure_code,json=failureCode" json:"failure_code" validate:"omitempty,oneof=account_closed account_frozen account_restricted destination_bank_invalid could_not_process declined insufficient_funds invalid_account_number incorrect_account_holder_name invalid_currency"`
	// @inject_tag: json:"failure_message" validate:"max=255"
	FailureMessage string `protobuf:"bytes,17,opt,name=failure_message,json=failureMessage" json:"failure_message" validate:"max=255"`
	// @inject_tag: json:"failure_transaction" validate:"max=255"
	FailureTransaction string `protobuf:"bytes,18,opt,name=failure_transaction,json=failureTransaction" json:"failure_transaction" validate:"max=255"`
	// @inject_tag: json:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,24,opt,name=created_at,json=createdAt" json:"created_at"`
	// @inject_tag: json:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,25,opt,name=updated_at,json=updatedAt" json:"updated_at"`
	// @inject_tag: json:"arrival_date"
	ArrivalDate *google_protobuf.Timestamp `protobuf:"bytes,26,opt,name=arrival_date,json=arrivalDate" json:"arrival_date"`
	// @inject_tag: json:"paid_at"
	PaidAt *google_protobuf.Timestamp `protobuf:"bytes,27,opt,name=paid_at,json=paidAt" json:"paid_at"`
	// @inject_tag: json:"operating_company_id" bson:"operating_company_id"
	OperatingCompanyId string `protobuf:"bytes,28,opt,name=operating_company_id,json=operatingCompanyId" json:"operating_company_id" bson:"operating_company_id"`
}

func (m *PayoutDocument) Reset()                    { *m = PayoutDocument{} }
func (m *PayoutDocument) String() string            { return proto.CompactTextString(m) }
func (*PayoutDocument) ProtoMessage()               {}
func (*PayoutDocument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *PayoutDocument) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PayoutDocument) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *PayoutDocument) GetSourceId() []string {
	if m != nil {
		return m.SourceId
	}
	return nil
}

func (m *PayoutDocument) GetTotalFees() float64 {
	if m != nil {
		return m.TotalFees
	}
	return 0
}

func (m *PayoutDocument) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *PayoutDocument) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PayoutDocument) GetPeriodFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.PeriodFrom
	}
	return nil
}

func (m *PayoutDocument) GetPeriodTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.PeriodTo
	}
	return nil
}

func (m *PayoutDocument) GetTotalTransactions() int32 {
	if m != nil {
		return m.TotalTransactions
	}
	return 0
}

func (m *PayoutDocument) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PayoutDocument) GetDestination() *MerchantBanking {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *PayoutDocument) GetMerchantAgreementNumber() string {
	if m != nil {
		return m.MerchantAgreementNumber
	}
	return ""
}

func (m *PayoutDocument) GetCompany() *MerchantCompanyInfo {
	if m != nil {
		return m.Company
	}
	return nil
}

func (m *PayoutDocument) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PayoutDocument) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

func (m *PayoutDocument) GetFailureCode() string {
	if m != nil {
		return m.FailureCode
	}
	return ""
}

func (m *PayoutDocument) GetFailureMessage() string {
	if m != nil {
		return m.FailureMessage
	}
	return ""
}

func (m *PayoutDocument) GetFailureTransaction() string {
	if m != nil {
		return m.FailureTransaction
	}
	return ""
}

func (m *PayoutDocument) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PayoutDocument) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PayoutDocument) GetArrivalDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.ArrivalDate
	}
	return nil
}

func (m *PayoutDocument) GetPaidAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.PaidAt
	}
	return nil
}

func (m *PayoutDocument) GetOperatingCompanyId() string {
	if m != nil {
		return m.OperatingCompanyId
	}
	return ""
}

type PayoutDocumentChanges struct {
	Id               string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PayoutDocumentId string                     `protobuf:"bytes,2,opt,name=payout_document_id,json=payoutDocumentId" json:"payout_document_id,omitempty"`
	Source           string                     `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	Ip               string                     `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Hash             string                     `protobuf:"bytes,5,opt,name=hash" json:"hash,omitempty"`
	CreatedAt        *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *PayoutDocumentChanges) Reset()                    { *m = PayoutDocumentChanges{} }
func (m *PayoutDocumentChanges) String() string            { return proto.CompactTextString(m) }
func (*PayoutDocumentChanges) ProtoMessage()               {}
func (*PayoutDocumentChanges) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

func (m *PayoutDocumentChanges) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PayoutDocumentChanges) GetPayoutDocumentId() string {
	if m != nil {
		return m.PayoutDocumentId
	}
	return ""
}

func (m *PayoutDocumentChanges) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *PayoutDocumentChanges) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PayoutDocumentChanges) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *PayoutDocumentChanges) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type MerchantBalance struct {
	// @inject_tag: json:"id" validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId" json:"merchant_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,3,opt,name=currency" json:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"debit" validate:"required,numeric"
	Debit float64 `protobuf:"fixed64,4,opt,name=debit" json:"debit" validate:"required,numeric"`
	// @inject_tag: json:"credit" validate:"required,numeric"
	Credit float64 `protobuf:"fixed64,5,opt,name=credit" json:"credit" validate:"required,numeric"`
	// @inject_tag: json:"rolling_reserve" validate:"required,numeric"
	RollingReserve float64 `protobuf:"fixed64,6,opt,name=rolling_reserve,json=rollingReserve" json:"rolling_reserve" validate:"required,numeric"`
	// @inject_tag: json:"total" validate:"required,numeric"
	Total     float64                    `protobuf:"fixed64,7,opt,name=total" json:"total" validate:"required,numeric"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *MerchantBalance) Reset()                    { *m = MerchantBalance{} }
func (m *MerchantBalance) String() string            { return proto.CompactTextString(m) }
func (*MerchantBalance) ProtoMessage()               {}
func (*MerchantBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{115} }

func (m *MerchantBalance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MerchantBalance) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *MerchantBalance) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MerchantBalance) GetDebit() float64 {
	if m != nil {
		return m.Debit
	}
	return 0
}

func (m *MerchantBalance) GetCredit() float64 {
	if m != nil {
		return m.Credit
	}
	return 0
}

func (m *MerchantBalance) GetRollingReserve() float64 {
	if m != nil {
		return m.RollingReserve
	}
	return 0
}

func (m *MerchantBalance) GetTotal() float64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *MerchantBalance) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type OrderReceipt struct {
	// @inject_tag: json:"total_price"
	TotalPrice string `protobuf:"bytes,1,opt,name=total_price,json=totalPrice" json:"total_price"`
	// @inject_tag: json:"transaction_id"
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId" json:"transaction_id"`
	// @inject_tag: json:"transaction_date"
	TransactionDate string `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate" json:"transaction_date"`
	// @inject_tag: json:"project_name"
	ProjectName string `protobuf:"bytes,4,opt,name=project_name,json=projectName" json:"project_name"`
	// @inject_tag: json:"merchant_name"
	MerchantName string `protobuf:"bytes,5,opt,name=merchant_name,json=merchantName" json:"merchant_name"`
	// @inject_tag: json:"items"
	Items []*OrderReceiptItem `protobuf:"bytes,6,rep,name=items" json:"items"`
	// @inject_tag: json:"order_type"
	OrderType string `protobuf:"bytes,7,opt,name=order_type,json=orderType" json:"order_type"`
	// @inject_tag: json:"platform_name"
	PlatformName string `protobuf:"bytes,8,opt,name=platform_name,json=platformName" json:"platform_name"`
	// @inject_tag: json:"payment_partner"
	PaymentPartner string `protobuf:"bytes,9,opt,name=payment_partner,json=paymentPartner" json:"payment_partner"`
	// @inject_tag: json:"vat_payer"
	VatPayer string `protobuf:"bytes,10,opt,name=vat_payer,json=vatPayer" json:"vat_payer"`
	// @inject_tag: json:"vat_in_order_currency"
	VatInOrderCurrency string `protobuf:"bytes,11,opt,name=vat_in_order_currency,json=vatInOrderCurrency" json:"vat_in_order_currency"`
	// @inject_tag: json:"vat_in_charge_currency"
	VatInChargeCurrency string `protobuf:"bytes,12,opt,name=vat_in_charge_currency,json=vatInChargeCurrency" json:"vat_in_charge_currency"`
	// @inject_tag: json:"total_amount"
	TotalAmount string `protobuf:"bytes,13,opt,name=total_amount,json=totalAmount" json:"total_amount"`
	// @inject_tag: json:"total_charge"
	TotalCharge string `protobuf:"bytes,14,opt,name=total_charge,json=totalCharge" json:"total_charge"`
	// @inject_tag: json:"receipt_id"
	ReceiptId string `protobuf:"bytes,15,opt,name=receipt_id,json=receiptId" json:"receipt_id"`
	// @inject_tag: json:"url"
	Url string `protobuf:"bytes,16,opt,name=url" json:"url"`
	// @inject_tag: json:"vat_rate"
	VatRate string `protobuf:"bytes,17,opt,name=vat_rate,json=vatRate" json:"vat_rate"`
}

func (m *OrderReceipt) Reset()                    { *m = OrderReceipt{} }
func (m *OrderReceipt) String() string            { return proto.CompactTextString(m) }
func (*OrderReceipt) ProtoMessage()               {}
func (*OrderReceipt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *OrderReceipt) GetTotalPrice() string {
	if m != nil {
		return m.TotalPrice
	}
	return ""
}

func (m *OrderReceipt) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *OrderReceipt) GetTransactionDate() string {
	if m != nil {
		return m.TransactionDate
	}
	return ""
}

func (m *OrderReceipt) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *OrderReceipt) GetMerchantName() string {
	if m != nil {
		return m.MerchantName
	}
	return ""
}

func (m *OrderReceipt) GetItems() []*OrderReceiptItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *OrderReceipt) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *OrderReceipt) GetPlatformName() string {
	if m != nil {
		return m.PlatformName
	}
	return ""
}

func (m *OrderReceipt) GetPaymentPartner() string {
	if m != nil {
		return m.PaymentPartner
	}
	return ""
}

func (m *OrderReceipt) GetVatPayer() string {
	if m != nil {
		return m.VatPayer
	}
	return ""
}

func (m *OrderReceipt) GetVatInOrderCurrency() string {
	if m != nil {
		return m.VatInOrderCurrency
	}
	return ""
}

func (m *OrderReceipt) GetVatInChargeCurrency() string {
	if m != nil {
		return m.VatInChargeCurrency
	}
	return ""
}

func (m *OrderReceipt) GetTotalAmount() string {
	if m != nil {
		return m.TotalAmount
	}
	return ""
}

func (m *OrderReceipt) GetTotalCharge() string {
	if m != nil {
		return m.TotalCharge
	}
	return ""
}

func (m *OrderReceipt) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *OrderReceipt) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *OrderReceipt) GetVatRate() string {
	if m != nil {
		return m.VatRate
	}
	return ""
}

type OrderReceiptItem struct {
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	// @inject_tag: json:"price"
	Price string `protobuf:"bytes,2,opt,name=price" json:"price"`
}

func (m *OrderReceiptItem) Reset()                    { *m = OrderReceiptItem{} }
func (m *OrderReceiptItem) String() string            { return proto.CompactTextString(m) }
func (*OrderReceiptItem) ProtoMessage()               {}
func (*OrderReceiptItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *OrderReceiptItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OrderReceiptItem) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

type HasCurrencyItem struct {
	// @inject_tag: json:"currency" validate:"required,alpha,len=3"
	Currency string `protobuf:"bytes,1,opt,name=currency" json:"currency" validate:"required,alpha,len=3"`
	// @inject_tag: json:"region" validate:"required,region_price"
	Region string `protobuf:"bytes,2,opt,name=region" json:"region" validate:"required,region_price"`
}

func (m *HasCurrencyItem) Reset()                    { *m = HasCurrencyItem{} }
func (m *HasCurrencyItem) String() string            { return proto.CompactTextString(m) }
func (*HasCurrencyItem) ProtoMessage()               {}
func (*HasCurrencyItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{118} }

func (m *HasCurrencyItem) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *HasCurrencyItem) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type LocalizedUrl struct {
	// @inject_tag: validate:"omitempty,uri" json:"en"
	En string `protobuf:"bytes,1,opt,name=en" json:"en" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"ru"
	Ru string `protobuf:"bytes,2,opt,name=ru" json:"ru" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"es"
	Es string `protobuf:"bytes,3,opt,name=es" json:"es" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"de"
	De string `protobuf:"bytes,4,opt,name=de" json:"de" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"zh"
	Zh string `protobuf:"bytes,5,opt,name=zh" json:"zh" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"fr"
	Fr string `protobuf:"bytes,6,opt,name=fr" json:"fr" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"ar"
	Ar string `protobuf:"bytes,7,opt,name=ar" json:"ar" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"pt"
	Pt string `protobuf:"bytes,8,opt,name=pt" json:"pt" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"it"
	It string `protobuf:"bytes,9,opt,name=it" json:"it" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"pl"
	Pl string `protobuf:"bytes,10,opt,name=pl" json:"pl" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"el"
	El string `protobuf:"bytes,11,opt,name=el" json:"el" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"ko"
	Ko string `protobuf:"bytes,12,opt,name=ko" json:"ko" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"ja"
	Ja string `protobuf:"bytes,13,opt,name=ja" json:"ja" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"vl"
	Vl string `protobuf:"bytes,14,opt,name=vl" json:"vl" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"he"
	He string `protobuf:"bytes,15,opt,name=he" json:"he" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"th"
	Th string `protobuf:"bytes,16,opt,name=th" json:"th" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"cs"
	Cs string `protobuf:"bytes,17,opt,name=cs" json:"cs" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"bg"
	Bg string `protobuf:"bytes,18,opt,name=bg" json:"bg" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"fi"
	Fi string `protobuf:"bytes,19,opt,name=fi" json:"fi" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"sv"
	Sv string `protobuf:"bytes,20,opt,name=sv" json:"sv" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"da"
	Da string `protobuf:"bytes,21,opt,name=da" json:"da" validate:"omitempty,uri"`
	// @inject_tag: validate:"omitempty,uri" json:"tr"
	Tr string `protobuf:"bytes,22,opt,name=tr" json:"tr" validate:"omitempty,uri"`
}

func (m *LocalizedUrl) Reset()                    { *m = LocalizedUrl{} }
func (m *LocalizedUrl) String() string            { return proto.CompactTextString(m) }
func (*LocalizedUrl) ProtoMessage()               {}
func (*LocalizedUrl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{119} }

func (m *LocalizedUrl) GetEn() string {
	if m != nil {
		return m.En
	}
	return ""
}

func (m *LocalizedUrl) GetRu() string {
	if m != nil {
		return m.Ru
	}
	return ""
}

func (m *LocalizedUrl) GetEs() string {
	if m != nil {
		return m.Es
	}
	return ""
}

func (m *LocalizedUrl) GetDe() string {
	if m != nil {
		return m.De
	}
	return ""
}

func (m *LocalizedUrl) GetZh() string {
	if m != nil {
		return m.Zh
	}
	return ""
}

func (m *LocalizedUrl) GetFr() string {
	if m != nil {
		return m.Fr
	}
	return ""
}

func (m *LocalizedUrl) GetAr() string {
	if m != nil {
		return m.Ar
	}
	return ""
}

func (m *LocalizedUrl) GetPt() string {
	if m != nil {
		return m.Pt
	}
	return ""
}

func (m *LocalizedUrl) GetIt() string {
	if m != nil {
		return m.It
	}
	return ""
}

func (m *LocalizedUrl) GetPl() string {
	if m != nil {
		return m.Pl
	}
	return ""
}

func (m *LocalizedUrl) GetEl() string {
	if m != nil {
		return m.El
	}
	return ""
}

func (m *LocalizedUrl) GetKo() string {
	if m != nil {
		return m.Ko
	}
	return ""
}

func (m *LocalizedUrl) GetJa() string {
	if m != nil {
		return m.Ja
	}
	return ""
}

func (m *LocalizedUrl) GetVl() string {
	if m != nil {
		return m.Vl
	}
	return ""
}

func (m *LocalizedUrl) GetHe() string {
	if m != nil {
		return m.He
	}
	return ""
}

func (m *LocalizedUrl) GetTh() string {
	if m != nil {
		return m.Th
	}
	return ""
}

func (m *LocalizedUrl) GetCs() string {
	if m != nil {
		return m.Cs
	}
	return ""
}

func (m *LocalizedUrl) GetBg() string {
	if m != nil {
		return m.Bg
	}
	return ""
}

func (m *LocalizedUrl) GetFi() string {
	if m != nil {
		return m.Fi
	}
	return ""
}

func (m *LocalizedUrl) GetSv() string {
	if m != nil {
		return m.Sv
	}
	return ""
}

func (m *LocalizedUrl) GetDa() string {
	if m != nil {
		return m.Da
	}
	return ""
}

func (m *LocalizedUrl) GetTr() string {
	if m != nil {
		return m.Tr
	}
	return ""
}

type ImageCollection struct {
	// @inject_tag: json:"images"
	Images *LocalizedUrl `protobuf:"bytes,1,opt,name=images" json:"images"`
	// @inject_tag: json:"use_one_for_all"
	UseOneForAll bool `protobuf:"varint,2,opt,name=use_one_for_all,json=useOneForAll" json:"use_one_for_all"`
}

func (m *ImageCollection) Reset()                    { *m = ImageCollection{} }
func (m *ImageCollection) String() string            { return proto.CompactTextString(m) }
func (*ImageCollection) ProtoMessage()               {}
func (*ImageCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{120} }

func (m *ImageCollection) GetImages() *LocalizedUrl {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *ImageCollection) GetUseOneForAll() bool {
	if m != nil {
		return m.UseOneForAll
	}
	return false
}

type ProductPrice struct {
	// @inject_tag: json:"amount" validate:"required,numeric,gt=0"
	Amount float64 `protobuf:"fixed64,1,opt,name=amount" json:"amount" validate:"required,numeric,gt=0"`
	// @inject_tag: json:"currency" validate:"omitempty,alpha,len=3"
	Currency string `protobuf:"bytes,2,opt,name=currency" json:"currency" validate:"omitempty,alpha,len=3"`
	// @inject_tag: json:"region" validate:"omitempty,region_price"
	Region string `protobuf:"bytes,3,opt,name=region" json:"region" validate:"omitempty,region_price"`
	// @inject_tag: json:"is_virtual_currency" bson:"is_virtual_currency"
	IsVirtualCurrency bool `protobuf:"varint,4,opt,name=is_virtual_currency,json=isVirtualCurrency" json:"is_virtual_currency" bson:"is_virtual_currency"`
}

func (m *ProductPrice) Reset()                    { *m = ProductPrice{} }
func (m *ProductPrice) String() string            { return proto.CompactTextString(m) }
func (*ProductPrice) ProtoMessage()               {}
func (*ProductPrice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{121} }

func (m *ProductPrice) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ProductPrice) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *ProductPrice) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ProductPrice) GetIsVirtualCurrency() bool {
	if m != nil {
		return m.IsVirtualCurrency
	}
	return false
}

type ProjectVirtualCurrency struct {
	// @inject_tag: json:"logo" validate:"omitempty,url"
	Logo string `protobuf:"bytes,1,opt,name=logo" json:"logo" validate:"omitempty,url"`
	// @inject_tag: json:"name" validate:"required,min=1"
	Name map[string]string `protobuf:"bytes,2,rep,name=name" json:"name" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validate:"required,min=1"`
	// @inject_tag: json:"success_message" validate:"required,min=1"
	SuccessMessage map[string]string `protobuf:"bytes,3,rep,name=success_message,json=successMessage" json:"success_message" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validate:"required,min=1"`
	// @inject_tag: json:"prices" validate:"required,min=1,currency_price,dive"
	Prices []*ProductPrice `protobuf:"bytes,4,rep,name=prices" json:"prices" validate:"required,min=1,currency_price,dive"`
	// @inject_tag: json:"min_purchase_value"
	MinPurchaseValue float64 `protobuf:"fixed64,5,opt,name=min_purchase_value,json=minPurchaseValue" json:"min_purchase_value"`
	// @inject_tag: json:"max_purchase_value"
	MaxPurchaseValue float64 `protobuf:"fixed64,6,opt,name=max_purchase_value,json=maxPurchaseValue" json:"max_purchase_value"`
	// @inject_tag: json:"sell_count_type" validate:"omitempty,oneof=fractional integral"
	SellCountType string `protobuf:"bytes,7,opt,name=sell_count_type,json=sellCountType" json:"sell_count_type" validate:"omitempty,oneof=fractional integral"`
}

func (m *ProjectVirtualCurrency) Reset()                    { *m = ProjectVirtualCurrency{} }
func (m *ProjectVirtualCurrency) String() string            { return proto.CompactTextString(m) }
func (*ProjectVirtualCurrency) ProtoMessage()               {}
func (*ProjectVirtualCurrency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{122} }

func (m *ProjectVirtualCurrency) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *ProjectVirtualCurrency) GetName() map[string]string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ProjectVirtualCurrency) GetSuccessMessage() map[string]string {
	if m != nil {
		return m.SuccessMessage
	}
	return nil
}

func (m *ProjectVirtualCurrency) GetPrices() []*ProductPrice {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *ProjectVirtualCurrency) GetMinPurchaseValue() float64 {
	if m != nil {
		return m.MinPurchaseValue
	}
	return 0
}

func (m *ProjectVirtualCurrency) GetMaxPurchaseValue() float64 {
	if m != nil {
		return m.MaxPurchaseValue
	}
	return 0
}

func (m *ProjectVirtualCurrency) GetSellCountType() string {
	if m != nil {
		return m.SellCountType
	}
	return ""
}

type OrderCreateByPaylink struct {
	// @inject_tag: json:"id" validate:"required,hexadecimal,len=24"
	PaylinkId string `protobuf:"bytes,1,opt,name=paylink_id,json=paylinkId" json:"id" validate:"required,hexadecimal,len=24"`
	PayerIp   string `protobuf:"bytes,2,opt,name=payer_ip,json=payerIp" json:"payer_ip,omitempty"`
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl" json:"issuer_url,omitempty"`
	// @inject_tag: json:"is_embedded"
	IsEmbedded bool `protobuf:"varint,4,opt,name=is_embedded,json=isEmbedded" json:"is_embedded"`
	// @inject_tag: bson:"utm_source" json:"utm_source"
	UtmSource string `protobuf:"bytes,5,opt,name=utm_source,json=utmSource" json:"utm_source" bson:"utm_source"`
	// @inject_tag: bson:"utm_medium" json:"utm_medium"
	UtmMedium string `protobuf:"bytes,6,opt,name=utm_medium,json=utmMedium" json:"utm_medium" bson:"utm_medium"`
	// @inject_tag: bson:"utm_campaign" json:"utm_campaign"
	UtmCampaign string `protobuf:"bytes,7,opt,name=utm_campaign,json=utmCampaign" json:"utm_campaign" bson:"utm_campaign"`
	Cookie      string `protobuf:"bytes,8,opt,name=cookie" json:"cookie,omitempty"`
}

func (m *OrderCreateByPaylink) Reset()                    { *m = OrderCreateByPaylink{} }
func (m *OrderCreateByPaylink) String() string            { return proto.CompactTextString(m) }
func (*OrderCreateByPaylink) ProtoMessage()               {}
func (*OrderCreateByPaylink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{123} }

func (m *OrderCreateByPaylink) GetPaylinkId() string {
	if m != nil {
		return m.PaylinkId
	}
	return ""
}

func (m *OrderCreateByPaylink) GetPayerIp() string {
	if m != nil {
		return m.PayerIp
	}
	return ""
}

func (m *OrderCreateByPaylink) GetIssuerUrl() string {
	if m != nil {
		return m.IssuerUrl
	}
	return ""
}

func (m *OrderCreateByPaylink) GetIsEmbedded() bool {
	if m != nil {
		return m.IsEmbedded
	}
	return false
}

func (m *OrderCreateByPaylink) GetUtmSource() string {
	if m != nil {
		return m.UtmSource
	}
	return ""
}

func (m *OrderCreateByPaylink) GetUtmMedium() string {
	if m != nil {
		return m.UtmMedium
	}
	return ""
}

func (m *OrderCreateByPaylink) GetUtmCampaign() string {
	if m != nil {
		return m.UtmCampaign
	}
	return ""
}

func (m *OrderCreateByPaylink) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type UserIpData struct {
	// @inject_tag: json:"country"
	Country string `protobuf:"bytes,1,opt,name=country" json:"country"`
	// @inject_tag: json:"city"
	City string `protobuf:"bytes,2,opt,name=city" json:"city"`
	// @inject_tag: json:"zip"
	Zip string `protobuf:"bytes,3,opt,name=zip" json:"zip"`
}

func (m *UserIpData) Reset()                    { *m = UserIpData{} }
func (m *UserIpData) String() string            { return proto.CompactTextString(m) }
func (*UserIpData) ProtoMessage()               {}
func (*UserIpData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{124} }

func (m *UserIpData) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserIpData) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserIpData) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

type PaymentFormDataChangeResponseItem struct {
	// @inject_tag: json:"user_address_data_required"
	UserAddressDataRequired bool `protobuf:"varint,1,opt,name=user_address_data_required,json=userAddressDataRequired" json:"user_address_data_required"`
	// @inject_tag: json:"user_ip_data"
	UserIpData *UserIpData `protobuf:"bytes,2,opt,name=user_ip_data,json=userIpData" json:"user_ip_data"`
	Brand      string      `protobuf:"bytes,3,opt,name=brand" json:"brand,omitempty"`
	// @inject_tag: json:"country_payments_allowed"
	CountryPaymentsAllowed bool `protobuf:"varint,4,opt,name=country_payments_allowed,json=countryPaymentsAllowed" json:"country_payments_allowed"`
	// @inject_tag: json:"country_change_allowed"
	CountryChangeAllowed bool `protobuf:"varint,5,opt,name=country_change_allowed,json=countryChangeAllowed" json:"country_change_allowed"`
	// @inject_tag: json:"has_vat"
	HasVat bool `protobuf:"varint,6,opt,name=has_vat,json=hasVat" json:"has_vat"`
	// @inject_tag: json:"vat"
	Vat float64 `protobuf:"fixed64,7,opt,name=vat" json:"vat"`
	// @inject_tag: json:"amount"
	Amount float64 `protobuf:"fixed64,8,opt,name=amount" json:"amount"`
	// @inject_tag: json:"total_amount"
	TotalAmount float64 `protobuf:"fixed64,9,opt,name=total_amount,json=totalAmount" json:"total_amount"`
	// @inject_tag: json:"currency"
	Currency string `protobuf:"bytes,10,opt,name=currency" json:"currency"`
	// @inject_tag: json:"items"
	Items []*OrderItem `protobuf:"bytes,11,rep,name=items" json:"items"`
	// @inject_tag: json:"charge_currency"
	ChargeCurrency string `protobuf:"bytes,12,opt,name=charge_currency,json=chargeCurrency" json:"charge_currency"`
	// @inject_tag: json:"charge_amount"
	ChargeAmount float64 `protobuf:"fixed64,13,opt,name=charge_amount,json=chargeAmount" json:"charge_amount"`
	// @inject_tag: json:"vat_in_charge_currency"
	VatInChargeCurrency float64 `protobuf:"fixed64,14,opt,name=vat_in_charge_currency,json=vatInChargeCurrency" json:"vat_in_charge_currency"`
	// @inject_tag: json:"vat_rate"
	VatRate float64 `protobuf:"fixed64,15,opt,name=vat_rate,json=vatRate" json:"vat_rate"`
}

func (m *PaymentFormDataChangeResponseItem) Reset()         { *m = PaymentFormDataChangeResponseItem{} }
func (m *PaymentFormDataChangeResponseItem) String() string { return proto.CompactTextString(m) }
func (*PaymentFormDataChangeResponseItem) ProtoMessage()    {}
func (*PaymentFormDataChangeResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{125}
}

func (m *PaymentFormDataChangeResponseItem) GetUserAddressDataRequired() bool {
	if m != nil {
		return m.UserAddressDataRequired
	}
	return false
}

func (m *PaymentFormDataChangeResponseItem) GetUserIpData() *UserIpData {
	if m != nil {
		return m.UserIpData
	}
	return nil
}

func (m *PaymentFormDataChangeResponseItem) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *PaymentFormDataChangeResponseItem) GetCountryPaymentsAllowed() bool {
	if m != nil {
		return m.CountryPaymentsAllowed
	}
	return false
}

func (m *PaymentFormDataChangeResponseItem) GetCountryChangeAllowed() bool {
	if m != nil {
		return m.CountryChangeAllowed
	}
	return false
}

func (m *PaymentFormDataChangeResponseItem) GetHasVat() bool {
	if m != nil {
		return m.HasVat
	}
	return false
}

func (m *PaymentFormDataChangeResponseItem) GetVat() float64 {
	if m != nil {
		return m.Vat
	}
	return 0
}

func (m *PaymentFormDataChangeResponseItem) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PaymentFormDataChangeResponseItem) GetTotalAmount() float64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *PaymentFormDataChangeResponseItem) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PaymentFormDataChangeResponseItem) GetItems() []*OrderItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PaymentFormDataChangeResponseItem) GetChargeCurrency() string {
	if m != nil {
		return m.ChargeCurrency
	}
	return ""
}

func (m *PaymentFormDataChangeResponseItem) GetChargeAmount() float64 {
	if m != nil {
		return m.ChargeAmount
	}
	return 0
}

func (m *PaymentFormDataChangeResponseItem) GetVatInChargeCurrency() float64 {
	if m != nil {
		return m.VatInChargeCurrency
	}
	return 0
}

func (m *PaymentFormDataChangeResponseItem) GetVatRate() float64 {
	if m != nil {
		return m.VatRate
	}
	return 0
}

type OperatingCompany struct {
	// @inject_tag: bson:"_id" json:"id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" bson:"_id"`
	// @inject_tag: bson:"name" json:"name" validate:"required"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name" bson:"name" validate:"required"`
	// @inject_tag: bson:"country" json:"country" validate:"required,alpha,len=2"
	Country string `protobuf:"bytes,3,opt,name=country" json:"country" bson:"country" validate:"required,alpha,len=2"`
	// @inject_tag: bson:"registration_number" json:"registration_number" validate:"required"
	RegistrationNumber string `protobuf:"bytes,4,opt,name=registration_number,json=registrationNumber" json:"registration_number" bson:"registration_number" validate:"required"`
	// @inject_tag: bson:"vat_number" json:"vat_number" validate:"required"
	VatNumber string `protobuf:"bytes,5,opt,name=vat_number,json=vatNumber" json:"vat_number" bson:"vat_number" validate:"required"`
	// @inject_tag: bson:"address" json:"address" validate:"required"
	Address string `protobuf:"bytes,6,opt,name=address" json:"address" bson:"address" validate:"required"`
	// @inject_tag: bson:"vat_address" json:"vat_address" validate:"required"
	VatAddress string `protobuf:"bytes,7,opt,name=vat_address,json=vatAddress" json:"vat_address" bson:"vat_address" validate:"required"`
	// @inject_tag: bson:"signatory_name" json:"signatory_name" validate:"required"
	SignatoryName string `protobuf:"bytes,8,opt,name=signatory_name,json=signatoryName" json:"signatory_name" bson:"signatory_name" validate:"required"`
	// @inject_tag: bson:"signatory_position" json:"signatory_position" validate:"required"
	SignatoryPosition string `protobuf:"bytes,9,opt,name=signatory_position,json=signatoryPosition" json:"signatory_position" bson:"signatory_position" validate:"required"`
	// @inject_tag: bson:"banking_details" json:"banking_details" validate:"required"
	BankingDetails string `protobuf:"bytes,10,opt,name=banking_details,json=bankingDetails" json:"banking_details" bson:"banking_details" validate:"required"`
	// @inject_tag: bson:"payment_countries" json:"payment_countries" validate:"omitempty,dive,alpha,len=2"
	PaymentCountries []string `protobuf:"bytes,11,rep,name=payment_countries,json=paymentCountries" json:"payment_countries" bson:"payment_countries" validate:"omitempty,dive,alpha,len=2"`
	// @inject_tag: json:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt" json:"created_at"`
	// @inject_tag: json:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt" json:"updated_at"`
	// @inject_tag: bson:"registration_date" json:"registration_date" validate:"required"
	RegistrationDate string `protobuf:"bytes,14,opt,name=registration_date,json=registrationDate" json:"registration_date" bson:"registration_date" validate:"required"`
	// @inject_tag: bson:"email" json:"email" validate:"required,email"
	Email string `protobuf:"bytes,15,opt,name=email" json:"email" bson:"email" validate:"required,email"`
}

func (m *OperatingCompany) Reset()                    { *m = OperatingCompany{} }
func (m *OperatingCompany) String() string            { return proto.CompactTextString(m) }
func (*OperatingCompany) ProtoMessage()               {}
func (*OperatingCompany) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{126} }

func (m *OperatingCompany) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OperatingCompany) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OperatingCompany) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *OperatingCompany) GetRegistrationNumber() string {
	if m != nil {
		return m.RegistrationNumber
	}
	return ""
}

func (m *OperatingCompany) GetVatNumber() string {
	if m != nil {
		return m.VatNumber
	}
	return ""
}

func (m *OperatingCompany) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OperatingCompany) GetVatAddress() string {
	if m != nil {
		return m.VatAddress
	}
	return ""
}

func (m *OperatingCompany) GetSignatoryName() string {
	if m != nil {
		return m.SignatoryName
	}
	return ""
}

func (m *OperatingCompany) GetSignatoryPosition() string {
	if m != nil {
		return m.SignatoryPosition
	}
	return ""
}

func (m *OperatingCompany) GetBankingDetails() string {
	if m != nil {
		return m.BankingDetails
	}
	return ""
}

func (m *OperatingCompany) GetPaymentCountries() []string {
	if m != nil {
		return m.PaymentCountries
	}
	return nil
}

func (m *OperatingCompany) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *OperatingCompany) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *OperatingCompany) GetRegistrationDate() string {
	if m != nil {
		return m.RegistrationDate
	}
	return ""
}

func (m *OperatingCompany) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type PaymentMinLimitSystem struct {
	// @inject_tag: bson:"_id" json:"-"
	Id string `protobuf:"bytes,1,opt,name=id" json:"-" bson:"_id"`
	// @inject_tag: validate:"required,alpha,len=3" json:"currency" bson:"currency"
	Currency string `protobuf:"bytes,2,opt,name=currency" json:"currency" validate:"required,alpha,len=3" bson:"currency"`
	// @inject_tag: validate:"required,numeric,gt=0" json:"amount" bson:"amount"
	Amount float64 `protobuf:"fixed64,3,opt,name=amount" json:"amount" validate:"required,numeric,gt=0" bson:"amount"`
	// @inject_tag: json:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at"`
	// @inject_tag: json:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt" json:"updated_at"`
}

func (m *PaymentMinLimitSystem) Reset()                    { *m = PaymentMinLimitSystem{} }
func (m *PaymentMinLimitSystem) String() string            { return proto.CompactTextString(m) }
func (*PaymentMinLimitSystem) ProtoMessage()               {}
func (*PaymentMinLimitSystem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{127} }

func (m *PaymentMinLimitSystem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentMinLimitSystem) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PaymentMinLimitSystem) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PaymentMinLimitSystem) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PaymentMinLimitSystem) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type UserRole struct {
	// @inject_tag: json:"id" validate:"required,hexadecimal,len=24"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"merchant_id" validate:"required,hexadecimal,len=24"
	MerchantId string `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId" json:"merchant_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"role" validate:"required"
	Role string `protobuf:"bytes,4,opt,name=role" json:"role" validate:"required"`
	// @inject_tag: json:"status" bson:"status" validate="oneof=invited accepted"
	Status string `protobuf:"bytes,5,opt,name=status" json:"status" bson:"status"`
	// @inject_tag: json:"user_id" bson:"user_id" validate:"required,hexadecimal,len=24"
	UserId string `protobuf:"bytes,6,opt,name=user_id,json=userId" json:"user_id" bson:"user_id" validate:"required,hexadecimal,len=24"`
	// @inject_tag: json:"first_name" bson:"first_name"  validate:"required"
	FirstName string `protobuf:"bytes,7,opt,name=first_name,json=firstName" json:"first_name" bson:"first_name" validate:"required"`
	// @inject_tag: json:"last_name" bson:"last_name" validate:"required"
	LastName string `protobuf:"bytes,8,opt,name=last_name,json=lastName" json:"last_name" bson:"last_name" validate:"required"`
	// @inject_tag: json:"email" bson:"email" validate:"required,email"
	Email string `protobuf:"bytes,9,opt,name=email" json:"email" bson:"email" validate:"required,email"`
	// @inject_tag: json:"created_at"
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at"`
	// @inject_tag: json:"updated_at"
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt" json:"updated_at"`
}

func (m *UserRole) Reset()                    { *m = UserRole{} }
func (m *UserRole) String() string            { return proto.CompactTextString(m) }
func (*UserRole) ProtoMessage()               {}
func (*UserRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{128} }

func (m *UserRole) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserRole) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *UserRole) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *UserRole) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UserRole) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserRole) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserRole) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserRole) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserRole) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *UserRole) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type RoleListItem struct {
	// @inject_tag: json:"id"
	Id string `protobuf:"bytes,1,opt,name=id" json:"id"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name"`
}

func (m *RoleListItem) Reset()                    { *m = RoleListItem{} }
func (m *RoleListItem) String() string            { return proto.CompactTextString(m) }
func (*RoleListItem) ProtoMessage()               {}
func (*RoleListItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{129} }

func (m *RoleListItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoleListItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Name)(nil), "billing.Name")
	proto.RegisterType((*OrderCreateRequest)(nil), "billing.OrderCreateRequest")
	proto.RegisterType((*Project)(nil), "billing.Project")
	proto.RegisterType((*ProjectOrder)(nil), "billing.ProjectOrder")
	proto.RegisterType((*MerchantContact)(nil), "billing.MerchantContact")
	proto.RegisterType((*MerchantContactTechnical)(nil), "billing.MerchantContactTechnical")
	proto.RegisterType((*MerchantContactAuthorized)(nil), "billing.MerchantContactAuthorized")
	proto.RegisterType((*MerchantBanking)(nil), "billing.MerchantBanking")
	proto.RegisterType((*MerchantLastPayout)(nil), "billing.MerchantLastPayout")
	proto.RegisterType((*MerchantUser)(nil), "billing.MerchantUser")
	proto.RegisterType((*MerchantCompanyInfo)(nil), "billing.MerchantCompanyInfo")
	proto.RegisterType((*MerchantCompletedSteps)(nil), "billing.MerchantCompletedSteps")
	proto.RegisterType((*MerchantAgreementSignatureDataSignUrl)(nil), "billing.MerchantAgreementSignatureDataSignUrl")
	proto.RegisterType((*MerchantAgreementSignatureData)(nil), "billing.MerchantAgreementSignatureData")
	proto.RegisterType((*MerchantTariff)(nil), "billing.MerchantTariff")
	proto.RegisterType((*Merchant)(nil), "billing.Merchant")
	proto.RegisterType((*MerchantCommon)(nil), "billing.MerchantCommon")
	proto.RegisterType((*SystemNotificationStatuses)(nil), "billing.SystemNotificationStatuses")
	proto.RegisterType((*Notification)(nil), "billing.Notification")
	proto.RegisterType((*OrderPlatformFee)(nil), "billing.OrderPlatformFee")
	proto.RegisterType((*OrderTax)(nil), "billing.OrderTax")
	proto.RegisterType((*OrderBillingAddress)(nil), "billing.OrderBillingAddress")
	proto.RegisterType((*OrderUser)(nil), "billing.OrderUser")
	proto.RegisterType((*OrderNotificationCancellation)(nil), "billing.OrderNotificationCancellation")
	proto.RegisterType((*Order)(nil), "billing.Order")
	proto.RegisterType((*ParentOrder)(nil), "billing.ParentOrder")
	proto.RegisterType((*CountryRestriction)(nil), "billing.CountryRestriction")
	proto.RegisterType((*OrderItem)(nil), "billing.OrderItem")
	proto.RegisterType((*OrderPaginate)(nil), "billing.OrderPaginate")
	proto.RegisterType((*PaymentMethodOrder)(nil), "billing.PaymentMethodOrder")
	proto.RegisterType((*PaymentMethodParams)(nil), "billing.PaymentMethodParams")
	proto.RegisterType((*PaymentSystem)(nil), "billing.PaymentSystem")
	proto.RegisterType((*PaymentMethodCard)(nil), "billing.PaymentMethodCard")
	proto.RegisterType((*PaymentMethodWallet)(nil), "billing.PaymentMethodWallet")
	proto.RegisterType((*PaymentMethodCrypto)(nil), "billing.PaymentMethodCrypto")
	proto.RegisterType((*ProjectPaymentMethod)(nil), "billing.ProjectPaymentMethod")
	proto.RegisterType((*PaymentMethod)(nil), "billing.PaymentMethod")
	proto.RegisterType((*Commission)(nil), "billing.Commission")
	proto.RegisterType((*CardExpire)(nil), "billing.CardExpire")
	proto.RegisterType((*SavedCard)(nil), "billing.SavedCard")
	proto.RegisterType((*PaymentFormPaymentMethod)(nil), "billing.PaymentFormPaymentMethod")
	proto.RegisterType((*MerchantPaymentMethodPerTransactionCommission)(nil), "billing.MerchantPaymentMethodPerTransactionCommission")
	proto.RegisterType((*MerchantPaymentMethodCommissions)(nil), "billing.MerchantPaymentMethodCommissions")
	proto.RegisterType((*MerchantPaymentMethodIntegration)(nil), "billing.MerchantPaymentMethodIntegration")
	proto.RegisterType((*MerchantPaymentMethodIdentification)(nil), "billing.MerchantPaymentMethodIdentification")
	proto.RegisterType((*MerchantPaymentMethod)(nil), "billing.MerchantPaymentMethod")
	proto.RegisterType((*RefundPayerData)(nil), "billing.RefundPayerData")
	proto.RegisterType((*RefundOrder)(nil), "billing.RefundOrder")
	proto.RegisterType((*Refund)(nil), "billing.Refund")
	proto.RegisterType((*MerchantPaymentMethodHistory)(nil), "billing.MerchantPaymentMethodHistory")
	proto.RegisterType((*CustomerIdentity)(nil), "billing.CustomerIdentity")
	proto.RegisterType((*CustomerIpHistory)(nil), "billing.CustomerIpHistory")
	proto.RegisterType((*CustomerAddressHistory)(nil), "billing.CustomerAddressHistory")
	proto.RegisterType((*CustomerStringValueHistory)(nil), "billing.CustomerStringValueHistory")
	proto.RegisterType((*Customer)(nil), "billing.Customer")
	proto.RegisterType((*TokenUserEmailValue)(nil), "billing.TokenUserEmailValue")
	proto.RegisterType((*TokenUserPhoneValue)(nil), "billing.TokenUserPhoneValue")
	proto.RegisterType((*TokenUserIpValue)(nil), "billing.TokenUserIpValue")
	proto.RegisterType((*TokenUserLocaleValue)(nil), "billing.TokenUserLocaleValue")
	proto.RegisterType((*TokenUserValue)(nil), "billing.TokenUserValue")
	proto.RegisterType((*TokenUser)(nil), "billing.TokenUser")
	proto.RegisterType((*TokenSettingsReturnUrl)(nil), "billing.TokenSettingsReturnUrl")
	proto.RegisterType((*TokenSettingsItem)(nil), "billing.TokenSettingsItem")
	proto.RegisterType((*TokenSettings)(nil), "billing.TokenSettings")
	proto.RegisterType((*OrderIssuer)(nil), "billing.OrderIssuer")
	proto.RegisterType((*OrderNotificationRefund)(nil), "billing.OrderNotificationRefund")
	proto.RegisterType((*GetCountryRequest)(nil), "billing.GetCountryRequest")
	proto.RegisterType((*CountryVatThreshold)(nil), "billing.CountryVatThreshold")
	proto.RegisterType((*Country)(nil), "billing.Country")
	proto.RegisterType((*CountriesList)(nil), "billing.CountriesList")
	proto.RegisterType((*GetPriceGroupRequest)(nil), "billing.GetPriceGroupRequest")
	proto.RegisterType((*PriceGroup)(nil), "billing.PriceGroup")
	proto.RegisterType((*ZipCodeState)(nil), "billing.ZipCodeState")
	proto.RegisterType((*ZipCode)(nil), "billing.ZipCode")
	proto.RegisterType((*PaymentChannelCostSystem)(nil), "billing.PaymentChannelCostSystem")
	proto.RegisterType((*PaymentChannelCostSystemRequest)(nil), "billing.PaymentChannelCostSystemRequest")
	proto.RegisterType((*PaymentChannelCostSystemList)(nil), "billing.PaymentChannelCostSystemList")
	proto.RegisterType((*PaymentChannelCostMerchant)(nil), "billing.PaymentChannelCostMerchant")
	proto.RegisterType((*PaymentChannelCostMerchantRequest)(nil), "billing.PaymentChannelCostMerchantRequest")
	proto.RegisterType((*PaymentChannelCostMerchantList)(nil), "billing.PaymentChannelCostMerchantList")
	proto.RegisterType((*PaymentChannelCostMerchantListRequest)(nil), "billing.PaymentChannelCostMerchantListRequest")
	proto.RegisterType((*MoneyBackCostSystem)(nil), "billing.MoneyBackCostSystem")
	proto.RegisterType((*MoneyBackCostSystemRequest)(nil), "billing.MoneyBackCostSystemRequest")
	proto.RegisterType((*MoneyBackCostSystemList)(nil), "billing.MoneyBackCostSystemList")
	proto.RegisterType((*MoneyBackCostMerchant)(nil), "billing.MoneyBackCostMerchant")
	proto.RegisterType((*MoneyBackCostMerchantRequest)(nil), "billing.MoneyBackCostMerchantRequest")
	proto.RegisterType((*PaymentCostDeleteRequest)(nil), "billing.PaymentCostDeleteRequest")
	proto.RegisterType((*MoneyBackCostMerchantList)(nil), "billing.MoneyBackCostMerchantList")
	proto.RegisterType((*MoneyBackCostMerchantListRequest)(nil), "billing.MoneyBackCostMerchantListRequest")
	proto.RegisterType((*PayoutCostSystem)(nil), "billing.PayoutCostSystem")
	proto.RegisterType((*AccountingEntrySource)(nil), "billing.AccountingEntrySource")
	proto.RegisterType((*AccountingEntry)(nil), "billing.AccountingEntry")
	proto.RegisterType((*RoyaltyReportTotals)(nil), "billing.RoyaltyReportTotals")
	proto.RegisterType((*RoyaltyReportProductSummaryItem)(nil), "billing.RoyaltyReportProductSummaryItem")
	proto.RegisterType((*RoyaltyReportCorrectionItem)(nil), "billing.RoyaltyReportCorrectionItem")
	proto.RegisterType((*RoyaltyReportSummary)(nil), "billing.RoyaltyReportSummary")
	proto.RegisterType((*RoyaltyReport)(nil), "billing.RoyaltyReport")
	proto.RegisterType((*RoyaltyReportChanges)(nil), "billing.RoyaltyReportChanges")
	proto.RegisterType((*VatTransaction)(nil), "billing.VatTransaction")
	proto.RegisterType((*VatReport)(nil), "billing.VatReport")
	proto.RegisterType((*AnnualTurnover)(nil), "billing.AnnualTurnover")
	proto.RegisterType((*OrderViewMoney)(nil), "billing.OrderViewMoney")
	proto.RegisterType((*OrderViewPublic)(nil), "billing.OrderViewPublic")
	proto.RegisterType((*OrderViewPrivate)(nil), "billing.OrderViewPrivate")
	proto.RegisterType((*RecommendedPrice)(nil), "billing.RecommendedPrice")
	proto.RegisterType((*PriceTable)(nil), "billing.PriceTable")
	proto.RegisterType((*PriceTableRange)(nil), "billing.PriceTableRange")
	proto.RegisterType((*Id)(nil), "billing.Id")
	proto.RegisterType((*RangeInt)(nil), "billing.RangeInt")
	proto.RegisterType((*MerchantTariffRatesPayment)(nil), "billing.MerchantTariffRatesPayment")
	proto.RegisterType((*MerchantTariffRatesSettingsItem)(nil), "billing.MerchantTariffRatesSettingsItem")
	proto.RegisterType((*MerchantTariffRatesSettings)(nil), "billing.MerchantTariffRatesSettings")
	proto.RegisterType((*Key)(nil), "billing.Key")
	proto.RegisterType((*PayoutDocument)(nil), "billing.PayoutDocument")
	proto.RegisterType((*PayoutDocumentChanges)(nil), "billing.PayoutDocumentChanges")
	proto.RegisterType((*MerchantBalance)(nil), "billing.MerchantBalance")
	proto.RegisterType((*OrderReceipt)(nil), "billing.OrderReceipt")
	proto.RegisterType((*OrderReceiptItem)(nil), "billing.OrderReceiptItem")
	proto.RegisterType((*HasCurrencyItem)(nil), "billing.HasCurrencyItem")
	proto.RegisterType((*LocalizedUrl)(nil), "billing.LocalizedUrl")
	proto.RegisterType((*ImageCollection)(nil), "billing.ImageCollection")
	proto.RegisterType((*ProductPrice)(nil), "billing.ProductPrice")
	proto.RegisterType((*ProjectVirtualCurrency)(nil), "billing.ProjectVirtualCurrency")
	proto.RegisterType((*OrderCreateByPaylink)(nil), "billing.OrderCreateByPaylink")
	proto.RegisterType((*UserIpData)(nil), "billing.UserIpData")
	proto.RegisterType((*PaymentFormDataChangeResponseItem)(nil), "billing.PaymentFormDataChangeResponseItem")
	proto.RegisterType((*OperatingCompany)(nil), "billing.OperatingCompany")
	proto.RegisterType((*PaymentMinLimitSystem)(nil), "billing.PaymentMinLimitSystem")
	proto.RegisterType((*UserRole)(nil), "billing.UserRole")
	proto.RegisterType((*RoleListItem)(nil), "billing.RoleListItem")
}

func init() { proto.RegisterFile("billing/billing.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 13074 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x5d, 0x6c, 0x1c, 0xc9,
	0x76, 0x18, 0x0c, 0x0e, 0x39, 0xe4, 0xcc, 0x99, 0xe1, 0xcc, 0xb0, 0xf9, 0x37, 0xa4, 0x56, 0x7f,
	0xa3, 0xdf, 0x5d, 0xad, 0x28, 0xad, 0xa4, 0x95, 0xf6, 0xd7, 0xbb, 0x14, 0x25, 0xad, 0xb8, 0x2b,
	0x69, 0x79, 0x5b, 0x5c, 0x5d, 0xdf, 0x7b, 0xed, 0x3b, 0x68, 0xce, 0x14, 0xc9, 0xbe, 0x9a, 0x99,
	0x9e, 0xdb, 0xdd, 0x43, 0x89, 0xfb, 0xe1, 0x0b, 0xfc, 0x10, 0x18, 0x88, 0x03, 0x23, 0x40, 0x02,
	0x1b, 0x41, 0x9e, 0x62, 0x24, 0x48, 0x9e, 0x6d, 0x18, 0x48, 0xf2, 0x94, 0x9b, 0x97, 0x20, 0x01,
	0x82, 0x00, 0x76, 0x62, 0xc0, 0x40, 0x1e, 0x92, 0xa7, 0x18, 0x01, 0x82, 0x20, 0x41, 0xf2, 0x90,
	0x87, 0x38, 0x09, 0xea, 0x9c, 0xaa, 0xea, 0xaa, 0xfe, 0x99, 0x1f, 0x6a, 0xef, 0xbd, 0x31, 0xe0,
	0x17, 0x72, 0xaa, 0xea, 0xd4, 0xe9, 0xee, 0xaa, 0xf3, 0x57, 0xa7, 0x4e, 0x9d, 0x82, 0xe5, 0x3d,
	0xb7, 0xd3, 0x71, 0x7b, 0x07, 0x37, 0xc4, 0xff, 0x8d, 0xbe, 0xef, 0x85, 0x9e, 0x35, 0x27, 0x8a,
	0xeb, 0x67, 0x0f, 0x3c, 0xef, 0xa0, 0xc3, 0x6e, 0x60, 0xf5, 0xde, 0x60, 0xff, 0x46, 0xe8, 0x76,
	0x59, 0x10, 0x3a, 0xdd, 0x3e, 0x41, 0x36, 0x2e, 0xc3, 0xcc, 0x33, 0xa7, 0xcb, 0xac, 0x0a, 0xe4,
	0x58, 0xaf, 0x3e, 0x75, 0x6e, 0xea, 0x6a, 0xd1, 0xce, 0xb1, 0x1e, 0x2f, 0xfb, 0x83, 0x7a, 0x8e,
	0xca, 0xfe, 0xa0, 0xf1, 0x77, 0xe7, 0xc1, 0xfa, 0xda, 0x6f, 0x33, 0x7f, 0xcb, 0x67, 0x4e, 0xc8,
	0x6c, 0xf6, 0xd3, 0x01, 0x0b, 0x42, 0xeb, 0x34, 0x40, 0xdf, 0xf7, 0x7e, 0xc2, 0x5a, 0x61, 0xd3,
	0x6d, 0x8b, 0xee, 0x45, 0x51, 0xb3, 0xdd, 0xb6, 0xde, 0x82, 0x62, 0xe0, 0x1e, 0xf4, 0x9c, 0x70,
	0xe0, 0x33, 0x81, 0x2c, 0xaa, 0xb0, 0x56, 0x60, 0xd6, 0xe9, 0x7a, 0x83, 0x5e, 0x58, 0x9f, 0x3e,
	0x37, 0x75, 0x75, 0xca, 0x16, 0x25, 0x6b, 0x1d, 0x0a, 0xad, 0x81, 0xef, 0xb3, 0x5e, 0xeb, 0xb8,
	0x3e, 0x83, 0x9d, 0x54, 0xd9, 0xaa, 0xc3, 0x9c, 0xd3, 0x6a, 0x61, 0xa7, 0x3c, 0x36, 0xc9, 0xa2,
	0xb5, 0x06, 0x05, 0x8f, 0xbf, 0x20, 0x7f, 0x91, 0x59, 0x6a, 0xc2, 0xf2, 0x76, 0xdb, 0x3a, 0x07,
	0xa5, 0x36, 0x0b, 0x5a, 0xbe, 0xdb, 0x0f, 0x5d, 0xaf, 0x57, 0x9f, 0xc3, 0x56, 0xbd, 0xca, 0xba,
	0x04, 0x95, 0xbe, 0x73, 0xdc, 0x65, 0xbd, 0xb0, 0xd9, 0x65, 0xe1, 0xa1, 0xd7, 0xae, 0x17, 0x10,
	0x68, 0x5e, 0xd4, 0x3e, 0xc5, 0x4a, 0xfe, 0xb9, 0x03, 0xbf, 0xd3, 0x3c, 0x62, 0xbe, 0xbb, 0x7f,
	0x5c, 0x2f, 0xd2, 0x07, 0x0d, 0xfc, 0xce, 0x0b, 0xac, 0x90, 0xcd, 0x3d, 0x2f, 0xe4, 0xcd, 0xa0,
	0x9a, 0x9f, 0x61, 0x85, 0x75, 0x16, 0x4a, 0xbc, 0x39, 0x18, 0xb4, 0x5a, 0x2c, 0x08, 0xea, 0x25,
	0x6c, 0xe7, 0x3d, 0x9e, 0x53, 0x0d, 0xff, 0x04, 0x0e, 0xb0, 0xef, 0xb8, 0x9d, 0x7a, 0x99, 0x3e,
	0x61, 0xe0, 0x77, 0x1e, 0x39, 0x6e, 0x87, 0xf7, 0xed, 0x3b, 0xc7, 0xcc, 0x6f, 0xb2, 0x2e, 0x6f,
	0x9d, 0xa7, 0xbe, 0x58, 0xf5, 0xb0, 0x6b, 0x00, 0xf4, 0x0f, 0xbd, 0x1e, 0xab, 0x57, 0x34, 0x80,
	0x1d, 0x5e, 0xc3, 0x47, 0xdb, 0x67, 0x07, 0xfc, 0xfb, 0xab, 0xd8, 0x26, 0x4a, 0xd6, 0x27, 0x90,
	0xf7, 0xc2, 0x43, 0xe6, 0xd7, 0x17, 0xce, 0x4d, 0x5f, 0x2d, 0xdd, 0xba, 0xbc, 0x21, 0x49, 0x29,
	0x39, 0xdd, 0x1b, 0x5f, 0x73, 0xc0, 0x87, 0xbd, 0xd0, 0x3f, 0xb6, 0xa9, 0x93, 0xb5, 0x0d, 0xe0,
	0x3b, 0xaf, 0x9a, 0x7d, 0xc7, 0x77, 0xba, 0x41, 0xdd, 0x42, 0x14, 0xef, 0x0c, 0x43, 0x61, 0x3b,
	0xaf, 0x76, 0x10, 0x98, 0xd0, 0x14, 0x7d, 0x59, 0xe6, 0x5f, 0xcf, 0x51, 0xed, 0x79, 0xed, 0xe3,
	0xfa, 0x22, 0x7d, 0xbd, 0xef, 0xbc, 0xba, 0xef, 0xb5, 0x8f, 0xad, 0x55, 0x98, 0x73, 0x83, 0xe6,
	0x4f, 0x02, 0xaf, 0x57, 0x5f, 0x3a, 0x37, 0x75, 0xb5, 0x60, 0xcf, 0xba, 0xc1, 0x97, 0x81, 0xd7,
	0xe3, 0xa4, 0xd2, 0x71, 0x7a, 0x07, 0x03, 0xe7, 0x80, 0xd5, 0x97, 0x89, 0x54, 0x64, 0x99, 0xb7,
	0xf5, 0x7d, 0xaf, 0x3d, 0x68, 0x85, 0x41, 0x7d, 0xe5, 0xdc, 0x34, 0x6f, 0x93, 0x65, 0xeb, 0x21,
	0x14, 0xba, 0x2c, 0x74, 0xda, 0x4e, 0xe8, 0xd4, 0x57, 0xf1, 0xa5, 0xdf, 0x1e, 0xf6, 0xd2, 0x4f,
	0x05, 0x2c, 0xbd, 0xb3, 0xea, 0x6a, 0xfd, 0x08, 0x6a, 0x7d, 0xdf, 0x3d, 0x72, 0x42, 0xd6, 0x54,
	0xe8, 0xea, 0x88, 0xee, 0xe6, 0x30, 0x74, 0x3b, 0xd4, 0xc7, 0xc4, 0x5a, 0xed, 0x9b, 0xb5, 0x9c,
	0x26, 0x7d, 0xd6, 0x62, 0x6e, 0x3f, 0x6c, 0xf6, 0x06, 0xdd, 0x3d, 0xe6, 0xd7, 0xd7, 0x88, 0x26,
	0x45, 0xed, 0x33, 0xac, 0xe4, 0x13, 0x2f, 0xc1, 0x06, 0x7e, 0xa7, 0xbe, 0x4e, 0x13, 0x2f, 0xaa,
	0xbe, 0xf1, 0x3b, 0x9c, 0x2a, 0xdd, 0x20, 0x18, 0x30, 0x1f, 0xdb, 0x4f, 0x11, 0x55, 0x52, 0x0d,
	0x6f, 0x3e, 0x0b, 0x25, 0x37, 0x68, 0xb2, 0xee, 0x1e, 0x6b, 0xb7, 0x59, 0xbb, 0xfe, 0x16, 0x8e,
	0x2f, 0xb8, 0xc1, 0x43, 0x51, 0x63, 0x2d, 0x41, 0x3e, 0xf4, 0x5e, 0xb2, 0x5e, 0xfd, 0x34, 0x76,
	0xa5, 0x82, 0x75, 0x19, 0x66, 0x06, 0x01, 0xf3, 0xeb, 0x67, 0xce, 0x4d, 0x5d, 0x2d, 0xdd, 0xb2,
	0xcc, 0xcf, 0xfd, 0x26, 0x60, 0xbe, 0x8d, 0xed, 0xd6, 0x45, 0xa8, 0xf4, 0x83, 0x7e, 0x93, 0x58,
	0x73, 0x30, 0x70, 0xdb, 0xf5, 0xb3, 0x88, 0xa6, 0xdc, 0x0f, 0xfa, 0x04, 0x3b, 0x70, 0xdb, 0x96,
	0x05, 0x33, 0xe1, 0x71, 0x9f, 0xd5, 0xcf, 0x61, 0x1b, 0xfe, 0x46, 0x8a, 0xee, 0x38, 0xe1, 0xbe,
	0xe7, 0x77, 0x39, 0x4f, 0x9f, 0x17, 0x14, 0x2d, 0xaa, 0xb6, 0xdb, 0xd6, 0xdb, 0x50, 0x13, 0x1f,
	0xe6, 0xb3, 0x7d, 0xc6, 0xe5, 0x03, 0xab, 0x37, 0x10, 0xaa, 0x4a, 0xf5, 0xb6, 0xac, 0xb6, 0x6e,
	0xc1, 0x72, 0x1c, 0xb4, 0x89, 0x0f, 0xbc, 0x80, 0xf0, 0x8b, 0x31, 0xf8, 0x5d, 0xfe, 0x7c, 0xce,
	0xcd, 0x61, 0xb7, 0x19, 0x78, 0x03, 0xbf, 0xc5, 0xea, 0x17, 0x05, 0x37, 0x87, 0xdd, 0xe7, 0x58,
	0x21, 0x9b, 0xbb, 0xac, 0xed, 0x0e, 0xba, 0xf5, 0x4b, 0xaa, 0xf9, 0x29, 0x56, 0x58, 0xe7, 0xa1,
	0xcc, 0x9b, 0x5b, 0x4e, 0xb7, 0xef, 0xb8, 0x07, 0xbd, 0xfa, 0x65, 0x12, 0x3a, 0x83, 0xb0, 0xbb,
	0x25, 0xaa, 0xac, 0x4f, 0xe0, 0x94, 0x1b, 0x34, 0xf7, 0x06, 0xc7, 0xcd, 0x7d, 0xcf, 0x6f, 0x1e,
	0xb9, 0x7e, 0x38, 0x70, 0x3a, 0x4d, 0x25, 0xfa, 0xae, 0xe0, 0x4c, 0xac, 0xba, 0xc1, 0xfd, 0xc1,
	0xf1, 0x23, 0xcf, 0x7f, 0x41, 0xed, 0x5b, 0x52, 0x12, 0xae, 0xc0, 0x6c, 0xcb, 0xf3, 0x5e, 0xba,
	0xac, 0x7e, 0x95, 0xf8, 0x99, 0x4a, 0xeb, 0x1f, 0x00, 0x44, 0x6c, 0x6a, 0xd5, 0x60, 0xfa, 0x25,
	0x3b, 0x16, 0x92, 0x99, 0xff, 0xe4, 0xd3, 0x79, 0xe4, 0x74, 0x06, 0x52, 0x1e, 0x53, 0xe1, 0xa3,
	0xdc, 0x07, 0x53, 0xeb, 0x9f, 0x40, 0xc5, 0xe4, 0xce, 0x89, 0x7a, 0x7f, 0x0c, 0xf3, 0x06, 0x41,
	0x4f, 0xd4, 0xf9, 0x3e, 0x2c, 0xa5, 0x31, 0xc5, 0x24, 0x38, 0x1a, 0x7f, 0x5e, 0x81, 0xb9, 0x1d,
	0x52, 0x3d, 0x5c, 0x7d, 0x29, 0x7d, 0x94, 0x73, 0xdb, 0x9c, 0x96, 0xba, 0xcc, 0x6f, 0x1d, 0x3a,
	0x3d, 0x54, 0x54, 0xd4, 0x17, 0x64, 0xd5, 0x76, 0xdb, 0xda, 0x80, 0x99, 0x9e, 0xd3, 0x65, 0xf5,
	0x69, 0xe4, 0xde, 0x75, 0x45, 0xce, 0x02, 0xe1, 0x06, 0x57, 0x92, 0xc4, 0xa7, 0x08, 0xc7, 0x67,
	0xdf, 0x67, 0x01, 0xf3, 0x8f, 0x58, 0xbb, 0x79, 0x47, 0x68, 0xa9, 0xa2, 0xac, 0xb9, 0x63, 0x5d,
	0x83, 0x85, 0x96, 0xd3, 0xe9, 0xec, 0x39, 0xad, 0x97, 0xd1, 0x84, 0x92, 0xc2, 0xaa, 0xc9, 0x06,
	0x35, 0x93, 0x3a, 0x30, 0x6a, 0xe5, 0x96, 0xd7, 0x11, 0x2a, 0x4c, 0x01, 0xef, 0x88, 0x7a, 0xeb,
	0x43, 0x58, 0x6b, 0xa1, 0x30, 0x11, 0x2c, 0xe5, 0x74, 0x3a, 0xde, 0x2b, 0xd6, 0xe6, 0xbc, 0x1d,
	0xd4, 0xe7, 0x50, 0xcc, 0xad, 0x10, 0x00, 0x72, 0xd7, 0x26, 0x35, 0x7f, 0xe3, 0x77, 0x02, 0xde,
	0x15, 0xa1, 0x9b, 0xed, 0xe3, 0x9e, 0xd3, 0x75, 0x5b, 0x42, 0x51, 0x51, 0xd7, 0x02, 0x52, 0xdb,
	0x0a, 0x02, 0x3c, 0xa0, 0x76, 0x52, 0x5b, 0xd8, 0xf5, 0x53, 0x38, 0x65, 0x76, 0xf5, 0x59, 0xdb,
	0xf5, 0xb9, 0xda, 0xc7, 0xce, 0x45, 0xec, 0x5c, 0xd7, 0x3b, 0xdb, 0x02, 0x00, 0xbb, 0x5f, 0x81,
	0x6a, 0xc7, 0xed, 0xba, 0x61, 0x10, 0x0d, 0x06, 0x69, 0xc7, 0x0a, 0x55, 0xab, 0xa1, 0x78, 0x17,
	0xac, 0xae, 0xdb, 0x6b, 0x4a, 0x5d, 0x2c, 0xcc, 0x83, 0x12, 0x9a, 0x07, 0xb5, 0xae, 0xdb, 0xdb,
	0xa1, 0x86, 0x4d, 0x32, 0x14, 0x38, 0xb4, 0xf3, 0x3a, 0x0e, 0x5d, 0x16, 0xd0, 0xce, 0x6b, 0x13,
	0xfa, 0x02, 0xcc, 0x8b, 0x0f, 0x46, 0x1d, 0x1a, 0xd4, 0xe7, 0x71, 0xb4, 0xca, 0x54, 0x89, 0x5a,
	0x34, 0xb0, 0x6e, 0xc2, 0x92, 0x1b, 0x34, 0xa5, 0x9e, 0x68, 0xb6, 0x0e, 0x59, 0xeb, 0xa5, 0x37,
	0x08, 0x51, 0x9f, 0x16, 0x6c, 0xcb, 0x0d, 0x76, 0x44, 0xd3, 0x96, 0x68, 0xe1, 0x94, 0x10, 0xb0,
	0x96, 0xcf, 0xc2, 0x26, 0xa7, 0xd4, 0xaa, 0x30, 0x72, 0xb0, 0xe6, 0x2b, 0x76, 0x6c, 0x5d, 0x07,
	0x4b, 0x59, 0x3c, 0x4d, 0x9f, 0xfd, 0x74, 0xe0, 0xfa, 0xac, 0x5d, 0xaf, 0x21, 0xba, 0x05, 0xd5,
	0x62, 0x8b, 0x06, 0xeb, 0x1d, 0x58, 0x08, 0x58, 0xaf, 0xdd, 0xd4, 0xdf, 0xb4, 0xbe, 0x80, 0xd0,
	0x55, 0xde, 0xf0, 0x2c, 0x7a, 0x59, 0x0e, 0xcb, 0xcd, 0x05, 0x7c, 0xc7, 0xa6, 0xb4, 0x8a, 0x2c,
	0x12, 0x80, 0x03, 0xbf, 0x83, 0x6f, 0xb8, 0x29, 0xac, 0xa3, 0x0d, 0x58, 0xe4, 0xb0, 0x7d, 0xdf,
	0xe3, 0x96, 0x86, 0x1c, 0x32, 0xa1, 0x67, 0x39, 0x9a, 0x1d, 0x6a, 0x11, 0x43, 0x26, 0x71, 0xab,
	0x69, 0x46, 0x9b, 0x64, 0x49, 0xe1, 0x96, 0xb3, 0x8b, 0xb6, 0xc9, 0x4d, 0x58, 0x32, 0x60, 0xa5,
	0x81, 0x43, 0x0a, 0xd9, 0xd2, 0xc0, 0xa5, 0xa1, 0xb3, 0x02, 0xb3, 0x41, 0xe8, 0x84, 0x03, 0xae,
	0x98, 0xa7, 0xae, 0xe6, 0x6d, 0x51, 0xb2, 0x3e, 0x04, 0x20, 0xda, 0x6d, 0x37, 0x9d, 0xb0, 0xbe,
	0x8a, 0xaa, 0x65, 0x7d, 0x83, 0x6c, 0xd8, 0x0d, 0x69, 0xc3, 0x6e, 0xec, 0x4a, 0x1b, 0xd6, 0x2e,
	0x0a, 0xe8, 0xcd, 0x90, 0x77, 0x1d, 0xf4, 0xdb, 0xb2, 0x6b, 0x7d, 0x74, 0x57, 0x01, 0xbd, 0x19,
	0xa2, 0xf1, 0xa7, 0x26, 0x1c, 0x07, 0x91, 0x2b, 0xda, 0x69, 0x7b, 0x5e, 0xd6, 0x6e, 0xe1, 0x10,
	0xde, 0x81, 0x15, 0x1a, 0x6e, 0xc7, 0x3f, 0x60, 0xc4, 0xac, 0x62, 0x14, 0x49, 0xe7, 0x2e, 0xe1,
	0x98, 0xcb, 0x46, 0x39, 0x90, 0xef, 0x82, 0x85, 0xbd, 0x9c, 0x5e, 0x8b, 0x75, 0x54, 0x0f, 0xd2,
	0xc2, 0x35, 0xde, 0x03, 0x1b, 0x62, 0xc3, 0xbe, 0xef, 0x3b, 0x83, 0xb6, 0x02, 0x7e, 0x4b, 0x0d,
	0xfb, 0x23, 0x5e, 0x1f, 0xc3, 0xec, 0xb3, 0xfd, 0x41, 0x2f, 0x02, 0x3e, 0xad, 0x30, 0xdb, 0xd8,
	0x20, 0xa1, 0x2f, 0xc2, 0x7c, 0xc7, 0x6b, 0x39, 0x1d, 0xf7, 0x5b, 0x87, 0x5b, 0xbc, 0x41, 0xfd,
	0x0c, 0x52, 0xbf, 0x59, 0x69, 0xed, 0x40, 0x6d, 0x7f, 0xd0, 0xe9, 0x34, 0x75, 0x73, 0xf9, 0x2c,
	0x8a, 0xc4, 0x4b, 0x09, 0x91, 0xf8, 0x68, 0xd0, 0xe9, 0x3c, 0x88, 0xe0, 0x84, 0x15, 0xb3, 0x6f,
	0xd6, 0x5a, 0xcf, 0x61, 0x21, 0x38, 0xf4, 0xfc, 0xd0, 0x40, 0x79, 0x2e, 0x66, 0x6a, 0x4a, 0x94,
	0xcf, 0x39, 0x64, 0x02, 0x67, 0x2d, 0x88, 0x55, 0x5b, 0x1f, 0x00, 0x08, 0x41, 0xe2, 0xb2, 0xa0,
	0x7e, 0x1e, 0xb1, 0xd5, 0x15, 0xb6, 0xc7, 0x8e, 0x12, 0x28, 0xdb, 0x21, 0xeb, 0xda, 0x1a, 0xac,
	0xb5, 0x01, 0xf9, 0x96, 0x77, 0xc4, 0x7c, 0x34, 0x14, 0xf4, 0x4e, 0xdb, 0x5d, 0xe7, 0x80, 0x6d,
	0x79, 0x9d, 0x0e, 0x6b, 0xf1, 0x47, 0xd8, 0x04, 0x66, 0x7d, 0x09, 0xb5, 0x84, 0x62, 0xbe, 0x80,
	0x5d, 0xcf, 0xc6, 0xdf, 0x3e, 0xa6, 0xa0, 0xed, 0xea, 0x51, 0x4c, 0x63, 0x9f, 0x82, 0xe2, 0x91,
	0x13, 0x36, 0xd1, 0x26, 0x17, 0xf6, 0x44, 0xe1, 0xc8, 0x09, 0x77, 0x78, 0x79, 0xfd, 0x1e, 0x14,
	0x95, 0x8e, 0x99, 0x54, 0x75, 0xa6, 0xcd, 0xc4, 0x44, 0x38, 0xb6, 0x60, 0x39, 0x75, 0xe8, 0x27,
	0xd2, 0xbf, 0xff, 0x23, 0x0f, 0x65, 0x31, 0x14, 0xa8, 0x7a, 0x26, 0x57, 0xc2, 0xb7, 0x0d, 0x25,
	0x9c, 0x18, 0x60, 0xc4, 0x9a, 0xd0, 0xc4, 0xb1, 0x55, 0xd5, 0xcc, 0xd0, 0x55, 0x55, 0xde, 0x5c,
	0x55, 0x25, 0x54, 0xc2, 0x6c, 0x8a, 0x4a, 0x30, 0x05, 0xfc, 0x5c, 0x5c, 0xc0, 0xa7, 0x4a, 0xec,
	0xc2, 0x04, 0x12, 0xbb, 0x38, 0x91, 0xc4, 0x86, 0x2c, 0x89, 0x9d, 0x6a, 0x45, 0x94, 0x32, 0xac,
	0x88, 0x6c, 0x59, 0x56, 0x9e, 0x58, 0x96, 0xcd, 0x4f, 0x22, 0xcb, 0x2a, 0x93, 0xc8, 0xb2, 0x6a,
	0x86, 0x2c, 0x8b, 0xd4, 0x47, 0xcd, 0x50, 0x1f, 0x1f, 0xc1, 0x9a, 0x22, 0x30, 0xdf, 0x3b, 0x76,
	0x3a, 0xe1, 0x71, 0xc4, 0xb5, 0x0b, 0x88, 0x6c, 0x55, 0x02, 0xd8, 0xd4, 0x2e, 0x99, 0xf3, 0xc4,
	0xfc, 0xd7, 0xf8, 0xdd, 0x29, 0xa8, 0x3e, 0x15, 0x48, 0xb7, 0xbc, 0x5e, 0xe8, 0xb4, 0x42, 0xeb,
	0x3e, 0x80, 0x33, 0x08, 0x0f, 0x3d, 0xdf, 0xfd, 0x96, 0x11, 0x07, 0x94, 0x6e, 0x35, 0x14, 0x39,
	0xc7, 0xa0, 0x37, 0x15, 0xa4, 0xad, 0xf5, 0xb2, 0x3e, 0x83, 0x62, 0xc8, 0x5a, 0x87, 0x3d, 0xb7,
	0xe5, 0x74, 0xf0, 0xa9, 0xa5, 0x5b, 0xe7, 0xb3, 0x50, 0xec, 0x4a, 0x40, 0x3b, 0xea, 0xd3, 0xf8,
	0x21, 0xd4, 0xb3, 0xc0, 0xf8, 0x7a, 0x0b, 0x39, 0x8d, 0xbe, 0x90, 0x18, 0x69, 0x09, 0xf2, 0x44,
	0xbc, 0xe2, 0x13, 0xb1, 0xc0, 0x6b, 0xc9, 0xa3, 0x30, 0x4d, 0xb5, 0x58, 0x68, 0xbc, 0x82, 0xb5,
	0xcc, 0xaf, 0x78, 0x53, 0xe4, 0xb8, 0x70, 0xf7, 0x02, 0x17, 0x35, 0x85, 0xf0, 0xff, 0xc8, 0x72,
	0xe3, 0xcf, 0xb4, 0xd1, 0xbe, 0xef, 0xf4, 0x5e, 0xba, 0xbd, 0x03, 0xc3, 0x5f, 0x34, 0x15, 0xf3,
	0x17, 0xc9, 0x77, 0xc9, 0x69, 0xef, 0x52, 0x87, 0x39, 0xa7, 0xdd, 0xf6, 0xb9, 0xb4, 0x98, 0x16,
	0x3e, 0x24, 0x2a, 0x72, 0x4b, 0x40, 0x70, 0xa5, 0x5c, 0x72, 0xd3, 0xf3, 0xe7, 0x45, 0xad, 0x58,
	0x72, 0x2f, 0x41, 0x3e, 0x78, 0xe5, 0xee, 0x4b, 0x17, 0x14, 0x15, 0x38, 0xda, 0x36, 0x0b, 0x85,
	0x18, 0x41, 0xb4, 0xa2, 0x68, 0xdd, 0x86, 0xe5, 0x96, 0xe7, 0xfb, 0x2c, 0xe8, 0x7b, 0xbd, 0x36,
	0x5a, 0xaa, 0x82, 0xf5, 0x49, 0x98, 0x2c, 0x19, 0x8d, 0x82, 0xff, 0x1b, 0xbf, 0x06, 0x96, 0xfc,
	0xd0, 0x27, 0x4e, 0xc0, 0xb5, 0x04, 0xb7, 0x36, 0x37, 0x60, 0x86, 0x9b, 0x2d, 0x82, 0xa6, 0x86,
	0x19, 0x38, 0x08, 0xa7, 0xf9, 0xd8, 0x72, 0xba, 0x8f, 0xad, 0xf1, 0xa7, 0x53, 0x50, 0x96, 0xe8,
	0xf9, 0x6a, 0x3d, 0x21, 0xac, 0xd3, 0x27, 0xec, 0x34, 0xc0, 0xbe, 0xeb, 0x07, 0x61, 0x53, 0xc8,
	0x69, 0x94, 0x85, 0x58, 0x83, 0x5e, 0xc4, 0x53, 0x50, 0xec, 0x38, 0xb2, 0x75, 0x46, 0xfa, 0x63,
	0x44, 0x23, 0xf9, 0x0a, 0xf7, 0xdd, 0x0e, 0xe3, 0xd2, 0x3f, 0xaf, 0x7c, 0x85, 0xbc, 0x66, 0xbb,
	0x6d, 0x7d, 0x01, 0x0b, 0x3e, 0x3b, 0x70, 0x83, 0xd0, 0x47, 0x5b, 0xa4, 0x89, 0x9f, 0x39, 0x3b,
	0xf2, 0x33, 0x6b, 0x7a, 0xa7, 0x07, 0x4e, 0xc8, 0x1a, 0x7f, 0x92, 0x83, 0xc5, 0x88, 0x38, 0xbb,
	0x7d, 0xa7, 0x77, 0xbc, 0xdd, 0xdb, 0xf7, 0x52, 0xc9, 0xf2, 0x6d, 0xa8, 0x39, 0x9d, 0x90, 0xf9,
	0x3d, 0x27, 0x74, 0x8f, 0x58, 0x53, 0x23, 0x95, 0xaa, 0x56, 0xff, 0x4c, 0x50, 0xcd, 0x2b, 0xb6,
	0x17, 0xb8, 0xa1, 0xfc, 0x6e, 0x59, 0xe4, 0x2d, 0x38, 0x65, 0xbe, 0x74, 0x57, 0xca, 0x22, 0x12,
	0x4a, 0xc8, 0xbf, 0x43, 0x12, 0x0a, 0x2f, 0x70, 0xe9, 0xf2, 0xad, 0xdb, 0x17, 0x44, 0xc2, 0x7f,
	0xf2, 0x57, 0x6b, 0xb9, 0xa1, 0x54, 0x2e, 0xf8, 0x5b, 0xa7, 0xd2, 0x82, 0x49, 0xa5, 0xd7, 0xc1,
	0x12, 0x3f, 0x9b, 0x4e, 0xbb, 0x8d, 0x7c, 0xe1, 0x74, 0x84, 0x1a, 0x59, 0x10, 0x2d, 0x9b, 0xaa,
	0xc1, 0xba, 0x01, 0x8b, 0xc6, 0xc0, 0x0a, 0xca, 0x26, 0x45, 0x62, 0xe9, 0x4d, 0x82, 0xbc, 0x97,
	0x61, 0x36, 0x74, 0x5e, 0xf3, 0x49, 0x2a, 0x09, 0x8f, 0x8f, 0xf3, 0x7a, 0xbb, 0xdd, 0xf8, 0x8d,
	0x29, 0x58, 0xd1, 0xc7, 0xb5, 0xc3, 0x42, 0xd6, 0x7e, 0x1e, 0xb2, 0x7e, 0x40, 0x23, 0x80, 0x23,
	0x8d, 0xa3, 0x5b, 0xb0, 0x65, 0x11, 0x79, 0x93, 0x04, 0x44, 0x80, 0x03, 0x5b, 0xb0, 0x55, 0x99,
	0xf7, 0xda, 0x23, 0x16, 0xc6, 0x11, 0x2d, 0xd8, 0xb2, 0xc8, 0xa9, 0x36, 0x74, 0x7c, 0x77, 0x7f,
	0x1f, 0x07, 0xb4, 0x60, 0x8b, 0x52, 0xe3, 0xff, 0x87, 0x4b, 0xf2, 0x0d, 0x36, 0x0f, 0x7c, 0xc6,
	0xb8, 0x36, 0x78, 0x2e, 0xd7, 0x50, 0x0f, 0x9c, 0xd0, 0xe1, 0x85, 0x6f, 0xfc, 0x0e, 0xd7, 0xf9,
	0x7c, 0x6d, 0x85, 0x1e, 0x2f, 0x9a, 0xef, 0xb9, 0x40, 0x34, 0x7d, 0x08, 0xc0, 0x5e, 0xf7, 0x5d,
	0x9f, 0x05, 0x7c, 0xa1, 0x90, 0x1b, 0xbd, 0x50, 0x10, 0xd0, 0x9b, 0x61, 0xe3, 0x6f, 0x4f, 0xc3,
	0x99, 0xe1, 0xcf, 0xe7, 0xd6, 0x88, 0xe0, 0x7a, 0xed, 0xd9, 0x20, 0xaa, 0xf8, 0xe3, 0x4f, 0x41,
	0x91, 0x13, 0x3c, 0x35, 0x13, 0xa9, 0x15, 0xb0, 0x82, 0x37, 0xde, 0x84, 0x25, 0x73, 0xb1, 0xc8,
	0x02, 0x34, 0x95, 0x88, 0xe0, 0x2c, 0x63, 0xb9, 0xc8, 0x02, 0x6e, 0x32, 0xdd, 0x82, 0x65, 0xa5,
	0xf2, 0xa2, 0xae, 0x6e, 0x5b, 0x50, 0xe2, 0xa2, 0x6c, 0x54, 0x6f, 0xb9, 0xdd, 0xb6, 0x2e, 0x43,
	0xb5, 0x1f, 0x98, 0xd0, 0x79, 0xe1, 0xed, 0x0e, 0x74, 0xb8, 0x1f, 0xc2, 0x82, 0x81, 0x1b, 0x5f,
	0x99, 0x38, 0x72, 0x23, 0xa1, 0x89, 0x86, 0xce, 0x87, 0x5d, 0xd5, 0xdf, 0x83, 0x7f, 0xe9, 0x33,
	0x28, 0x89, 0x77, 0x40, 0xac, 0x73, 0x27, 0xc2, 0x5a, 0xa4, 0xf7, 0xfd, 0xc6, 0xef, 0x34, 0xfe,
	0x60, 0x0a, 0x2a, 0xb2, 0xd3, 0x2e, 0x12, 0x8b, 0xf5, 0x29, 0xcc, 0x49, 0x43, 0x62, 0x0a, 0x0d,
	0xca, 0x0b, 0x09, 0xf4, 0x04, 0x69, 0x3b, 0x21, 0x93, 0x66, 0x94, 0x2d, 0xfb, 0x58, 0x9f, 0xc3,
	0x6c, 0x1f, 0x65, 0xae, 0xa0, 0x91, 0xab, 0xc3, 0x7a, 0x3f, 0x67, 0x61, 0xe8, 0xf6, 0x0e, 0x02,
	0x5c, 0x6f, 0x88, 0x7e, 0x9c, 0x16, 0x0e, 0xbd, 0x2e, 0x9f, 0x48, 0x74, 0xbb, 0xd3, 0x24, 0x02,
	0xaf, 0xb2, 0xb1, 0xa6, 0xf1, 0xfb, 0x16, 0x14, 0x24, 0xb2, 0x84, 0x00, 0x7e, 0x5b, 0x38, 0x58,
	0xe9, 0xe9, 0xcb, 0x89, 0xa7, 0x6b, 0x3e, 0xd6, 0xbb, 0x11, 0xfb, 0x4d, 0x23, 0xf4, 0x5b, 0x29,
	0x86, 0x82, 0x12, 0x84, 0x11, 0x73, 0xde, 0xd1, 0x98, 0xb3, 0x1a, 0x5b, 0x0f, 0xc5, 0xd4, 0xbb,
	0xc6, 0xb6, 0xb7, 0x22, 0xb6, 0xad, 0x65, 0x74, 0x12, 0x9a, 0xd9, 0x60, 0x68, 0x61, 0xb1, 0x2d,
	0x0c, 0x59, 0xf0, 0x5b, 0x27, 0x5f, 0xf0, 0x2f, 0x4e, 0xb2, 0xe0, 0x7f, 0x00, 0x35, 0xd2, 0x62,
	0xca, 0x73, 0x14, 0xa2, 0x6f, 0x63, 0x38, 0x82, 0x0a, 0xf6, 0x91, 0x3e, 0x25, 0xbe, 0xa2, 0xae,
	0xb8, 0x41, 0x93, 0xaf, 0xe8, 0x58, 0xcf, 0xd9, 0xeb, 0xb0, 0x36, 0x3a, 0x3c, 0x0a, 0x76, 0xd9,
	0x0d, 0x5e, 0x38, 0xe1, 0x43, 0xaa, 0xb3, 0x3e, 0x87, 0xd3, 0x6e, 0xd0, 0x6c, 0x79, 0xdd, 0xae,
	0x1b, 0x04, 0x5c, 0xfc, 0x86, 0x5e, 0x93, 0x4f, 0x9a, 0xea, 0xb4, 0x82, 0x9d, 0xd6, 0xdc, 0x60,
	0x4b, 0xc1, 0xec, 0x7a, 0x7c, 0x72, 0x25, 0x86, 0x3b, 0xb0, 0x72, 0xe8, 0x04, 0xcd, 0x24, 0x9b,
	0xa3, 0x83, 0xa4, 0x60, 0x2f, 0x1d, 0x3a, 0xc1, 0xd3, 0x38, 0x9b, 0x73, 0xeb, 0x9b, 0xf7, 0xea,
	0x07, 0x7d, 0xad, 0x43, 0x9d, 0x96, 0x25, 0x87, 0x4e, 0xb0, 0x13, 0xf4, 0x23, 0xd8, 0x4f, 0xa0,
	0x84, 0x6a, 0x5b, 0xd0, 0xfb, 0x1a, 0x0e, 0xc5, 0xa9, 0xc4, 0xac, 0x46, 0x66, 0x88, 0x0d, 0x9d,
	0xc8, 0x24, 0x39, 0x05, 0x45, 0x97, 0x58, 0x99, 0xb5, 0xd1, 0x15, 0x52, 0xb0, 0x0b, 0x2e, 0x32,
	0x26, 0x6b, 0x5b, 0xcf, 0xa0, 0x6a, 0x6e, 0xac, 0x05, 0xf5, 0xb7, 0x62, 0xfe, 0x04, 0x89, 0x7e,
	0x63, 0x47, 0xdf, 0x6b, 0x13, 0xfb, 0x43, 0x15, 0x63, 0x03, 0x8e, 0x2c, 0x34, 0x29, 0x13, 0xc8,
	0x83, 0x7f, 0x1a, 0x09, 0x6a, 0x5e, 0xd5, 0xa2, 0xef, 0xfe, 0x7d, 0x58, 0x8d, 0xc0, 0x02, 0xfe,
	0xe7, 0xc8, 0x75, 0x9a, 0x68, 0xcf, 0x9c, 0xa1, 0x41, 0x53, 0xcd, 0xcf, 0x59, 0x2f, 0x7c, 0xe1,
	0x3a, 0x4f, 0xb9, 0x79, 0x83, 0x0e, 0x45, 0xb7, 0xd3, 0x0c, 0x7d, 0xa7, 0xc5, 0xe9, 0xb6, 0xd9,
	0x71, 0x7b, 0x2f, 0xc5, 0x86, 0x45, 0x8d, 0xb7, 0xec, 0x8a, 0x86, 0x27, 0x6e, 0xef, 0x25, 0xae,
	0xfc, 0x6e, 0x37, 0xa3, 0xe7, 0xa0, 0xf5, 0x40, 0x3b, 0x18, 0xd5, 0xe0, 0xb6, 0x12, 0x5d, 0x68,
	0x3d, 0xbc, 0x0b, 0x16, 0x8d, 0x6e, 0xb3, 0xe5, 0x05, 0xca, 0x55, 0x79, 0x9e, 0x5c, 0x95, 0xd4,
	0xb2, 0xe5, 0x05, 0xd2, 0x55, 0x79, 0x13, 0x96, 0x74, 0x68, 0x65, 0xdd, 0xd2, 0xee, 0x86, 0x15,
	0xc1, 0x2b, 0xdf, 0xc2, 0x3b, 0xb0, 0x20, 0x1c, 0xa7, 0xbc, 0x97, 0x40, 0x7f, 0x01, 0xd1, 0x57,
	0xc9, 0x6f, 0xea, 0x0d, 0x24, 0xf6, 0x8f, 0x60, 0xcd, 0xf7, 0x70, 0xec, 0x9b, 0xc2, 0x63, 0xdd,
	0x0c, 0x0f, 0x7d, 0x16, 0x1c, 0x7a, 0x9d, 0x36, 0xfa, 0x25, 0xa6, 0xec, 0x55, 0x01, 0x60, 0x53,
	0xfb, 0xae, 0x6c, 0xe6, 0x6f, 0x16, 0xef, 0xdb, 0x76, 0x8e, 0x03, 0xdc, 0xff, 0xc8, 0xdb, 0x96,
	0xd9, 0xed, 0x81, 0x73, 0x1c, 0x58, 0x87, 0xf0, 0x5e, 0xbc, 0x87, 0xb6, 0xec, 0x0c, 0x7d, 0xa7,
	0x17, 0x38, 0xe8, 0x72, 0x09, 0xb4, 0xb7, 0xb8, 0x8c, 0x6f, 0x71, 0xdd, 0x44, 0x17, 0x2d, 0x48,
	0x77, 0xb5, 0x5e, 0xd1, 0xbb, 0xdd, 0x80, 0x25, 0x37, 0x64, 0xdd, 0x26, 0x1f, 0x08, 0x7d, 0x94,
	0xaf, 0x20, 0xb2, 0x05, 0xde, 0xf6, 0xd4, 0xed, 0x69, 0xc3, 0x7c, 0x1b, 0x56, 0xcc, 0x0e, 0x6a,
	0xa0, 0xaf, 0x8a, 0x6d, 0xa1, 0xa8, 0x8b, 0x1a, 0xe9, 0xb7, 0xa1, 0xd6, 0x62, 0xbd, 0xd0, 0x77,
	0xf7, 0x07, 0x07, 0x5e, 0x93, 0x76, 0xc6, 0xde, 0xa6, 0x49, 0x8f, 0xea, 0x77, 0x71, 0x8f, 0xcc,
	0x81, 0xba, 0x46, 0x85, 0x4a, 0xdf, 0xe2, 0x36, 0xe1, 0x35, 0x64, 0xb2, 0x2b, 0x63, 0x6a, 0x3c,
	0x7b, 0xc5, 0x49, 0xb7, 0x37, 0xde, 0xe7, 0x16, 0x26, 0xeb, 0x07, 0xf5, 0x8d, 0x98, 0x53, 0x2a,
	0xdd, 0x52, 0xb3, 0x09, 0x1a, 0x4d, 0xc8, 0x88, 0x8d, 0x58, 0xb7, 0xdf, 0xe1, 0x56, 0xea, 0x0d,
	0x61, 0x42, 0x2a, 0x56, 0x12, 0x0d, 0xd6, 0x67, 0x40, 0x9b, 0x8e, 0x47, 0xac, 0x4d, 0x76, 0xf9,
	0xcd, 0x91, 0xd2, 0xb2, 0x2c, 0x3b, 0x70, 0x9b, 0xdc, 0xfa, 0x1a, 0x56, 0x48, 0xe2, 0x37, 0x51,
	0xd0, 0x68, 0x82, 0xfb, 0xbd, 0x91, 0x98, 0x16, 0xa9, 0x27, 0x97, 0x3e, 0xdf, 0x28, 0x11, 0x7e,
	0x1e, 0xca, 0x28, 0xde, 0xc8, 0x33, 0x14, 0xd4, 0x6f, 0x21, 0x57, 0x97, 0xb8, 0x64, 0x13, 0x55,
	0x68, 0xdb, 0x47, 0xbc, 0x49, 0x46, 0xef, 0x6d, 0x61, 0xdb, 0x2b, 0xde, 0x24, 0x8b, 0xf7, 0x26,
	0x2c, 0x75, 0xdd, 0x9e, 0xdb, 0x75, 0x3a, 0x92, 0x83, 0x70, 0x5f, 0xa2, 0x7e, 0xe7, 0xdc, 0xd4,
	0xd5, 0x9c, 0x6d, 0x89, 0x36, 0x62, 0xa2, 0x27, 0xbc, 0xc5, 0xba, 0xa1, 0x2c, 0xd4, 0xf7, 0xf1,
	0x03, 0x56, 0xb3, 0xac, 0x03, 0x01, 0xc6, 0xa5, 0x78, 0xd7, 0xe9, 0x0d, 0xd4, 0x13, 0x02, 0xa5,
	0x00, 0xee, 0x92, 0x40, 0xa2, 0x56, 0x7a, 0x46, 0x20, 0x65, 0xff, 0x1a, 0x14, 0xba, 0xad, 0x56,
	0xb3, 0xe5, 0xb5, 0x59, 0xfd, 0x1e, 0xd9, 0xb1, 0xdd, 0x56, 0x6b, 0xcb, 0x6b, 0x33, 0xfe, 0xce,
	0x5e, 0x9f, 0x71, 0xc3, 0xbd, 0x77, 0xd0, 0x14, 0x1a, 0x9d, 0x9b, 0x72, 0x1f, 0x90, 0x8c, 0x50,
	0x6d, 0x52, 0xf3, 0xb7, 0xad, 0x0f, 0xa0, 0xae, 0x94, 0x88, 0x68, 0x46, 0xae, 0xe3, 0x52, 0xf4,
	0x43, 0xec, 0xb5, 0x22, 0xdb, 0xbf, 0x56, 0xcd, 0x28, 0x4e, 0x2f, 0x43, 0xb5, 0xed, 0xf5, 0x42,
	0xc1, 0xb8, 0x5c, 0xe7, 0xd5, 0x3f, 0xc2, 0xb7, 0x9e, 0xe7, 0xd5, 0xc4, 0x97, 0x2f, 0x9c, 0x70,
	0xdd, 0x81, 0xc5, 0x14, 0x21, 0x9e, 0xe2, 0x4e, 0xb9, 0xa3, 0xbb, 0x53, 0x4a, 0xb7, 0xce, 0x24,
	0x46, 0xcf, 0x40, 0xa3, 0xbb, 0x5b, 0xfe, 0xba, 0x66, 0xe8, 0x71, 0x8d, 0xe9, 0xf5, 0x12, 0x96,
	0x53, 0xda, 0x9a, 0x5f, 0xf7, 0x11, 0x4c, 0xc7, 0x7c, 0x04, 0x91, 0x71, 0x32, 0x63, 0x18, 0x27,
	0x71, 0x1a, 0xcb, 0x27, 0x68, 0xac, 0xf1, 0x39, 0xac, 0x3f, 0x3f, 0x0e, 0x42, 0xd6, 0x45, 0x2f,
	0x9f, 0xdb, 0xc2, 0x31, 0x7b, 0x8e, 0xdd, 0x59, 0xc0, 0x5f, 0x64, 0xdf, 0xf7, 0xba, 0xf8, 0x6a,
	0x79, 0x1b, 0x7f, 0xf3, 0x97, 0x0d, 0x3d, 0x7c, 0xb5, 0xbc, 0x9d, 0x0b, 0xbd, 0xc6, 0xbf, 0xcf,
	0x41, 0x59, 0xef, 0x9c, 0xf8, 0x9a, 0x3a, 0xcc, 0x75, 0x59, 0x10, 0x38, 0x07, 0x6a, 0xdd, 0x29,
	0x8a, 0x71, 0x7f, 0xea, 0x4c, 0xc2, 0x9f, 0xba, 0x0a, 0x73, 0x68, 0x6a, 0x28, 0x03, 0x7f, 0x96,
	0x17, 0xb7, 0xdb, 0x52, 0x65, 0xe3, 0x9b, 0xa3, 0x45, 0x4f, 0x2a, 0x1b, 0xcb, 0x22, 0xd8, 0xc2,
	0x67, 0x4e, 0x1b, 0xcd, 0x72, 0x0c, 0xb6, 0xb0, 0x99, 0xd3, 0xb6, 0x3e, 0x83, 0x42, 0x20, 0x3e,
	0x0d, 0x97, 0xa4, 0xba, 0x45, 0x9d, 0x3d, 0x0a, 0xb6, 0xea, 0x14, 0xb3, 0xf6, 0x8a, 0x27, 0xb7,
	0xf6, 0x60, 0x02, 0x6b, 0xaf, 0xd1, 0x85, 0x1a, 0x7a, 0x8e, 0x77, 0x44, 0xe4, 0xc0, 0x23, 0xa6,
	0xbb, 0x45, 0xa6, 0x90, 0xc5, 0xd3, 0x42, 0x8f, 0x72, 0x31, 0x32, 0xb9, 0x04, 0x15, 0xb6, 0xbf,
	0xcf, 0x5a, 0xe8, 0x29, 0xf0, 0x1d, 0xe1, 0x07, 0xc8, 0xd9, 0xf3, 0xaa, 0x96, 0x2f, 0x05, 0x1a,
	0xfb, 0x50, 0xc0, 0xc7, 0xed, 0x3a, 0xaf, 0x55, 0x58, 0xc3, 0x94, 0x16, 0xd6, 0x60, 0xc1, 0x0c,
	0x76, 0x26, 0x7f, 0x0c, 0xfe, 0x3e, 0x49, 0x24, 0x54, 0xe3, 0x5b, 0x58, 0xc4, 0xe7, 0xdc, 0xa7,
	0x19, 0xd8, 0x14, 0xce, 0x01, 0xcd, 0x19, 0x31, 0x65, 0x3a, 0x23, 0xa4, 0x93, 0x21, 0xa7, 0x39,
	0x19, 0xce, 0x42, 0xa9, 0xef, 0x05, 0xa1, 0xd3, 0x21, 0x11, 0x23, 0x96, 0x28, 0x54, 0x85, 0x52,
	0x46, 0x79, 0x30, 0x66, 0x34, 0x0f, 0x46, 0xe3, 0x9f, 0xce, 0x40, 0x51, 0x05, 0x7a, 0x24, 0x28,
	0x76, 0x05, 0x66, 0xbd, 0x3d, 0xce, 0x1f, 0xe2, 0x51, 0xa2, 0xc4, 0x1f, 0xc6, 0x5e, 0xa3, 0x53,
	0xa5, 0x13, 0x2d, 0x6a, 0x41, 0x56, 0x6d, 0x47, 0x8c, 0x3b, 0x93, 0xe6, 0x38, 0xcc, 0xeb, 0x7e,
	0x28, 0x3e, 0x17, 0x68, 0xa9, 0x61, 0x28, 0x96, 0xcb, 0xda, 0x82, 0x8a, 0xe7, 0xb1, 0xf6, 0x85,
	0xa8, 0x8c, 0xfc, 0x8b, 0x73, 0xba, 0x7f, 0xf1, 0x12, 0x54, 0xf0, 0x47, 0xd4, 0x99, 0xdc, 0xf5,
	0xf3, 0x58, 0xab, 0x3a, 0xf3, 0xcf, 0xea, 0x0b, 0xb7, 0x4a, 0xce, 0xed, 0xf3, 0xcf, 0xc2, 0xcd,
	0x32, 0x26, 0x5c, 0x27, 0xa2, 0xc4, 0x57, 0x5f, 0xd2, 0x51, 0x53, 0x8a, 0xad, 0xbe, 0x52, 0x26,
	0x28, 0x72, 0xe3, 0x7c, 0xa2, 0xc5, 0x20, 0x95, 0xd1, 0x26, 0x3e, 0x97, 0x8c, 0xa2, 0xc9, 0x0c,
	0x3d, 0x3a, 0x0d, 0x10, 0xb2, 0xd6, 0xa1, 0x11, 0x0f, 0x86, 0xce, 0x5f, 0xb5, 0xd3, 0x20, 0x36,
	0x24, 0x7a, 0xec, 0x95, 0x5c, 0x81, 0xd2, 0x26, 0x76, 0x95, 0x1a, 0x9e, 0xb1, 0x57, 0xb4, 0x0c,
	0xe5, 0xc6, 0x72, 0x02, 0x56, 0xe0, 0x25, 0x0f, 0xfc, 0x52, 0xac, 0x07, 0x3e, 0xe2, 0x8d, 0x02,
	0x3e, 0x1a, 0x5f, 0xc1, 0x69, 0xfc, 0x46, 0x5d, 0x62, 0xd0, 0xf6, 0x41, 0x87, 0xc4, 0x20, 0xa7,
	0x56, 0x4e, 0x92, 0x82, 0x75, 0xf8, 0x6f, 0x0a, 0x61, 0x73, 0x02, 0xaf, 0x27, 0x09, 0x8b, 0x4a,
	0x8d, 0xbf, 0x79, 0x16, 0xf2, 0xe9, 0x5b, 0x4e, 0x16, 0xcc, 0x60, 0xcc, 0x91, 0xa0, 0x79, 0xfe,
	0xdb, 0x3a, 0x07, 0x25, 0xcd, 0xea, 0x14, 0x64, 0xa8, 0x57, 0x69, 0x04, 0x3c, 0x63, 0x10, 0x70,
	0xa4, 0x28, 0x84, 0x38, 0x15, 0x8a, 0x02, 0x37, 0x90, 0x29, 0x0c, 0x4c, 0xb4, 0xcf, 0xd2, 0xa2,
	0x44, 0xd4, 0x92, 0x28, 0x1c, 0x23, 0x0c, 0xd1, 0x14, 0x90, 0x85, 0x93, 0x0b, 0xc8, 0xe2, 0x24,
	0xcb, 0xe1, 0x8f, 0xa1, 0x44, 0x5b, 0x3a, 0xe3, 0x0a, 0x57, 0x90, 0xe0, 0x9b, 0x24, 0xa2, 0x44,
	0x09, 0xc9, 0xbf, 0x60, 0xab, 0xb2, 0xf5, 0x25, 0x94, 0x5b, 0xda, 0x9c, 0xe2, 0xde, 0x52, 0x22,
	0xc2, 0x30, 0x8b, 0x02, 0x6c, 0xa3, 0x2f, 0x7f, 0x0e, 0xed, 0x0e, 0xb1, 0x36, 0x52, 0x7b, 0xc1,
	0x56, 0x65, 0xfe, 0x01, 0xf2, 0x37, 0xff, 0x80, 0xca, 0xe8, 0x0f, 0x90, 0xe0, 0x9b, 0x18, 0x16,
	0x22, 0xe3, 0xe7, 0x74, 0x9a, 0x2f, 0x8b, 0x4a, 0x62, 0x27, 0x0d, 0x88, 0x04, 0x4a, 0xcd, 0x00,
	0xda, 0x91, 0x72, 0x25, 0x16, 0xb0, 0xb7, 0x30, 0x46, 0xc0, 0x9e, 0x95, 0x08, 0xd8, 0xbb, 0x06,
	0x91, 0x09, 0xce, 0x65, 0x54, 0xc0, 0xc7, 0x8e, 0x22, 0x35, 0x22, 0x8b, 0xf6, 0x05, 0xd5, 0x9b,
	0x96, 0xbc, 0xd3, 0x6a, 0xb1, 0x7e, 0xc8, 0xda, 0x22, 0x4a, 0x32, 0x42, 0xb3, 0x29, 0x1a, 0xf8,
	0xc3, 0x05, 0xaf, 0x07, 0x5c, 0x92, 0x91, 0xc7, 0x02, 0xa8, 0xea, 0x39, 0x97, 0x66, 0x91, 0xe0,
	0xe0, 0x00, 0x62, 0x48, 0x56, 0xc8, 0x6c, 0x8e, 0xc0, 0x68, 0x54, 0xde, 0x85, 0x59, 0x0a, 0x9c,
	0x13, 0xa1, 0x1a, 0x4b, 0xe6, 0xcc, 0x6e, 0x53, 0x50, 0x9d, 0x80, 0xe1, 0x06, 0x6b, 0xe8, 0x85,
	0x4e, 0x27, 0x1e, 0xaf, 0x53, 0x47, 0x95, 0x67, 0x61, 0x9b, 0x19, 0xb1, 0xa3, 0xab, 0xbf, 0xb5,
	0x98, 0x36, 0x96, 0xf1, 0x87, 0xeb, 0x23, 0xe2, 0x0f, 0x1f, 0x42, 0x55, 0x34, 0x35, 0xa5, 0x94,
	0x3e, 0x35, 0x86, 0x94, 0xae, 0xec, 0x99, 0x6a, 0xf5, 0x02, 0x4c, 0x87, 0xce, 0x6b, 0x0c, 0xc5,
	0x28, 0xdd, 0x5a, 0x30, 0xbb, 0xee, 0x3a, 0xaf, 0x6d, 0xde, 0x6a, 0xdd, 0x4f, 0x44, 0x11, 0x9f,
	0x8e, 0xb9, 0x52, 0x0c, 0xb3, 0x16, 0x3b, 0xc7, 0x43, 0x8c, 0xaf, 0x42, 0x9e, 0xaf, 0x3a, 0x29,
	0x3e, 0x23, 0xf1, 0x61, 0xe8, 0x5f, 0x24, 0x00, 0xeb, 0x03, 0x2e, 0x0d, 0x39, 0x19, 0xa3, 0x83,
	0x22, 0xa1, 0x3d, 0x74, 0xbe, 0xa2, 0xed, 0x53, 0x5b, 0xc0, 0x5b, 0x1f, 0x68, 0x9a, 0x87, 0x42,
	0x31, 0x62, 0x83, 0x91, 0xa9, 0x75, 0x9e, 0xa5, 0x04, 0xbc, 0x9e, 0x8f, 0x39, 0x57, 0x09, 0xc3,
	0x78, 0x31, 0xae, 0x37, 0x60, 0x4e, 0x98, 0xd7, 0x22, 0x20, 0x63, 0x39, 0x75, 0xd3, 0xdf, 0x96,
	0x50, 0xd6, 0x55, 0xfe, 0x02, 0x14, 0x70, 0xae, 0xa2, 0xbd, 0x29, 0x86, 0xb3, 0xd2, 0xd7, 0x3a,
	0x6c, 0xb7, 0xad, 0x2b, 0x50, 0x95, 0x90, 0x72, 0xbb, 0xed, 0xa2, 0x01, 0x28, 0x37, 0xda, 0xbf,
	0x81, 0x35, 0x09, 0x88, 0x8b, 0x53, 0xe1, 0x77, 0x27, 0x59, 0x72, 0x69, 0xa4, 0x2c, 0x59, 0x11,
	0x9d, 0xf9, 0xfa, 0xd4, 0x96, 0x5d, 0x37, 0x43, 0xeb, 0x31, 0xc8, 0x07, 0xc9, 0xe8, 0xe8, 0xcb,
	0x38, 0x50, 0xe7, 0x13, 0x03, 0x85, 0x40, 0x7a, 0x50, 0xf4, 0x7c, 0x5f, 0xaf, 0xb3, 0x7e, 0x0c,
	0x67, 0x4c, 0xb2, 0x12, 0x9f, 0xde, 0xea, 0x78, 0x01, 0xbd, 0xe5, 0x95, 0x91, 0x6f, 0xb9, 0xde,
	0x4f, 0x50, 0xde, 0x16, 0x76, 0xdf, 0x0c, 0xf9, 0xea, 0x4e, 0x44, 0x57, 0xcb, 0x6f, 0x47, 0xff,
	0x47, 0xc1, 0x9e, 0xa7, 0x28, 0x6b, 0x19, 0xec, 0x7f, 0x1e, 0xca, 0x22, 0xe6, 0x90, 0x18, 0xf7,
	0x6d, 0x64, 0xdc, 0x12, 0xd6, 0x09, 0x8e, 0xfd, 0x0c, 0xde, 0x8a, 0xbd, 0x2a, 0x05, 0xa5, 0xcb,
	0x19, 0x78, 0x07, 0x67, 0x60, 0xcd, 0x78, 0x19, 0x8c, 0x7f, 0x91, 0x93, 0xc1, 0x60, 0x2d, 0x86,
	0x20, 0x7c, 0xdd, 0x93, 0x03, 0x78, 0x2d, 0x2d, 0xbc, 0xdc, 0xe4, 0xa9, 0xdd, 0xd7, 0x3d, 0x7d,
	0x24, 0x57, 0xfa, 0xa9, 0x8d, 0xd6, 0x2e, 0xba, 0xe3, 0xf0, 0x31, 0x18, 0x93, 0x17, 0xb8, 0x21,
	0x0b, 0xea, 0xef, 0xc6, 0x3c, 0x93, 0x06, 0x7e, 0x5b, 0xc1, 0x11, 0xea, 0x85, 0x7e, 0xbc, 0xde,
	0xda, 0x85, 0x35, 0xda, 0x2c, 0x42, 0x27, 0x49, 0x33, 0xf4, 0x9a, 0x14, 0xbc, 0xdc, 0xeb, 0x0f,
	0xc2, 0xfa, 0xf5, 0x91, 0x73, 0xb4, 0x4c, 0x9d, 0x1f, 0x38, 0x21, 0xdb, 0xf5, 0x1e, 0x79, 0x7e,
	0x77, 0x9b, 0x77, 0xb4, 0x3e, 0x86, 0x75, 0x5c, 0xc5, 0xc9, 0x3d, 0x3f, 0xce, 0x38, 0x51, 0x24,
	0xe1, 0x06, 0x45, 0x09, 0x73, 0x08, 0x21, 0xab, 0xd0, 0x5f, 0x24, 0xe3, 0x09, 0xf5, 0x20, 0xf8,
	0x1b, 0xb1, 0x20, 0xf8, 0x1f, 0xc1, 0xb2, 0x1b, 0x50, 0xdc, 0x8a, 0x90, 0x13, 0x01, 0xfa, 0x4a,
	0xeb, 0x37, 0x71, 0x1c, 0xae, 0xc4, 0xc6, 0x61, 0x3b, 0xd0, 0x45, 0x4a, 0xf0, 0x9c, 0xf5, 0x42,
	0x1a, 0x89, 0x45, 0x37, 0xd9, 0x62, 0x3d, 0x81, 0x45, 0xb1, 0xf0, 0x68, 0xfa, 0x2c, 0x08, 0x7d,
	0x97, 0xac, 0xad, 0xf7, 0x62, 0x02, 0x71, 0x8b, 0x60, 0xec, 0x08, 0xc4, 0xb6, 0x5a, 0x89, 0x3a,
	0x4e, 0x7a, 0x12, 0x1b, 0x5a, 0x85, 0xb7, 0xc8, 0x76, 0x12, 0x75, 0xb8, 0x52, 0xb9, 0x07, 0xe5,
	0xbe, 0xe3, 0xf3, 0x19, 0x45, 0x82, 0x44, 0x57, 0x8f, 0xae, 0x92, 0x76, 0xb0, 0x91, 0xc4, 0x49,
	0xa9, 0x1f, 0x15, 0xac, 0x47, 0xb0, 0x20, 0x3a, 0x6a, 0xdb, 0x01, 0x77, 0x46, 0xce, 0x56, 0x95,
	0x3a, 0x45, 0xfb, 0x01, 0x72, 0xb1, 0xf7, 0xbe, 0xb6, 0xd8, 0xbb, 0x0a, 0x35, 0xb1, 0x47, 0xd0,
	0x66, 0x7c, 0xd0, 0xf9, 0x10, 0x90, 0xbf, 0xa7, 0x82, 0xbb, 0x04, 0x0f, 0x64, 0x2d, 0xff, 0x42,
	0x31, 0x31, 0xe4, 0x90, 0x79, 0x48, 0x5f, 0x28, 0xea, 0x76, 0x53, 0x02, 0xe2, 0x1f, 0x25, 0x02,
	0xe2, 0x2d, 0x98, 0x79, 0xc9, 0x8e, 0x83, 0xfa, 0x17, 0x38, 0xd1, 0xf8, 0x9b, 0x1b, 0xf7, 0x6e,
	0xd0, 0x7c, 0xc9, 0x8e, 0x65, 0x50, 0xab, 0x98, 0x70, 0xd6, 0xae, 0x3f, 0x26, 0xc7, 0x93, 0x1b,
	0x7c, 0xc5, 0x8e, 0x45, 0x58, 0xeb, 0x33, 0xd1, 0x46, 0xf1, 0xcd, 0x64, 0xa4, 0xb8, 0xed, 0xfa,
	0xb6, 0x8c, 0x6f, 0xc6, 0x9a, 0xed, 0xb6, 0x75, 0x17, 0x56, 0xe3, 0x61, 0x71, 0x52, 0x2a, 0x7c,
	0x89, 0x52, 0x61, 0x39, 0x16, 0xfc, 0x26, 0xe4, 0xc3, 0x88, 0x90, 0xf7, 0xaf, 0x86, 0x87, 0xbc,
	0xeb, 0xde, 0xb0, 0x27, 0xe3, 0x79, 0xc3, 0x9e, 0x66, 0x7a, 0xc3, 0xce, 0x41, 0xd9, 0x0d, 0x9a,
	0x87, 0xee, 0xc1, 0x61, 0xd3, 0x77, 0x83, 0x97, 0xf5, 0x67, 0xf2, 0xe0, 0xc3, 0x63, 0xf7, 0xe0,
	0xd0, 0x76, 0x83, 0x97, 0xd6, 0x1d, 0x58, 0x71, 0xa3, 0x88, 0xe5, 0x66, 0xdf, 0x67, 0x6d, 0xb6,
	0xef, 0xf6, 0x58, 0xbb, 0xfe, 0xb5, 0x1c, 0x39, 0xf9, 0x6a, 0x3b, 0xaa, 0x8d, 0xeb, 0x1d, 0xe1,
	0x26, 0x53, 0x9f, 0xb5, 0x43, 0x7a, 0x87, 0xaa, 0xd5, 0xd7, 0x5c, 0x80, 0x79, 0x01, 0x28, 0x46,
	0xee, 0x7b, 0x38, 0x72, 0x65, 0xaa, 0x8c, 0x42, 0x9c, 0x25, 0x55, 0xba, 0xfd, 0xa6, 0x5c, 0xd9,
	0xdb, 0x64, 0x0c, 0x8a, 0x96, 0xed, 0xbe, 0xe0, 0x22, 0xeb, 0x23, 0x58, 0x77, 0x03, 0x0d, 0xb0,
	0xd9, 0x75, 0x83, 0xae, 0x13, 0xb6, 0x0e, 0x9b, 0x7b, 0x6e, 0xaf, 0xfe, 0x9c, 0x42, 0xbc, 0xdd,
	0x40, 0x75, 0x78, 0x2a, 0x9a, 0xef, 0xbb, 0x3d, 0xeb, 0x01, 0x9c, 0x95, 0x86, 0x92, 0x62, 0xb5,
	0x43, 0xa7, 0x77, 0xc0, 0xda, 0xcd, 0xbd, 0x63, 0xdc, 0xb2, 0xaa, 0xef, 0x22, 0x82, 0x53, 0x02,
	0x4c, 0xe0, 0xd8, 0x22, 0xa0, 0xfb, 0xc7, 0xe8, 0x0b, 0x78, 0x07, 0x16, 0xd0, 0x79, 0x84, 0x71,
	0x5c, 0x22, 0x36, 0xbd, 0xfe, 0x0d, 0xad, 0x3b, 0xdd, 0x80, 0xec, 0x10, 0x11, 0x93, 0x6e, 0xc6,
	0x43, 0xbe, 0x30, 0xe3, 0x21, 0xf9, 0xe8, 0x44, 0x81, 0xd8, 0x9c, 0x6d, 0xbe, 0x2f, 0x37, 0xd7,
	0x76, 0x54, 0xdd, 0x2f, 0xfd, 0xcc, 0xc1, 0xfa, 0xe7, 0x60, 0x25, 0xf5, 0xf7, 0x44, 0x18, 0xb6,
	0xe1, 0xd4, 0x10, 0x05, 0x36, 0x11, 0xaa, 0x07, 0xb0, 0x92, 0xae, 0xab, 0x26, 0xc2, 0xf2, 0x08,
	0xea, 0x59, 0x92, 0x7e, 0x14, 0x9e, 0x82, 0xbe, 0xc2, 0x7f, 0x0f, 0x4a, 0x9a, 0xc8, 0x15, 0x2b,
	0xf3, 0xdb, 0x89, 0x95, 0xf9, 0x9d, 0x68, 0x65, 0xde, 0xf8, 0xcd, 0x29, 0xb0, 0x92, 0x0a, 0xc1,
	0x3a, 0x03, 0x25, 0x37, 0xf0, 0x90, 0xed, 0x9b, 0xce, 0x2d, 0x79, 0xca, 0xd0, 0x0d, 0x3c, 0xce,
	0xf9, 0x9b, 0xb7, 0xac, 0xb7, 0x41, 0x72, 0x42, 0xa0, 0x48, 0x8e, 0x5e, 0x47, 0xee, 0x3d, 0x06,
	0x92, 0xe4, 0x2e, 0x41, 0x85, 0x88, 0x5a, 0x01, 0x52, 0xe4, 0xc9, 0x3c, 0xd5, 0x0a, 0xb0, 0xc6,
	0xff, 0x99, 0x16, 0xfe, 0x2d, 0x6e, 0x6f, 0x8f, 0xed, 0xdf, 0xaa, 0xc1, 0x74, 0xf0, 0x72, 0x20,
	0x1c, 0x0a, 0xfc, 0x67, 0xaa, 0x43, 0x2b, 0xe6, 0x05, 0xc8, 0x27, 0xbd, 0x00, 0x91, 0x37, 0x70,
	0x36, 0xd3, 0x1b, 0x38, 0x97, 0xf4, 0x61, 0xbb, 0x5d, 0xe7, 0x00, 0x3d, 0xb3, 0x5c, 0xf8, 0x8b,
	0x12, 0x7f, 0x27, 0xbe, 0xc8, 0x24, 0x2f, 0x16, 0xff, 0x69, 0xb8, 0x9d, 0x20, 0xcd, 0xed, 0xc4,
	0xbf, 0x39, 0x73, 0x01, 0x60, 0x7a, 0x28, 0x4a, 0x27, 0xf7, 0x50, 0x94, 0x27, 0xf1, 0x50, 0xc4,
	0x34, 0xdf, 0x7c, 0x9a, 0xe6, 0x43, 0xad, 0x50, 0x89, 0xbc, 0x45, 0x6f, 0xea, 0x9f, 0x9a, 0x27,
	0xa7, 0xb1, 0x73, 0xe0, 0xf6, 0x9c, 0x10, 0xfd, 0x90, 0x2d, 0xe5, 0x30, 0xce, 0xdb, 0x54, 0xb0,
	0x2e, 0xca, 0xd5, 0x5a, 0x0e, 0x47, 0xb2, 0x62, 0x8e, 0xa4, 0x58, 0xa9, 0x35, 0xfe, 0x64, 0x1a,
	0xac, 0xe4, 0xca, 0x6f, 0xac, 0x7d, 0x8b, 0x91, 0x3e, 0xd3, 0x3b, 0x30, 0x2b, 0xac, 0xe3, 0x99,
	0xd8, 0xb2, 0x76, 0xc7, 0x34, 0xb2, 0x39, 0x8c, 0x2d, 0x60, 0xb9, 0x98, 0x96, 0x6a, 0x85, 0x76,
	0x01, 0xa2, 0x3d, 0x02, 0xc9, 0x33, 0xe4, 0xd1, 0xdf, 0x46, 0x27, 0xea, 0x81, 0xef, 0x0d, 0x64,
	0xc0, 0x1a, 0x15, 0xd0, 0x31, 0xec, 0x1c, 0x31, 0xb9, 0x47, 0x40, 0x05, 0x6b, 0x03, 0x66, 0x5a,
	0x8e, 0xdf, 0x56, 0xae, 0xab, 0xd4, 0x77, 0xd9, 0x72, 0xfc, 0xb6, 0x8d, 0x70, 0xfc, 0xed, 0x5f,
	0x39, 0x9d, 0x0e, 0x93, 0x1e, 0xab, 0x8c, 0xb7, 0xff, 0x3e, 0xc2, 0xd8, 0x02, 0x96, 0xaf, 0xe9,
	0x5b, 0xfe, 0x71, 0x3f, 0xf4, 0xcc, 0xe3, 0x44, 0x99, 0xdd, 0xb7, 0x10, 0xd8, 0xae, 0x50, 0xa7,
	0x2d, 0xed, 0x2c, 0xf1, 0xa1, 0xd3, 0x6b, 0x77, 0x98, 0x2f, 0x02, 0xdd, 0x64, 0x91, 0x3c, 0x39,
	0x86, 0x0a, 0x2b, 0x93, 0x98, 0xf0, 0x75, 0x05, 0xd6, 0xf8, 0x1b, 0xb9, 0xd8, 0x7e, 0x97, 0x58,
	0x5d, 0x0c, 0x0b, 0x48, 0x3d, 0x0b, 0xa5, 0x90, 0xf9, 0x5d, 0x57, 0x4c, 0xa8, 0x08, 0x82, 0x97,
	0x55, 0xdb, 0x28, 0x5d, 0x28, 0xb8, 0x5c, 0x4c, 0xb6, 0x28, 0x71, 0xbb, 0x42, 0x84, 0xa1, 0xcb,
	0x68, 0x6e, 0x31, 0x61, 0x15, 0xaa, 0xde, 0x12, 0xb5, 0xd6, 0x2a, 0xcc, 0x39, 0x7d, 0x57, 0x05,
	0x6b, 0x15, 0xed, 0x59, 0xa7, 0xef, 0x8a, 0xa0, 0x38, 0x65, 0x3e, 0xcd, 0x8d, 0x67, 0x3e, 0x15,
	0x32, 0xcd, 0xa7, 0x25, 0xc8, 0xef, 0xf9, 0x4e, 0xaf, 0x5d, 0x2f, 0xa2, 0xbc, 0xa1, 0x42, 0xe3,
	0x4f, 0x73, 0x30, 0xbf, 0xa3, 0xd3, 0xcf, 0x58, 0x44, 0x5e, 0x87, 0x39, 0x21, 0xf6, 0xe5, 0x16,
	0x97, 0x34, 0x68, 0x6e, 0xc0, 0xa2, 0x58, 0x3a, 0xe2, 0x8b, 0x99, 0x7b, 0x21, 0x56, 0xd4, 0xa4,
	0x9f, 0xa5, 0xd3, 0x3a, 0xf4, 0x99, 0xef, 0x7a, 0x92, 0xb0, 0x6b, 0x51, 0xc3, 0x0e, 0xd6, 0x8b,
	0x6d, 0x30, 0x07, 0xf7, 0x6e, 0xa2, 0x6d, 0xb0, 0x4d, 0x2c, 0xc7, 0x24, 0xdd, 0xdc, 0xc9, 0x25,
	0x5d, 0x61, 0x12, 0x49, 0xa7, 0xd1, 0x64, 0xd1, 0xa0, 0xc9, 0xc6, 0x7f, 0x9b, 0x82, 0x85, 0x04,
	0x1b, 0x71, 0x6a, 0xc1, 0xb0, 0xa4, 0xbb, 0x62, 0x88, 0x45, 0x89, 0x4f, 0x4f, 0xc7, 0x09, 0xc2,
	0x3b, 0x52, 0xb2, 0x61, 0x81, 0x43, 0x77, 0x9d, 0xe0, 0x25, 0x93, 0x82, 0x44, 0x94, 0xf8, 0xe2,
	0x03, 0xd7, 0x9e, 0xc7, 0xcd, 0xae, 0xd7, 0x0b, 0x0f, 0xc5, 0xf8, 0x96, 0xa8, 0xee, 0x29, 0xaf,
	0x22, 0x41, 0x84, 0x20, 0xc7, 0xcc, 0xf1, 0xc5, 0x90, 0x52, 0x24, 0xe5, 0xf1, 0x0f, 0x98, 0xe3,
	0x47, 0x04, 0x21, 0xc4, 0x04, 0x16, 0xb8, 0xb6, 0xdb, 0x77, 0x7b, 0x07, 0xcc, 0xef, 0xfb, 0xae,
	0x0a, 0x78, 0xd6, 0xab, 0x38, 0xb3, 0x04, 0xac, 0x35, 0xf0, 0xd9, 0x6d, 0xb9, 0x0f, 0xa3, 0xca,
	0x8d, 0x87, 0x31, 0xfe, 0x22, 0x39, 0x10, 0x3d, 0x6a, 0x4a, 0x7f, 0x94, 0x96, 0x1a, 0x20, 0x67,
	0xa4, 0x06, 0x48, 0xa0, 0x21, 0x79, 0x30, 0x04, 0x8d, 0x70, 0x14, 0xe6, 0x8c, 0xb8, 0xdb, 0xc6,
	0x3f, 0x9f, 0xe2, 0x16, 0xa3, 0xb0, 0xf6, 0x74, 0x9f, 0x5d, 0x9c, 0xc6, 0xd7, 0xa1, 0x20, 0x19,
	0x5a, 0xee, 0x22, 0xca, 0x32, 0x2e, 0xc8, 0x9d, 0x20, 0x78, 0xe5, 0xf9, 0x72, 0x12, 0x54, 0xd9,
	0x3c, 0xc2, 0x21, 0x81, 0x66, 0x62, 0x47, 0x38, 0x24, 0xb0, 0x49, 0x9f, 0xf9, 0x09, 0xe8, 0xb3,
	0xf1, 0xef, 0x66, 0x15, 0x97, 0x66, 0x7c, 0x41, 0x1a, 0x97, 0x2a, 0x3d, 0x30, 0xad, 0xeb, 0x81,
	0x98, 0x82, 0xca, 0x27, 0x14, 0x54, 0xfa, 0x91, 0xce, 0xb9, 0x89, 0x8e, 0x74, 0x16, 0x32, 0x8e,
	0x74, 0xca, 0x25, 0x77, 0x51, 0x5b, 0x72, 0x6b, 0x31, 0xfc, 0x3e, 0x3b, 0x60, 0xaf, 0xfb, 0x62,
	0xbb, 0x4e, 0xc6, 0xf0, 0xdb, 0x58, 0x69, 0xf2, 0x7e, 0x29, 0xc6, 0xfb, 0xa9, 0xea, 0xb1, 0x9c,
	0xae, 0x1e, 0x9f, 0xc2, 0x7c, 0xc8, 0x82, 0xb0, 0x19, 0x88, 0x10, 0x50, 0x3c, 0x56, 0xaa, 0x87,
	0x8b, 0x1a, 0x23, 0xbd, 0xb1, 0xcb, 0x82, 0x50, 0x46, 0x8b, 0x92, 0x71, 0x55, 0x0e, 0xb5, 0x2a,
	0xab, 0x09, 0x8b, 0xd1, 0xa2, 0x27, 0x42, 0x5a, 0x41, 0xa4, 0x1b, 0x19, 0x48, 0xa3, 0x25, 0x91,
	0x89, 0xda, 0xea, 0x27, 0x1a, 0x62, 0x74, 0x53, 0x3d, 0xb9, 0x5c, 0xab, 0x4d, 0x78, 0xc6, 0x32,
	0xa6, 0x51, 0x17, 0x52, 0x34, 0xea, 0xfa, 0xaf, 0xc3, 0x42, 0x62, 0x80, 0x52, 0xec, 0xb6, 0x5b,
	0x66, 0xf8, 0xc8, 0x70, 0x9b, 0x47, 0x5b, 0xdb, 0xb4, 0x60, 0x35, 0x63, 0xa8, 0xbe, 0xbb, 0x87,
	0x34, 0xfe, 0x70, 0x1a, 0x20, 0x8a, 0xe5, 0x4c, 0xb0, 0x96, 0x46, 0x5b, 0xc2, 0xc3, 0xa9, 0xcc,
	0x80, 0xaa, 0xe1, 0xad, 0xdc, 0x6e, 0xc7, 0xd2, 0xab, 0x4c, 0xc7, 0xd3, 0xab, 0x7c, 0x94, 0x70,
	0x96, 0x46, 0x71, 0xa6, 0x28, 0x37, 0xa6, 0xec, 0x55, 0x03, 0xa5, 0xf6, 0x5a, 0x97, 0x28, 0x2f,
	0x83, 0xd6, 0x21, 0x8f, 0x1d, 0xe6, 0xfb, 0x41, 0x5f, 0x03, 0xbb, 0x07, 0x75, 0xda, 0xb4, 0x49,
	0x46, 0xb0, 0x8a, 0xd5, 0xc9, 0x32, 0xb6, 0xc7, 0x83, 0x57, 0x39, 0xad, 0x04, 0xa1, 0xe3, 0x87,
	0x14, 0x2f, 0x36, 0x86, 0xfa, 0x44, 0x68, 0x0c, 0x16, 0xfb, 0xa5, 0xec, 0x82, 0x36, 0xee, 0x02,
	0x70, 0x8d, 0xfa, 0x10, 0x7d, 0xb0, 0x5c, 0xd8, 0x91, 0x2a, 0x14, 0xba, 0x01, 0x0b, 0x5c, 0xde,
	0xa0, 0xf6, 0x13, 0x62, 0x91, 0xff, 0x6e, 0xfc, 0x7f, 0x50, 0x7c, 0xce, 0x6d, 0x5f, 0x54, 0xc7,
	0xf1, 0xc9, 0xae, 0xc1, 0x74, 0xdf, 0x91, 0xdb, 0xd5, 0xfc, 0x27, 0x97, 0x97, 0xdc, 0xf2, 0x6d,
	0x1e, 0x7a, 0x9d, 0x36, 0xf3, 0xa5, 0x41, 0xcf, 0xab, 0x1e, 0x63, 0x8d, 0x75, 0x0d, 0x66, 0xc9,
	0x0f, 0x2c, 0x0c, 0xfa, 0xc5, 0xc8, 0x57, 0xaa, 0x5e, 0xcf, 0x16, 0x20, 0x8d, 0xff, 0x3c, 0x05,
	0x75, 0x41, 0x8e, 0x8f, 0x3c, 0xbf, 0x3b, 0xb9, 0x50, 0x97, 0x12, 0x74, 0x5a, 0x93, 0xa0, 0x4a,
	0xd0, 0xcf, 0xe8, 0x82, 0x3e, 0x29, 0x57, 0xf3, 0x69, 0x72, 0xf5, 0x32, 0x54, 0x0f, 0x9d, 0xa0,
	0x89, 0xcb, 0x81, 0x26, 0xff, 0xac, 0x40, 0x86, 0x66, 0x1c, 0x3a, 0x81, 0x1a, 0xa8, 0xc0, 0xba,
	0x0d, 0x25, 0x1d, 0x66, 0x2e, 0xb6, 0xdb, 0xa5, 0x20, 0x6d, 0x08, 0x54, 0xa7, 0xc6, 0xaf, 0xc3,
	0xf5, 0xd4, 0x00, 0xb1, 0x1d, 0xe6, 0x6b, 0x21, 0xa1, 0x1a, 0xf9, 0xd6, 0x60, 0x7a, 0x9f, 0x51,
	0x10, 0xc1, 0x94, 0xcd, 0x7f, 0x0e, 0x8b, 0xf0, 0x69, 0xfc, 0xce, 0x14, 0x9c, 0x4b, 0xc5, 0x1f,
	0x61, 0x0c, 0x52, 0x50, 0x36, 0xa1, 0xda, 0x67, 0xbe, 0x1e, 0xca, 0x2a, 0x44, 0xc6, 0xdd, 0xe1,
	0x61, 0x6d, 0x59, 0x6f, 0x6d, 0x57, 0xfa, 0x46, 0x4b, 0xe3, 0x5f, 0x67, 0xbd, 0xd7, 0x76, 0x2f,
	0x64, 0x07, 0x14, 0xa8, 0x17, 0x5f, 0x58, 0x4c, 0x25, 0x16, 0x16, 0xd7, 0x60, 0x41, 0x01, 0x28,
	0xeb, 0x82, 0x86, 0xa0, 0x26, 0x1b, 0x94, 0x75, 0xf1, 0x09, 0xac, 0x2b, 0xe0, 0xa4, 0x4d, 0x42,
	0xd4, 0x52, 0x97, 0x10, 0x5b, 0x71, 0xdb, 0xe4, 0x0c, 0x80, 0x2b, 0x5e, 0x8d, 0xb5, 0xc5, 0x19,
	0x1e, 0xad, 0xa6, 0xb1, 0x0d, 0x17, 0xd2, 0xbf, 0xa7, 0xcd, 0x7a, 0x43, 0x42, 0xe1, 0x52, 0x08,
	0xb8, 0xf1, 0x7b, 0x39, 0x58, 0x4e, 0xc5, 0x65, 0x3d, 0x4f, 0xec, 0xc6, 0xd2, 0xe1, 0x88, 0x77,
	0x87, 0xcf, 0x8a, 0xf9, 0x0e, 0xf1, 0xed, 0xd9, 0x6d, 0x80, 0x98, 0x8c, 0xd5, 0x53, 0x07, 0x8d,
	0x22, 0x1e, 0x5b, 0xeb, 0x6c, 0x7d, 0x05, 0x25, 0x37, 0x9a, 0x3f, 0x61, 0xc1, 0x8d, 0xc0, 0xa5,
	0x4d, 0xb8, 0xad, 0xf7, 0x1e, 0xba, 0x94, 0x69, 0x3c, 0x87, 0xaa, 0x3a, 0x40, 0xcb, 0x7c, 0x8c,
	0x1b, 0xce, 0x0e, 0x13, 0x13, 0xa7, 0xd3, 0x72, 0xd1, 0xe9, 0x34, 0x15, 0x03, 0x36, 0xad, 0xc7,
	0x80, 0xbd, 0x07, 0x25, 0x42, 0x3a, 0x76, 0xe4, 0x4d, 0xe3, 0x6f, 0xcd, 0xc0, 0x2c, 0xf5, 0x49,
	0x80, 0x7f, 0x0c, 0x15, 0xcf, 0x77, 0x0f, 0x90, 0xde, 0x68, 0xff, 0x26, 0x17, 0xdb, 0xbf, 0xd1,
	0x1e, 0x66, 0xcf, 0x4b, 0x58, 0x7a, 0xf6, 0x48, 0x27, 0x49, 0xe4, 0x51, 0x9b, 0x31, 0x3c, 0x6a,
	0x6f, 0x01, 0xe9, 0x0e, 0xcf, 0xdf, 0x56, 0x27, 0x12, 0x55, 0x85, 0x16, 0x6e, 0x34, 0xab, 0x87,
	0x1b, 0x8d, 0xf2, 0xc3, 0x89, 0x10, 0xa0, 0xc2, 0x90, 0x83, 0x2e, 0xbf, 0xa0, 0xd0, 0x47, 0xeb,
	0x1e, 0x50, 0x06, 0x30, 0x0a, 0x39, 0x2f, 0xc5, 0x4e, 0xeb, 0xc4, 0x68, 0xc2, 0x2e, 0xf6, 0x15,
	0x79, 0x9c, 0x82, 0x62, 0xe0, 0x74, 0x58, 0xd0, 0x0c, 0x9d, 0xd7, 0x68, 0xf8, 0xe6, 0xec, 0x02,
	0x56, 0xec, 0x3a, 0xaf, 0x85, 0x6b, 0x3e, 0x0a, 0xe2, 0x17, 0xf1, 0x38, 0x65, 0x37, 0x88, 0x22,
	0xf4, 0xad, 0xab, 0x50, 0x93, 0x1f, 0xac, 0x36, 0xea, 0x2b, 0x62, 0x1f, 0x84, 0xea, 0xc5, 0x46,
	0x7d, 0xe3, 0x3f, 0x4d, 0xc1, 0x5b, 0xa9, 0xc4, 0xfe, 0xd8, 0x0d, 0x42, 0xcf, 0x3f, 0x9e, 0x3c,
	0x8f, 0xc0, 0x03, 0x30, 0xb9, 0x56, 0x30, 0xfe, 0xa8, 0x28, 0xe3, 0x18, 0xab, 0x9b, 0x53, 0x36,
	0x33, 0xc9, 0x94, 0x65, 0x05, 0xde, 0x36, 0xfe, 0xcd, 0x14, 0xd4, 0xb6, 0x06, 0x41, 0xe8, 0x75,
	0x79, 0x91, 0x0b, 0x1a, 0x0a, 0xc2, 0xd4, 0xbf, 0x67, 0x2a, 0xf1, 0x3d, 0xa6, 0x19, 0x98, 0x8b,
	0x9b, 0x81, 0x19, 0x3a, 0x9c, 0x8c, 0xd7, 0x19, 0xcd, 0xb3, 0xc9, 0x29, 0x57, 0xc5, 0x3c, 0x52,
	0x34, 0xb3, 0x2a, 0xc7, 0x3e, 0x77, 0x76, 0x92, 0xf5, 0xe4, 0x8f, 0x61, 0x41, 0x7d, 0x54, 0x5f,
	0x9f, 0xb5, 0x3e, 0x7e, 0x4c, 0x19, 0xc3, 0x27, 0x4d, 0xfc, 0xb9, 0x49, 0xf0, 0xff, 0xe3, 0x29,
	0x58, 0x91, 0x0f, 0x10, 0x9b, 0xdc, 0xf2, 0x29, 0xbf, 0x88, 0x70, 0xd7, 0x37, 0x59, 0x6a, 0x77,
	0x61, 0x5d, 0xbe, 0xf9, 0xf3, 0xd0, 0x77, 0x7b, 0x07, 0x2f, 0xf8, 0x44, 0xc8, 0xb7, 0x57, 0xb3,
	0x34, 0xa5, 0xcf, 0xd2, 0x1b, 0x8c, 0xd4, 0xef, 0x14, 0xa1, 0x20, 0x9f, 0x97, 0xe0, 0x1b, 0x33,
	0x64, 0x34, 0x17, 0x0f, 0x19, 0x1d, 0x29, 0x45, 0x55, 0x28, 0xee, 0xcc, 0xf0, 0x50, 0xdc, 0xfc,
	0xd0, 0x50, 0xdc, 0xd9, 0xe1, 0xa1, 0xb8, 0x73, 0x69, 0xa1, 0xb8, 0x52, 0xf1, 0x17, 0x34, 0xcb,
	0x35, 0x0a, 0xcf, 0x2d, 0x0f, 0x0d, 0xcf, 0xbd, 0x02, 0x55, 0x0a, 0x8b, 0x6b, 0xaa, 0x4c, 0x81,
	0xe4, 0xed, 0xad, 0x50, 0xf5, 0x13, 0x99, 0x2f, 0xf0, 0x34, 0x00, 0xc5, 0x59, 0x1c, 0x44, 0x79,
	0x30, 0x8a, 0x18, 0x57, 0xc1, 0x2b, 0xf4, 0x30, 0xdf, 0xf9, 0x49, 0xc2, 0x7c, 0xdf, 0x87, 0x82,
	0x2b, 0x38, 0x5d, 0xac, 0xe2, 0xd7, 0x22, 0x8b, 0x3e, 0x26, 0x0a, 0x6c, 0x05, 0xca, 0x89, 0xc0,
	0xed, 0x37, 0x0f, 0x89, 0x50, 0xea, 0xd5, 0x58, 0x5a, 0xb2, 0x04, 0xbb, 0xd9, 0x45, 0x57, 0x71,
	0xde, 0x63, 0xa8, 0xca, 0x58, 0x11, 0xd9, 0xbf, 0x16, 0xcb, 0xa8, 0x92, 0xce, 0x4d, 0x76, 0xc5,
	0x31, 0xb9, 0xeb, 0x4b, 0xa8, 0xd0, 0x28, 0x2a, 0x44, 0x0b, 0xb1, 0x60, 0xaf, 0x6c, 0xe2, 0x16,
	0xa9, 0x85, 0x14, 0xad, 0xff, 0x08, 0x56, 0x63, 0xf3, 0xa0, 0x90, 0x5a, 0xe3, 0x23, 0x5d, 0x36,
	0x27, 0x4d, 0x22, 0xff, 0x58, 0xdb, 0xd4, 0x5a, 0xcc, 0xf8, 0xd6, 0x31, 0xf7, 0xb4, 0x96, 0x4e,
	0xae, 0x9b, 0x97, 0x27, 0xdc, 0xd3, 0xd2, 0x23, 0x31, 0x57, 0xc6, 0x8b, 0xc4, 0x5c, 0x4d, 0x8f,
	0xc4, 0x4c, 0x0d, 0xf7, 0xae, 0x4f, 0x1c, 0xee, 0xbd, 0xf6, 0xf3, 0x0a, 0xf7, 0xfe, 0x02, 0x16,
	0xf1, 0x48, 0x1c, 0x9e, 0x6b, 0x45, 0xb9, 0x80, 0x92, 0x2e, 0x5d, 0xfe, 0xe9, 0x5a, 0x2a, 0x67,
	0x6a, 0x29, 0x03, 0x11, 0x46, 0xdd, 0x9e, 0x14, 0xd1, 0x55, 0xa8, 0x29, 0x44, 0xdb, 0xfd, 0x21,
	0x58, 0x1a, 0xef, 0xc2, 0x92, 0x82, 0x7c, 0x82, 0x24, 0x3d, 0x0c, 0xfa, 0x32, 0x54, 0x14, 0xf4,
	0x30, 0xb8, 0xdf, 0x9e, 0x81, 0xa2, 0x02, 0x4c, 0x88, 0xea, 0x5b, 0x7a, 0xf6, 0x0d, 0x5d, 0xd4,
	0xa4, 0x8c, 0xa2, 0x14, 0xc4, 0xb7, 0xa4, 0x84, 0x9d, 0xc9, 0xea, 0x13, 0x0d, 0x98, 0x94, 0xbf,
	0xd7, 0x84, 0x60, 0x9d, 0x8d, 0x1d, 0x62, 0x33, 0x3f, 0x41, 0x25, 0xcb, 0xe0, 0x12, 0x97, 0x5c,
	0x39, 0x6b, 0x49, 0x50, 0x31, 0x8a, 0x28, 0x8c, 0xdf, 0x57, 0xc2, 0x98, 0xdc, 0x37, 0xa7, 0x93,
	0xe0, 0xda, 0x50, 0xa6, 0x1d, 0xa5, 0x28, 0x9e, 0xf4, 0x28, 0x45, 0x7c, 0x4f, 0x5b, 0x3d, 0x70,
	0xd8, 0x51, 0x0a, 0x4d, 0xf0, 0x97, 0xe2, 0x82, 0x3f, 0x45, 0x81, 0x94, 0xd3, 0x14, 0xc8, 0x9b,
	0x71, 0xc8, 0x23, 0x58, 0xc1, 0x37, 0x95, 0x5e, 0x49, 0x9b, 0x85, 0x03, 0x1f, 0x53, 0x25, 0xd4,
	0x61, 0x4e, 0x26, 0xb7, 0x92, 0xa9, 0x2c, 0x44, 0x66, 0x2b, 0x0b, 0x66, 0xf6, 0x23, 0x55, 0x8e,
	0xbf, 0x1b, 0x3f, 0x80, 0x05, 0x03, 0x0f, 0x46, 0x30, 0x88, 0xc8, 0x84, 0xa9, 0x28, 0x32, 0x21,
	0x5a, 0x11, 0xe5, 0xc7, 0x3e, 0x71, 0xf4, 0x1b, 0x33, 0x30, 0x6f, 0xe0, 0x1e, 0x65, 0x98, 0xfe,
	0x0a, 0x80, 0x8f, 0x9f, 0x81, 0x9b, 0x91, 0xd3, 0xb1, 0x13, 0xaa, 0xe9, 0x9f, 0x6b, 0x17, 0x7d,
	0xf5, 0xe5, 0xc3, 0x12, 0x41, 0x67, 0x7d, 0x40, 0x32, 0x93, 0xf3, 0x6c, 0x5a, 0x26, 0xe7, 0x58,
	0x14, 0x46, 0x21, 0x19, 0x85, 0x11, 0x05, 0xe4, 0x05, 0x4d, 0xb7, 0x1d, 0x88, 0x7d, 0x4e, 0x19,
	0x90, 0x17, 0x6c, 0xb7, 0x03, 0xeb, 0xf3, 0x04, 0xd9, 0x5d, 0x4c, 0xff, 0xba, 0x4c, 0xd2, 0x8b,
	0x05, 0x36, 0x94, 0xd2, 0x02, 0x1b, 0xd0, 0xb6, 0x2f, 0x6b, 0xb6, 0xfd, 0x88, 0x20, 0xba, 0xf9,
	0xa1, 0x41, 0x74, 0x6f, 0x46, 0xa5, 0xbf, 0x99, 0x83, 0x92, 0x16, 0xdb, 0x2f, 0xc3, 0x4b, 0xa6,
	0xa2, 0xf0, 0x92, 0x75, 0x28, 0xa8, 0x5c, 0xc2, 0x42, 0xe6, 0xca, 0x32, 0x5f, 0x6e, 0x47, 0x99,
	0x7a, 0xa7, 0x65, 0x4c, 0xa1, 0xcc, 0xd1, 0x4b, 0x5b, 0x04, 0x7a, 0x72, 0xde, 0x19, 0x79, 0x7c,
	0x22, 0x3b, 0x2d, 0x6f, 0x7e, 0x78, 0x5a, 0xde, 0xd9, 0x51, 0x69, 0x79, 0xe7, 0x92, 0x69, 0x79,
	0xf1, 0xac, 0xc7, 0x3e, 0xf3, 0x7d, 0xe6, 0x37, 0x0f, 0xbd, 0x20, 0x14, 0xc4, 0x51, 0x96, 0x95,
	0x8f, 0xbd, 0x20, 0x6c, 0xfc, 0xb3, 0x29, 0x58, 0xcd, 0x08, 0xb3, 0x8f, 0x1d, 0x2e, 0x9c, 0x1a,
	0xeb, 0x70, 0x61, 0xe4, 0x6b, 0x98, 0x36, 0x7c, 0x0d, 0x32, 0xb0, 0x65, 0x46, 0x3b, 0x06, 0x95,
	0x3c, 0x67, 0x92, 0x1f, 0xe3, 0x9c, 0xc9, 0x6c, 0xfc, 0x9c, 0x49, 0x63, 0x03, 0x16, 0xbe, 0x60,
	0xa1, 0x0a, 0xb8, 0xa2, 0x20, 0xef, 0x35, 0x28, 0xc8, 0x60, 0x2b, 0x29, 0x6e, 0x44, 0xa4, 0x55,
	0xe3, 0x33, 0x58, 0x14, 0xc0, 0x2f, 0x9c, 0x30, 0x3a, 0x76, 0x2f, 0x9d, 0xe2, 0xf4, 0xb1, 0xf8,
	0x9b, 0x53, 0xd0, 0x2b, 0xcf, 0xef, 0xb4, 0xc5, 0x29, 0x47, 0x2a, 0x34, 0xfe, 0xd7, 0xac, 0xda,
	0xe8, 0x4f, 0x68, 0xbc, 0x58, 0x90, 0x57, 0x2e, 0x1e, 0xe4, 0x15, 0xa5, 0x2f, 0x9f, 0x36, 0xd2,
	0x97, 0x0f, 0x93, 0x11, 0x69, 0x81, 0x61, 0xf9, 0x71, 0x03, 0xc3, 0x66, 0x53, 0x02, 0xc3, 0xf8,
	0x98, 0xea, 0x09, 0x3f, 0x68, 0xb1, 0x02, 0x47, 0x51, 0xba, 0x8f, 0xf3, 0x50, 0xe6, 0x00, 0xea,
	0x95, 0x84, 0x60, 0x39, 0x72, 0xa2, 0x04, 0x02, 0x17, 0xf1, 0xb4, 0x58, 0x8b, 0x35, 0xd1, 0xaf,
	0xce, 0xd9, 0xbe, 0x28, 0x32, 0x62, 0xf3, 0xda, 0x2f, 0x78, 0xe5, 0x76, 0xdb, 0xda, 0x84, 0x79,
	0x8e, 0x28, 0x4a, 0x89, 0x10, 0x8f, 0x70, 0x49, 0x99, 0x0a, 0x9b, 0x3f, 0x3b, 0x9a, 0x98, 0xab,
	0x50, 0xc3, 0xf8, 0x4a, 0x0c, 0x76, 0x10, 0x3b, 0xfb, 0x25, 0xf4, 0x4a, 0x55, 0x8e, 0x9c, 0x90,
	0x62, 0x20, 0x68, 0x73, 0xff, 0x1d, 0x58, 0xa0, 0x18, 0x65, 0xa7, 0xdd, 0x71, 0x7b, 0x22, 0xa5,
	0x43, 0x19, 0x41, 0xab, 0x47, 0x4e, 0xf8, 0x40, 0xd4, 0x63, 0x3e, 0x87, 0xcb, 0xc0, 0xab, 0x9a,
	0xdc, 0xee, 0x66, 0x18, 0x0b, 0x40, 0xeb, 0xa1, 0xbc, 0xcd, 0xdf, 0xf7, 0x39, 0xaf, 0xfd, 0x01,
	0xaf, 0xb4, 0x3e, 0x84, 0x35, 0x7d, 0x24, 0xf0, 0xc4, 0x6c, 0xd0, 0xec, 0x7b, 0x1d, 0xb7, 0x75,
	0x2c, 0x3c, 0x41, 0x2b, 0xda, 0xb0, 0x50, 0x12, 0x1e, 0x6c, 0xcd, 0xe8, 0x2a, 0x38, 0xbe, 0x9a,
	0xde, 0x55, 0xb0, 0xbf, 0x69, 0xcb, 0xd7, 0x4e, 0x6e, 0xcb, 0x2f, 0x4c, 0x62, 0xcb, 0x6f, 0xc0,
	0x22, 0xf9, 0xd9, 0xe8, 0xb0, 0xbf, 0x34, 0xc0, 0xe9, 0x68, 0xd7, 0x02, 0x36, 0x89, 0x74, 0x00,
	0x44, 0xb4, 0x1f, 0xc3, 0xba, 0x0a, 0x3c, 0x6e, 0x26, 0x48, 0x74, 0x91, 0x04, 0xf8, 0xa1, 0x88,
	0x43, 0xde, 0x89, 0x91, 0xea, 0x3d, 0xa8, 0x47, 0x9d, 0x63, 0x44, 0x4b, 0xe7, 0xbe, 0x96, 0x65,
	0xd7, 0x2d, 0x23, 0xaa, 0xf1, 0x33, 0x98, 0x27, 0xa2, 0x71, 0x59, 0xf0, 0xc4, 0x0d, 0xf8, 0x6b,
	0x17, 0x5b, 0xb2, 0x42, 0xe4, 0x48, 0xaa, 0x25, 0x22, 0xf3, 0x23, 0x90, 0xc6, 0x65, 0x58, 0xfa,
	0x82, 0x85, 0x3b, 0x8a, 0x4c, 0xa5, 0xcc, 0x88, 0xf1, 0x72, 0xe3, 0x1f, 0xe4, 0x00, 0x22, 0xa8,
	0xb4, 0xf0, 0x88, 0xe1, 0x72, 0x30, 0x85, 0xcd, 0x2f, 0x41, 0xc5, 0xed, 0xed, 0xd3, 0x59, 0x40,
	0x3a, 0x7c, 0x4d, 0x9e, 0xdc, 0x79, 0x55, 0xcb, 0xa9, 0x80, 0xa3, 0xde, 0xf7, 0xc5, 0x1e, 0x0c,
	0xd9, 0x05, 0xaa, 0xfc, 0x06, 0x0e, 0xae, 0x18, 0x69, 0xcc, 0x4d, 0x42, 0x1a, 0x86, 0x63, 0xbe,
	0x10, 0x73, 0xcc, 0xdf, 0x85, 0xf2, 0x0f, 0xdd, 0x3e, 0x97, 0x70, 0xcf, 0xd1, 0xd1, 0x94, 0x76,
	0xe8, 0x35, 0x6d, 0xd3, 0xe3, 0xf7, 0xa7, 0x60, 0x4e, 0x74, 0x94, 0xfe, 0xfa, 0xa9, 0xc8, 0x5f,
	0xaf, 0xf9, 0xc4, 0x72, 0xe9, 0x3e, 0xb1, 0x69, 0xcd, 0x27, 0x76, 0x4d, 0x77, 0x79, 0xe9, 0x07,
	0xb0, 0xf4, 0x37, 0xfb, 0x0e, 0x3c, 0x61, 0xff, 0x64, 0x5a, 0x6d, 0x55, 0x72, 0xb2, 0xec, 0xb1,
	0xce, 0x96, 0x17, 0x4c, 0x12, 0x25, 0x96, 0x45, 0x1a, 0xd9, 0xe9, 0xf7, 0xea, 0x30, 0xd7, 0x67,
	0x7e, 0x8b, 0x29, 0x23, 0x51, 0x16, 0x29, 0x8f, 0xe1, 0xeb, 0xa6, 0x11, 0x66, 0x5b, 0xdc, 0x77,
	0x5f, 0x8b, 0xb8, 0x92, 0x0d, 0x58, 0x8c, 0x9a, 0x9b, 0x31, 0x67, 0xff, 0x82, 0x82, 0x53, 0x22,
	0xfd, 0x97, 0x73, 0x6e, 0xd7, 0x20, 0x2d, 0x88, 0x85, 0xb0, 0xe8, 0xc1, 0x7e, 0xa5, 0xf1, 0x82,
	0xfd, 0xca, 0x59, 0xc1, 0x7e, 0x8d, 0x3f, 0x9c, 0x82, 0xb3, 0x59, 0x73, 0x27, 0x85, 0x40, 0x5a,
	0x7a, 0xc5, 0x68, 0xca, 0x72, 0x59, 0x53, 0x36, 0x6d, 0x4e, 0x99, 0xfe, 0xda, 0x33, 0xe3, 0xbd,
	0x76, 0x3e, 0xf3, 0xb5, 0xbf, 0x0f, 0x6f, 0x65, 0xbd, 0x35, 0xca, 0xbf, 0x7b, 0x32, 0x7a, 0x77,
	0x2a, 0x76, 0x32, 0x2f, 0xf3, 0x5b, 0x45, 0x40, 0xef, 0x6f, 0xe7, 0x61, 0x3d, 0x09, 0x93, 0x99,
	0xca, 0x6d, 0xe4, 0x86, 0x85, 0xa5, 0x12, 0x1f, 0x47, 0x63, 0x77, 0x05, 0x33, 0x67, 0x61, 0x0e,
	0x28, 0xd3, 0xbe, 0xa9, 0x88, 0xf4, 0x4f, 0x92, 0xf8, 0x4e, 0x03, 0x74, 0xdd, 0x5e, 0xd3, 0x58,
	0x0d, 0x15, 0xbb, 0x6e, 0x4f, 0xd0, 0x72, 0x34, 0x07, 0xb3, 0x59, 0x73, 0x30, 0x67, 0xce, 0xc1,
	0x25, 0xa8, 0xc8, 0xc3, 0x7b, 0x82, 0x7b, 0x28, 0xfe, 0x6a, 0xbe, 0x2b, 0xb7, 0xad, 0x5b, 0x22,
	0xbf, 0xaf, 0x00, 0xd3, 0x58, 0xa9, 0x28, 0x52, 0x4e, 0x61, 0xc3, 0x23, 0xc5, 0x50, 0x1f, 0xc3,
	0x7a, 0x02, 0x36, 0x7e, 0x17, 0xc0, 0x6a, 0xac, 0x93, 0xfe, 0x81, 0xfd, 0x40, 0xbd, 0x0b, 0x5d,
	0x06, 0x50, 0xec, 0x07, 0xf2, 0x3d, 0xce, 0x41, 0xb9, 0x1f, 0x70, 0xbc, 0xac, 0xdd, 0xdc, 0x67,
	0x4c, 0xe4, 0xff, 0x87, 0x7e, 0xf0, 0x88, 0x57, 0x3d, 0x62, 0xcc, 0x7a, 0x0f, 0x96, 0x75, 0x08,
	0x73, 0xa9, 0x54, 0xb4, 0xad, 0x08, 0x34, 0x83, 0xa3, 0x2b, 0x27, 0xe7, 0xe8, 0xea, 0x89, 0x39,
	0xba, 0x36, 0x84, 0xa3, 0x17, 0x0c, 0xd6, 0x68, 0xfc, 0xc7, 0x29, 0x38, 0x9f, 0x4d, 0x8f, 0x92,
	0x43, 0x47, 0xee, 0x33, 0xa5, 0x49, 0xdd, 0x14, 0x32, 0x9c, 0x4e, 0x25, 0xc3, 0xac, 0x3d, 0xd6,
	0x88, 0xfe, 0xf2, 0x59, 0xf4, 0x37, 0x9b, 0x2d, 0x03, 0xcc, 0x38, 0xe5, 0xc6, 0x8f, 0xe0, 0x4c,
	0xf6, 0x77, 0x22, 0x4f, 0x7f, 0x68, 0xf2, 0xf4, 0x85, 0x21, 0x3c, 0xad, 0xc6, 0x47, 0x70, 0xf5,
	0x63, 0xb8, 0x34, 0x1c, 0xf9, 0xb8, 0x03, 0xd9, 0xf8, 0xd9, 0x0c, 0x2c, 0x3e, 0xf5, 0x7a, 0xec,
	0xf8, 0xbe, 0xd3, 0x7a, 0x39, 0xa1, 0x9a, 0x1b, 0x7b, 0xc0, 0xcf, 0x42, 0x69, 0xd0, 0x6b, 0x7b,
	0x4d, 0xb1, 0x6e, 0x94, 0x89, 0xcf, 0x7b, 0x6d, 0xcf, 0xa6, 0xb5, 0xe3, 0xe4, 0x23, 0x7f, 0x0a,
	0x8a, 0xdc, 0xf4, 0x6f, 0x62, 0xd6, 0xa2, 0x39, 0xb4, 0xea, 0x0b, 0xbc, 0xe2, 0x91, 0xef, 0x75,
	0xf9, 0xba, 0x58, 0x05, 0x45, 0x86, 0xce, 0x01, 0x13, 0x3b, 0xdc, 0x65, 0x19, 0x10, 0xc9, 0xeb,
	0x74, 0x95, 0x5b, 0x1c, 0xa6, 0x72, 0x21, 0xae, 0x72, 0x7f, 0x39, 0x07, 0x4b, 0x0c, 0x86, 0x9b,
	0x1f, 0xc2, 0x70, 0x95, 0xf1, 0x74, 0x51, 0x35, 0x33, 0x5e, 0x3e, 0xc3, 0xa4, 0xa8, 0x65, 0x98,
	0x14, 0x8d, 0x3f, 0xc8, 0xc1, 0x7a, 0x0a, 0x09, 0x0d, 0xd3, 0xb6, 0x29, 0x94, 0x93, 0x1b, 0x87,
	0x72, 0xa6, 0x87, 0x50, 0xce, 0x4c, 0x16, 0xe5, 0xe4, 0x13, 0x96, 0x25, 0x2e, 0x1a, 0x29, 0xf1,
	0x09, 0xfe, 0x4e, 0x12, 0xcc, 0x5c, 0x0a, 0xc1, 0xe8, 0x83, 0x5c, 0x18, 0x6f, 0x90, 0x8b, 0x99,
	0x0a, 0xff, 0x29, 0xac, 0xa6, 0x8c, 0x19, 0xca, 0x85, 0x5b, 0xa6, 0x5c, 0xd0, 0x32, 0xa4, 0xa6,
	0x0c, 0xb2, 0x10, 0x08, 0xff, 0x61, 0x06, 0x96, 0x8d, 0xe6, 0x5f, 0x92, 0x86, 0x8f, 0xcd, 0x57,
	0x7e, 0xc8, 0x7c, 0x8d, 0xab, 0xe3, 0x0d, 0x4e, 0x2f, 0x8c, 0xe2, 0xf4, 0xe2, 0x70, 0x4e, 0x87,
	0x61, 0x9c, 0x5e, 0x1a, 0xd3, 0xb8, 0x2e, 0x67, 0x19, 0xd7, 0xd7, 0x61, 0xd1, 0x0d, 0x9a, 0x7d,
	0xc7, 0xc5, 0x83, 0xa8, 0x72, 0x4c, 0x05, 0xb7, 0xd6, 0xdc, 0x60, 0xc7, 0x71, 0xdb, 0xf7, 0x8f,
	0xd5, 0xd4, 0xfc, 0xc5, 0xd2, 0xdc, 0x7f, 0x2f, 0x07, 0x6f, 0xa5, 0x92, 0xd8, 0x2f, 0x46, 0x69,
	0xff, 0x1c, 0x74, 0x88, 0x94, 0x04, 0x73, 0xc3, 0x24, 0x41, 0x61, 0x84, 0x24, 0x28, 0x9a, 0xa3,
	0xf4, 0x4e, 0xb4, 0x74, 0xf4, 0x82, 0xf0, 0x01, 0xeb, 0xb0, 0xe8, 0x0a, 0xca, 0xb8, 0xf3, 0xe1,
	0x7b, 0xb0, 0x96, 0x3a, 0xa0, 0x28, 0x05, 0xee, 0x98, 0x52, 0xe0, 0x4c, 0xba, 0x14, 0x88, 0x1b,
	0x06, 0x5b, 0x70, 0x2e, 0x13, 0xe5, 0xd8, 0x36, 0xc1, 0x1f, 0xe7, 0xa0, 0xb6, 0xa3, 0x12, 0xb7,
	0x66, 0x18, 0x04, 0xb7, 0x60, 0xd9, 0xed, 0x85, 0xbe, 0xb3, 0xe7, 0xf4, 0x5e, 0x1a, 0x39, 0x4c,
	0xc9, 0x8f, 0xba, 0xa8, 0x1a, 0xb5, 0x2c, 0xa6, 0x77, 0x61, 0x35, 0xd6, 0x27, 0x36, 0xe9, 0xcb,
	0x46, 0x2f, 0x35, 0xf7, 0xf4, 0x2c, 0xe6, 0x27, 0x9e, 0x35, 0xa3, 0x9e, 0x45, 0x8d, 0x89, 0x67,
	0xe9, 0x7d, 0x62, 0xb7, 0x9b, 0x2d, 0x1b, 0xbd, 0xf4, 0xab, 0x6f, 0x7e, 0x1e, 0x27, 0xad, 0x1a,
	0x1f, 0xc3, 0xf2, 0xa6, 0x3a, 0xd5, 0x85, 0xdb, 0x19, 0xc2, 0x0f, 0x98, 0x62, 0x69, 0xe1, 0x96,
	0x42, 0x2e, 0xda, 0x47, 0x69, 0xfc, 0xd7, 0x19, 0xa8, 0xc6, 0x7a, 0x8f, 0x7d, 0xd6, 0x37, 0x2d,
	0xe6, 0xea, 0x2e, 0xcc, 0x0a, 0x1f, 0xe5, 0x4c, 0x2c, 0xde, 0x2c, 0xf5, 0x1d, 0x6d, 0x01, 0x1d,
	0x27, 0x9d, 0x7c, 0x82, 0xc5, 0x4f, 0x78, 0x20, 0x58, 0x30, 0x75, 0xc1, 0xd8, 0x50, 0x88, 0x02,
	0x14, 0x8b, 0x46, 0x0e, 0x33, 0x8d, 0xa1, 0xc1, 0x64, 0xe8, 0x2b, 0x50, 0x55, 0xa1, 0x99, 0x86,
	0x4c, 0x57, 0x11, 0x9b, 0x82, 0x38, 0xae, 0xc1, 0x82, 0x02, 0x8c, 0x89, 0xf5, 0x9a, 0x6c, 0x50,
	0x14, 0x71, 0x1e, 0xca, 0xb8, 0xe9, 0x2b, 0x51, 0xce, 0x53, 0x32, 0x19, 0xac, 0xdb, 0x54, 0x5b,
	0x79, 0x04, 0xa2, 0x90, 0x91, 0x15, 0x46, 0x81, 0x25, 0x19, 0x4b, 0xb5, 0x89, 0x0e, 0xb4, 0x7c,
	0x0a, 0x65, 0xe7, 0xc8, 0x71, 0x3b, 0xce, 0x5e, 0x87, 0x35, 0xbd, 0xde, 0x18, 0xfe, 0xe2, 0x92,
	0x82, 0xff, 0xba, 0x97, 0x69, 0xa0, 0x2c, 0x64, 0x1a, 0x28, 0xbf, 0x95, 0x83, 0x45, 0x71, 0xf3,
	0x8c, 0xcd, 0xfa, 0x9e, 0x1f, 0xee, 0x7a, 0xa1, 0xd3, 0xc1, 0x7c, 0xbc, 0x46, 0x26, 0xe4, 0xe8,
	0x18, 0x5b, 0xde, 0x5e, 0xd0, 0x5b, 0xe8, 0x2a, 0x32, 0xae, 0x61, 0x99, 0xca, 0x1b, 0x31, 0x2d,
	0x34, 0x2c, 0x93, 0x49, 0x23, 0x4e, 0x03, 0x1c, 0x39, 0x31, 0x76, 0x2e, 0x1e, 0x39, 0xda, 0x45,
	0x78, 0x66, 0x9e, 0x68, 0xf2, 0x19, 0x94, 0xfb, 0x7a, 0x92, 0xe8, 0x3b, 0xb0, 0x12, 0x4f, 0xdb,
	0x6c, 0xd0, 0xe0, 0x92, 0x99, 0x9b, 0x39, 0x22, 0x01, 0xbc, 0xcc, 0x84, 0x4e, 0x2f, 0x99, 0x67,
	0xbd, 0xa2, 0x06, 0x02, 0x6e, 0xfc, 0xa3, 0x69, 0x38, 0x6b, 0x0c, 0x86, 0x38, 0x9b, 0xf3, 0x7c,
	0xd0, 0xed, 0x3a, 0x3e, 0xde, 0xdd, 0x85, 0x56, 0x06, 0xd5, 0xca, 0xdd, 0x28, 0x51, 0xcc, 0xf4,
	0x2d, 0xf1, 0xa1, 0xc4, 0x13, 0x2b, 0xfa, 0xb0, 0xe1, 0x18, 0xf1, 0xa1, 0xe4, 0x2d, 0x7a, 0xf6,
	0x68, 0xce, 0x7c, 0x14, 0xe9, 0xda, 0x52, 0x83, 0x95, 0xb7, 0x01, 0xab, 0xb6, 0xe4, 0x89, 0xb4,
	0x03, 0xdf, 0x0b, 0x82, 0x26, 0x81, 0x19, 0x43, 0x56, 0xc3, 0x96, 0xe7, 0xbc, 0x21, 0x1a, 0x5b,
	0xda, 0xbf, 0x96, 0x08, 0xc9, 0x20, 0x2e, 0x8b, 0xca, 0x2d, 0x99, 0xde, 0x9b, 0x50, 0x4a, 0x50,
	0x63, 0xa0, 0xe8, 0x71, 0xb4, 0x21, 0x1e, 0x44, 0xc7, 0xe2, 0xa8, 0x07, 0x7d, 0x9a, 0x79, 0x2c,
	0x0e, 0x5b, 0x90, 0x90, 0xa2, 0xf9, 0x27, 0xb8, 0x7d, 0xc6, 0x02, 0xb1, 0x0e, 0x2b, 0x62, 0xcd,
	0x23, 0xc6, 0x02, 0x2e, 0x8c, 0xa9, 0xf9, 0xc8, 0x91, 0xb6, 0x5b, 0x01, 0x2b, 0x5e, 0x38, 0x29,
	0xc4, 0x51, 0x4a, 0x12, 0x47, 0xe3, 0xdf, 0x4e, 0xc1, 0x29, 0x63, 0xe6, 0xb6, 0xd4, 0xdc, 0xe2,
	0xac, 0x6d, 0x18, 0xc7, 0x76, 0x19, 0x26, 0x13, 0x51, 0x62, 0x55, 0x3b, 0xa0, 0x8b, 0xd2, 0xd0,
	0x10, 0x70, 0xb9, 0x4c, 0x01, 0x37, 0x9d, 0x29, 0xe0, 0x66, 0x0c, 0x01, 0xf7, 0x21, 0x00, 0x3d,
	0xb0, 0x2d, 0x2f, 0x5e, 0x19, 0x75, 0xbf, 0x07, 0x87, 0xc6, 0x9b, 0x63, 0xfe, 0x28, 0x07, 0x4b,
	0xc6, 0x67, 0x09, 0x4a, 0xb4, 0xbe, 0xd6, 0x6e, 0x08, 0xd4, 0xed, 0x87, 0xe8, 0x90, 0xdf, 0x08,
	0x3a, 0x8e, 0xee, 0x12, 0xdc, 0xc6, 0xdc, 0x6d, 0x3a, 0x42, 0x1c, 0xfa, 0xc4, 0x25, 0x13, 0x63,
	0x23, 0xc4, 0x89, 0xb7, 0x1e, 0x41, 0x29, 0xe2, 0xaf, 0x40, 0xdc, 0xa0, 0x76, 0x31, 0x1d, 0x9b,
	0x39, 0x59, 0xb6, 0xde, 0xd1, 0xfa, 0x1a, 0x6a, 0x31, 0xb6, 0x0f, 0xea, 0x33, 0x13, 0x20, 0xab,
	0x9a, 0x62, 0x21, 0x68, 0xfc, 0xf1, 0x1c, 0xcc, 0x1b, 0x1d, 0x26, 0x5f, 0x3b, 0x99, 0x02, 0x7e,
	0xfa, 0xe4, 0x16, 0xfd, 0xcc, 0x84, 0x59, 0x31, 0x05, 0x23, 0x8c, 0x49, 0x48, 0x40, 0xe0, 0x0f,
	0x44, 0x42, 0x5f, 0x2d, 0x13, 0x68, 0xa4, 0x65, 0x39, 0x52, 0xda, 0x8e, 0x55, 0x2e, 0x96, 0x51,
	0x48, 0x11, 0x1c, 0x97, 0x65, 0xf7, 0xa0, 0x28, 0x3a, 0x87, 0xde, 0x18, 0x9b, 0x0c, 0x05, 0x02,
	0xde, 0xf5, 0xac, 0x07, 0x50, 0x13, 0x11, 0x4c, 0x22, 0x3d, 0xd9, 0x58, 0x3b, 0x0d, 0x22, 0xbc,
	0x89, 0x4e, 0x9c, 0xd1, 0x80, 0xc8, 0xfc, 0x92, 0x63, 0xa6, 0x09, 0x95, 0xe0, 0x9b, 0x5c, 0x9d,
	0xcc, 0x22, 0x9d, 0x27, 0x73, 0xe4, 0xa6, 0xa8, 0x43, 0x5b, 0xc0, 0x1a, 0xfc, 0x5f, 0x8e, 0xf1,
	0xff, 0x3d, 0x98, 0x0b, 0x88, 0x1f, 0x44, 0x3c, 0xee, 0xe9, 0x74, 0x94, 0x82, 0x69, 0x6c, 0x09,
	0xcd, 0xcd, 0x8a, 0xb6, 0x1b, 0xf4, 0x07, 0x21, 0x93, 0xcb, 0x1e, 0x61, 0x56, 0x88, 0x5a, 0xb1,
	0xf2, 0x79, 0x0c, 0x96, 0x04, 0xc3, 0xa3, 0x89, 0xe3, 0x9a, 0x17, 0x35, 0xd1, 0xeb, 0x39, 0x75,
	0xda, 0x0c, 0xad, 0x47, 0xb0, 0x20, 0x31, 0x45, 0x29, 0xfb, 0x46, 0x9b, 0x1a, 0x55, 0xd1, 0x49,
	0xe5, 0xe9, 0xa3, 0x64, 0x62, 0xce, 0x20, 0xf4, 0xa2, 0x44, 0x9f, 0x0b, 0x32, 0x99, 0xd8, 0xe6,
	0x20, 0xf4, 0x54, 0x96, 0xcf, 0xe8, 0xb6, 0x89, 0xb6, 0xd7, 0x1a, 0x50, 0xf6, 0xa8, 0xb6, 0xd8,
	0x8e, 0x16, 0xb7, 0x4d, 0x3c, 0x10, 0x0d, 0xdb, 0xed, 0x4c, 0x33, 0x66, 0x31, 0xd3, 0x8c, 0xf9,
	0x97, 0x53, 0x31, 0x41, 0x49, 0x1b, 0xcd, 0x41, 0xda, 0x61, 0x57, 0x79, 0x11, 0x9f, 0x8f, 0x80,
	0xda, 0x61, 0x57, 0x5f, 0x47, 0x20, 0x12, 0x5f, 0x90, 0xf9, 0x2c, 0x13, 0x5f, 0x44, 0xa6, 0xbc,
	0x3c, 0x8b, 0x98, 0xa3, 0xcb, 0xb2, 0x0e, 0x9d, 0xe0, 0x50, 0x5e, 0x96, 0xc5, 0x7f, 0xbf, 0xc1,
	0x06, 0x5c, 0xe3, 0xf7, 0xe6, 0xa0, 0xf2, 0xc2, 0x09, 0x35, 0xa3, 0x20, 0xf1, 0x15, 0x6b, 0x50,
	0x50, 0x67, 0x58, 0xc4, 0x8e, 0xaa, 0x27, 0xb2, 0x4c, 0x5e, 0x82, 0x8a, 0x66, 0x67, 0x44, 0x71,
	0xf3, 0xf3, 0x5a, 0x2d, 0x5d, 0x55, 0xae, 0x83, 0x69, 0xd1, 0x4d, 0x55, 0xad, 0x1e, 0xe3, 0x9b,
	0x4c, 0x53, 0xd0, 0xb4, 0x37, 0x74, 0x53, 0x50, 0xe8, 0xfa, 0xf7, 0x60, 0x49, 0x07, 0x57, 0xec,
	0x42, 0x72, 0x67, 0x51, 0x6b, 0xd3, 0xf7, 0x53, 0x34, 0xf3, 0x70, 0x2e, 0x6e, 0x1e, 0x8e, 0x11,
	0xc2, 0x72, 0x16, 0x4a, 0xdc, 0xb4, 0x30, 0x37, 0x7d, 0xb8, 0x49, 0xaa, 0x99, 0x41, 0x08, 0x10,
	0xdb, 0xe2, 0x29, 0xf3, 0x4a, 0x85, 0xe5, 0x03, 0xa8, 0x93, 0x7d, 0x9f, 0xf2, 0xbd, 0x64, 0x75,
	0xac, 0x60, 0xfb, 0x6e, 0xe2, 0xa3, 0xaf, 0x42, 0x8d, 0x7a, 0x6a, 0xdf, 0x41, 0xdb, 0x3e, 0xb4,
	0x62, 0x78, 0xa1, 0x3e, 0xe6, 0x1d, 0x58, 0x20, 0x48, 0xfd, 0x7d, 0x69, 0xad, 0x51, 0xc5, 0x86,
	0x47, 0xd1, 0x4b, 0x8f, 0xb9, 0xde, 0xf8, 0x08, 0xd6, 0xf4, 0x95, 0x4b, 0xd0, 0x74, 0xfa, 0x7d,
	0xdf, 0x7b, 0xed, 0x76, 0xb9, 0x9a, 0xa8, 0x52, 0xec, 0x86, 0xb6, 0x8c, 0x09, 0x36, 0xa3, 0x66,
	0xfe, 0xc9, 0xb1, 0x6c, 0xb4, 0xcd, 0x96, 0xef, 0x86, 0xcc, 0x77, 0x1d, 0xe1, 0x0a, 0x5e, 0x31,
	0x13, 0xcf, 0x6e, 0x89, 0xd6, 0xb4, 0x3c, 0xb6, 0x0b, 0x27, 0xc8, 0x63, 0xab, 0x9d, 0x4c, 0xb2,
	0x8c, 0x2b, 0x01, 0x92, 0x71, 0x93, 0x8b, 0x69, 0x71, 0x93, 0xe7, 0x31, 0x6b, 0x5e, 0x94, 0xcc,
	0x90, 0x02, 0x4e, 0x4a, 0x6e, 0x10, 0x65, 0x32, 0xd4, 0x56, 0x92, 0xcb, 0xe6, 0x4a, 0xf2, 0x1e,
	0x14, 0x29, 0x31, 0xa6, 0xdb, 0xa5, 0x80, 0xf7, 0x11, 0x0a, 0x8c, 0x03, 0xf3, 0x62, 0xe3, 0xef,
	0xcc, 0x41, 0xf1, 0x85, 0x13, 0x66, 0x18, 0x10, 0xd9, 0xf1, 0x0e, 0x6b, 0x50, 0xe0, 0x14, 0xa2,
	0x92, 0xf5, 0x4f, 0xd9, 0x73, 0x47, 0x4e, 0x28, 0x23, 0x45, 0x32, 0xe3, 0xc6, 0xd2, 0x57, 0x63,
	0xf9, 0xac, 0xd5, 0xd8, 0x05, 0x98, 0x97, 0xe6, 0xfc, 0x11, 0xeb, 0x0d, 0x98, 0x58, 0x21, 0x95,
	0x85, 0x1d, 0x8f, 0x75, 0xa3, 0x98, 0x2e, 0xc6, 0x51, 0x85, 0x04, 0x47, 0xbd, 0x0d, 0x35, 0x35,
	0xea, 0xb1, 0xcd, 0x56, 0x55, 0x3f, 0x6c, 0x11, 0x06, 0xe9, 0x8b, 0x30, 0xcd, 0x52, 0x29, 0x19,
	0x96, 0xca, 0x5d, 0x58, 0x95, 0x69, 0x00, 0x9d, 0x1e, 0xde, 0x5b, 0xc2, 0xd7, 0x23, 0x78, 0x75,
	0x32, 0x71, 0xda, 0xb2, 0x68, 0xde, 0xc4, 0xd6, 0x5d, 0xd1, 0x68, 0xdd, 0x82, 0x65, 0x0c, 0xf6,
	0x4b, 0xf4, 0x22, 0xa6, 0x5b, 0xc4, 0xc6, 0x58, 0x9f, 0x1b, 0xb0, 0x98, 0xc6, 0x4b, 0xe2, 0xce,
	0x75, 0x27, 0xc9, 0x46, 0x92, 0x90, 0xd0, 0x88, 0xaa, 0x8e, 0x47, 0x48, 0x68, 0x42, 0xdd, 0x86,
	0x39, 0x91, 0x9a, 0x75, 0x0c, 0x05, 0x3c, 0x8b, 0xf4, 0xe7, 0x59, 0x9f, 0x23, 0x6b, 0x34, 0xf9,
	0x92, 0xa5, 0x43, 0xc6, 0xe0, 0xe8, 0xe0, 0x30, 0xbe, 0x5e, 0xfa, 0x86, 0x77, 0x48, 0xc9, 0x68,
	0xf0, 0x8b, 0xba, 0xe6, 0xec, 0x36, 0xcc, 0xa1, 0xd7, 0x7c, 0xac, 0x43, 0x2d, 0xb3, 0x1c, 0x74,
	0x33, 0xcc, 0x34, 0x06, 0x96, 0x33, 0x8d, 0x81, 0xbf, 0x3f, 0x05, 0x95, 0xd8, 0x84, 0xea, 0x21,
	0xa1, 0x79, 0x11, 0x12, 0x9a, 0xcd, 0xa5, 0x27, 0xb8, 0xfd, 0xe2, 0x04, 0xc1, 0x20, 0x0f, 0xa0,
	0x82, 0x02, 0xf2, 0x85, 0xcb, 0x5e, 0xa1, 0x37, 0xf7, 0x24, 0x71, 0xba, 0x8d, 0xff, 0xbe, 0x02,
	0x55, 0x85, 0x66, 0x67, 0xb0, 0xd7, 0x71, 0x5b, 0x63, 0x5d, 0x3a, 0x90, 0x95, 0xfc, 0x7c, 0x7a,
	0xac, 0xe4, 0xe7, 0xf1, 0xaf, 0xd7, 0xd2, 0x66, 0xe7, 0xc7, 0x4a, 0x9b, 0xfd, 0x06, 0xb1, 0x6f,
	0xb1, 0xeb, 0x12, 0xe6, 0x92, 0xd7, 0x25, 0x24, 0xd3, 0x9e, 0x17, 0x26, 0x4e, 0x7b, 0x1e, 0x4f,
	0xf0, 0x5b, 0x4c, 0x26, 0xf8, 0x8d, 0xad, 0x13, 0x21, 0xcd, 0x4d, 0x2a, 0x0e, 0x9d, 0x94, 0x8c,
	0x13, 0x80, 0x91, 0x88, 0x2b, 0x1b, 0x22, 0xee, 0xa1, 0x69, 0x94, 0x21, 0x67, 0xcf, 0x8f, 0x36,
	0xcb, 0xb5, 0x3e, 0xc8, 0xdc, 0x32, 0x13, 0x7d, 0x65, 0xf2, 0x4c, 0xf4, 0xd5, 0x13, 0x68, 0x70,
	0xe9, 0x79, 0xae, 0x8d, 0x48, 0x33, 0xbc, 0x90, 0x9a, 0x66, 0xf8, 0x93, 0xb8, 0xae, 0xb2, 0x62,
	0x27, 0x7f, 0x4c, 0x1e, 0x89, 0x29, 0xb1, 0x9b, 0x30, 0x17, 0x3a, 0xaf, 0x31, 0xca, 0x66, 0x71,
	0x78, 0xbf, 0xd9, 0xd0, 0x79, 0xfd, 0x88, 0x31, 0xeb, 0x07, 0x70, 0x5a, 0xf4, 0x88, 0xc2, 0x79,
	0xd9, 0x6b, 0x11, 0xb5, 0xca, 0xf1, 0x2c, 0x0d, 0xc7, 0xb3, 0x46, 0x78, 0xa4, 0xf1, 0xf5, 0x50,
	0x74, 0xe5, 0xa8, 0x3f, 0x86, 0x79, 0x89, 0x9a, 0x5c, 0x28, 0xcb, 0xc3, 0x51, 0x95, 0x08, 0x15,
	0xf9, 0x4b, 0x36, 0xa1, 0x26, 0x03, 0x92, 0x54, 0xff, 0x95, 0xe1, 0xfd, 0x45, 0x50, 0x94, 0x42,
	0xb1, 0x15, 0xc5, 0x3f, 0x71, 0x14, 0x74, 0x1b, 0xd8, 0xea, 0x70, 0x1c, 0xd5, 0x08, 0x07, 0x5d,
	0x0b, 0xf6, 0x0c, 0x56, 0xa3, 0xc0, 0x28, 0x66, 0xa0, 0xaa, 0x0f, 0x47, 0xb5, 0xa4, 0xc2, 0xa5,
	0x98, 0x86, 0xef, 0x21, 0xae, 0xfc, 0x82, 0x41, 0x9f, 0xf9, 0x5a, 0x48, 0xd4, 0xda, 0x70, 0x54,
	0x35, 0xd9, 0x45, 0x45, 0x4c, 0xdd, 0x45, 0x07, 0xb3, 0xf4, 0x4d, 0xad, 0x0f, 0xef, 0x5e, 0xe4,
	0xa0, 0x6a, 0x58, 0xa3, 0x7e, 0x4d, 0xe4, 0x3f, 0x71, 0xdd, 0x42, 0xf6, 0xb0, 0xaa, 0xde, 0x78,
	0x22, 0xcc, 0xfa, 0x00, 0x4a, 0x3d, 0x16, 0x2a, 0xfa, 0x7c, 0x6b, 0x78, 0x6f, 0xe8, 0xb1, 0x50,
	0x52, 0xe7, 0x36, 0x2c, 0x89, 0x1c, 0x53, 0x26, 0x89, 0x9f, 0x1e, 0x8e, 0xc2, 0xa2, 0x4e, 0x5f,
	0xe8, 0x84, 0xbe, 0x03, 0x75, 0x31, 0x2d, 0x02, 0xa3, 0x36, 0x2f, 0x67, 0x86, 0xa3, 0x5b, 0xa6,
	0x8e, 0x74, 0x16, 0x24, 0x9a, 0x98, 0x26, 0x9c, 0x8b, 0xee, 0xa6, 0x17, 0x38, 0xe3, 0x33, 0x7e,
	0x76, 0x38, 0xe6, 0xb7, 0xd4, 0xdd, 0xf5, 0x84, 0xdb, 0x9c, 0xf9, 0x4f, 0x55, 0x86, 0x2d, 0xc9,
	0xa2, 0xe7, 0x46, 0xb0, 0x36, 0x81, 0xef, 0x12, 0xa3, 0xee, 0xc3, 0x45, 0xb3, 0x7b, 0x06, 0xbf,
	0x9e, 0x1f, 0x8e, 0xf4, 0xac, 0x8e, 0x34, 0x8d, 0x6b, 0x5f, 0xc1, 0x75, 0x45, 0xa0, 0x63, 0x3d,
	0xb0, 0x31, 0xfc, 0x81, 0x57, 0x24, 0x36, 0x7b, 0xc4, 0x83, 0x9f, 0xc2, 0x8a, 0x78, 0x1e, 0xa7,
	0x0b, 0x3f, 0x60, 0x8a, 0x3e, 0x2e, 0x8c, 0x60, 0x34, 0xea, 0x66, 0x53, 0x2f, 0x49, 0x21, 0x5b,
	0xb0, 0x10, 0x91, 0x86, 0x64, 0x94, 0x8b, 0x23, 0xb8, 0xdf, 0x97, 0x44, 0x21, 0xd8, 0xe5, 0x19,
	0xac, 0x26, 0x90, 0x08, 0xae, 0xb9, 0x34, 0xd6, 0x4b, 0x3d, 0x32, 0x79, 0x27, 0xba, 0x90, 0xe5,
	0xf2, 0x18, 0x17, 0xb2, 0xa8, 0xab, 0x46, 0xae, 0x8c, 0xbe, 0x6a, 0x24, 0xba, 0x39, 0x30, 0x1e,
	0x58, 0x70, 0xd5, 0xbc, 0x39, 0x70, 0xc7, 0x0c, 0x30, 0x88, 0x67, 0xe5, 0x7f, 0x7b, 0xdc, 0xac,
	0xfc, 0xd1, 0xed, 0x26, 0xef, 0x4c, 0x78, 0xbb, 0x49, 0xfc, 0xd6, 0xa1, 0x6b, 0x6f, 0x70, 0xeb,
	0x50, 0x96, 0x99, 0xf9, 0x6e, 0x66, 0x9c, 0x57, 0x32, 0xd1, 0xdd, 0xf5, 0x94, 0x44, 0x77, 0xd6,
	0x47, 0xf2, 0x2e, 0x0d, 0x4a, 0xa3, 0x22, 0xae, 0xef, 0xcc, 0xd6, 0x5d, 0x08, 0x4c, 0xe9, 0x55,
	0x32, 0x72, 0xc2, 0xdf, 0x38, 0x51, 0x4e, 0xf8, 0x9b, 0x6f, 0x9a, 0x13, 0xfe, 0xbd, 0xd1, 0x39,
	0xe1, 0x8d, 0x3c, 0xef, 0xb7, 0x46, 0xe5, 0x79, 0xbf, 0x9d, 0xcc, 0xf3, 0xde, 0xf8, 0x87, 0x37,
	0xc4, 0x1d, 0x7e, 0x68, 0x75, 0x53, 0xd2, 0xf6, 0xbf, 0x34, 0xbb, 0xff, 0xd2, 0xec, 0xfe, 0x0b,
	0x63, 0x76, 0xbf, 0x80, 0x53, 0x72, 0xae, 0x0c, 0xdb, 0x44, 0x08, 0xfb, 0x11, 0x46, 0x78, 0x5d,
	0xf4, 0xd5, 0x4d, 0x14, 0x12, 0xf8, 0xbf, 0x1a, 0xdd, 0xb7, 0x63, 0xe2, 0xa5, 0x78, 0x8b, 0x51,
	0x56, 0xfa, 0x5a, 0x0a, 0xe2, 0xaf, 0xb1, 0xa7, 0xf5, 0x15, 0x2c, 0xa7, 0x62, 0x1e, 0x65, 0xb0,
	0x2f, 0xa6, 0xa0, 0xb4, 0x3e, 0x8b, 0x6e, 0x01, 0x97, 0xc6, 0xc9, 0x08, 0x63, 0x5d, 0xd2, 0xa9,
	0xb0, 0x4e, 0xbe, 0x8c, 0xde, 0x46, 0x5a, 0x0b, 0x34, 0x72, 0x23, 0x6c, 0x76, 0xcb, 0x40, 0x43,
	0x63, 0xf6, 0x04, 0x56, 0xe2, 0xb8, 0xc4, 0x68, 0xad, 0x8e, 0xf7, 0x69, 0x84, 0x4c, 0x8c, 0xd3,
	0x21, 0x5c, 0x8a, 0x63, 0x4b, 0xb7, 0x63, 0x46, 0x98, 0xf3, 0xe7, 0x0c, 0xe4, 0x69, 0x06, 0x4c,
	0xca, 0x18, 0x90, 0xd5, 0xb1, 0x36, 0xc9, 0x18, 0x90, 0xe1, 0xb1, 0x03, 0xf5, 0x74, 0xba, 0xd9,
	0x7f, 0x3d, 0xca, 0xda, 0x5f, 0x4e, 0x99, 0xe0, 0x47, 0xaf, 0xad, 0x1f, 0xc3, 0xb9, 0x2c, 0x8c,
	0x6a, 0xce, 0x47, 0xac, 0x04, 0x4e, 0xa5, 0x62, 0x16, 0x14, 0xf0, 0xeb, 0x70, 0x36, 0x13, 0x7f,
	0xdf, 0xf7, 0xf6, 0xdd, 0x70, 0xd4, 0x52, 0x21, 0x1d, 0xfd, 0x0e, 0xf6, 0x4d, 0xae, 0x8b, 0x4f,
	0x9f, 0x70, 0x5d, 0x7c, 0xe6, 0x3b, 0x5a, 0x17, 0x9f, 0xfd, 0xee, 0xd6, 0xc5, 0xe7, 0xde, 0x70,
	0x5d, 0x7c, 0xfe, 0x3b, 0x58, 0x17, 0x37, 0x26, 0x5c, 0x17, 0xef, 0xc3, 0x45, 0xb5, 0x4c, 0x48,
	0x60, 0x6b, 0x06, 0xac, 0xb3, 0x8f, 0xe1, 0x87, 0xa3, 0x6c, 0xf7, 0xb3, 0x12, 0xc9, 0x53, 0x13,
	0xff, 0x73, 0xd6, 0xd9, 0xdf, 0xf2, 0x82, 0xd0, 0xda, 0x85, 0xf5, 0xb4, 0xe7, 0x08, 0x8a, 0x1a,
	0x61, 0xcf, 0xaf, 0x26, 0xb0, 0x0b, 0x6a, 0x1a, 0xb2, 0xaa, 0xbf, 0x74, 0x92, 0x55, 0xfd, 0x4f,
	0xe1, 0x9d, 0xc4, 0x5b, 0xc6, 0x10, 0x6b, 0x7c, 0x70, 0x79, 0xf8, 0x23, 0x2e, 0xc6, 0xde, 0xda,
	0x78, 0x94, 0x62, 0x88, 0x71, 0x1e, 0x19, 0x4d, 0xc3, 0x95, 0x37, 0x78, 0xa4, 0x9a, 0x0b, 0x7d,
	0x69, 0x98, 0xf5, 0x48, 0x61, 0xcd, 0xd1, 0x87, 0x5e, 0x1d, 0x73, 0x69, 0x98, 0xf6, 0x54, 0xa4,
	0x55, 0xf1, 0xad, 0xe9, 0x4e, 0x93, 0xb7, 0x27, 0x75, 0x9a, 0x7c, 0x1f, 0x95, 0x71, 0x0c, 0x8d,
	0x36, 0x2f, 0xef, 0x8c, 0xd6, 0xf2, 0x06, 0x42, 0x35, 0x17, 0xa6, 0x37, 0xe6, 0xda, 0x1b, 0x79,
	0x63, 0xde, 0x7d, 0x23, 0x6f, 0xcc, 0xf5, 0xf1, 0xbd, 0x31, 0xbf, 0xaa, 0x8d, 0x86, 0xbc, 0xca,
	0x4f, 0x9f, 0xbc, 0x8d, 0xd1, 0xa6, 0x89, 0x36, 0x79, 0xfa, 0x74, 0x91, 0x69, 0x42, 0x98, 0x0d,
	0x94, 0x37, 0x46, 0xeb, 0x6f, 0xec, 0xa5, 0x23, 0x6b, 0x41, 0x23, 0xba, 0x09, 0x30, 0xe9, 0x3c,
	0x12, 0xa3, 0x76, 0x73, 0x38, 0xe6, 0x33, 0xea, 0x2e, 0xc0, 0xb8, 0x27, 0x89, 0x46, 0x91, 0xc1,
	0x85, 0xa1, 0x0f, 0x11, 0xf6, 0xc7, 0x7b, 0xa3, 0x85, 0x59, 0xfa, 0x53, 0x84, 0x2d, 0xa2, 0x59,
	0x83, 0xa9, 0x8e, 0xb0, 0x5b, 0xe3, 0x59, 0x83, 0x49, 0xfc, 0xba, 0xcd, 0x14, 0x73, 0x32, 0xdd,
	0x1e, 0xcf, 0x66, 0xd2, 0xbd, 0x33, 0x82, 0x51, 0x52, 0xb0, 0x89, 0xd1, 0xbe, 0x33, 0x9e, 0x39,
	0xac, 0xe3, 0xa4, 0x71, 0xfe, 0x01, 0x9c, 0xce, 0x40, 0x2c, 0x46, 0xf8, 0xfd, 0x49, 0x46, 0xc0,
	0xb0, 0xf3, 0xec, 0x28, 0xd7, 0x7a, 0xd2, 0x25, 0x78, 0x77, 0x38, 0xda, 0x15, 0x03, 0x6d, 0x24,
	0xd6, 0x7f, 0x04, 0x67, 0x62, 0x5e, 0xc6, 0xb8, 0xb6, 0xb8, 0x37, 0x1c, 0xf1, 0xba, 0xe1, 0x6b,
	0x34, 0x75, 0x46, 0x96, 0x37, 0xf4, 0x83, 0xc9, 0xbd, 0xa1, 0x91, 0x9b, 0x2a, 0x61, 0x2c, 0x7e,
	0x38, 0x96, 0x9b, 0x2a, 0x66, 0x2b, 0x0e, 0xf3, 0xae, 0x7e, 0x74, 0x22, 0xef, 0x6a, 0x0f, 0xae,
	0xc6, 0x85, 0x4d, 0x02, 0xb5, 0x94, 0x12, 0x1f, 0x0f, 0x7f, 0xc2, 0x05, 0x53, 0xf0, 0xc4, 0x9e,
	0x24, 0xa4, 0xc6, 0x5f, 0x81, 0xf7, 0xb2, 0x9e, 0x97, 0xad, 0x24, 0x3f, 0x19, 0xfe, 0xe0, 0x77,
	0x52, 0x1f, 0x9c, 0xae, 0x2a, 0xc7, 0xf1, 0x26, 0x7f, 0xfa, 0x26, 0xde, 0xe4, 0x63, 0xd8, 0x18,
	0xf7, 0x03, 0xc5, 0xb0, 0xfe, 0xca, 0xf0, 0xc7, 0x5d, 0x1d, 0xfd, 0x75, 0x62, 0x6c, 0x93, 0x8e,
	0xec, 0xcf, 0x7e, 0x1e, 0x8e, 0xec, 0xcf, 0x7f, 0xd1, 0x8e, 0xec, 0xcd, 0xef, 0xc8, 0x91, 0xfd,
	0x58, 0x31, 0xb6, 0x69, 0xe6, 0xdf, 0x1f, 0x8e, 0x7f, 0x41, 0xff, 0x20, 0xb2, 0x0f, 0xb2, 0x5d,
	0xe2, 0x5b, 0xdf, 0x99, 0x4b, 0xfc, 0xc1, 0x77, 0xe7, 0x12, 0x7f, 0x78, 0x12, 0x97, 0xb8, 0x6e,
	0x86, 0xc8, 0x61, 0xd3, 0x6d, 0x86, 0x47, 0x63, 0x9a, 0x21, 0x62, 0x56, 0x34, 0xcb, 0x21, 0x72,
	0xb6, 0x7f, 0x31, 0x89, 0xb3, 0xfd, 0xf1, 0x9b, 0x38, 0xdb, 0xb7, 0x27, 0x72, 0xb6, 0x7f, 0x39,
	0xb9, 0xb3, 0xfd, 0xab, 0x37, 0x74, 0xb6, 0x3f, 0x79, 0x03, 0x67, 0xbb, 0x7e, 0x00, 0xf0, 0xe9,
	0x78, 0x47, 0x81, 0x9f, 0x8d, 0x7d, 0xbd, 0xeb, 0xd7, 0x89, 0xeb, 0x5d, 0x93, 0x9e, 0xfa, 0x9d,
	0x71, 0x3c, 0xf5, 0xdf, 0x7b, 0x63, 0x4f, 0xfd, 0xff, 0xbb, 0xb7, 0xb7, 0x1a, 0x9e, 0xfa, 0x6f,
	0x46, 0x79, 0xea, 0x5f, 0xa4, 0x78, 0xea, 0x7f, 0x0c, 0x35, 0x9b, 0xb5, 0xbc, 0x6e, 0x97, 0xf5,
	0xda, 0xac, 0x8d, 0x49, 0xa0, 0xb4, 0x93, 0x3a, 0x53, 0x99, 0xa9, 0xdb, 0x72, 0x99, 0xe9, 0x1d,
	0x8d, 0x98, 0xa0, 0xc6, 0x4f, 0x44, 0x66, 0xa9, 0x5d, 0x67, 0xaf, 0xc3, 0x26, 0xca, 0x2c, 0x75,
	0x13, 0x66, 0x7d, 0x0c, 0x52, 0x16, 0x87, 0x23, 0xea, 0x9a, 0xef, 0x5e, 0x22, 0xb4, 0x39, 0x80,
	0x2d, 0xe0, 0x1a, 0xdf, 0x83, 0x6a, 0xac, 0x09, 0x6f, 0xef, 0xf2, 0x02, 0x37, 0x94, 0x1f, 0x93,
	0xb7, 0x55, 0x19, 0xb3, 0x71, 0xfa, 0x5e, 0x57, 0xbc, 0x30, 0xfe, 0xe6, 0x2f, 0x18, 0x7a, 0xe2,
	0x04, 0x56, 0x2e, 0xf4, 0x1a, 0x4b, 0x90, 0xdb, 0x4e, 0x5c, 0x7e, 0xd0, 0xd8, 0x80, 0x02, 0xa2,
	0xdf, 0xa6, 0x2b, 0xad, 0x10, 0x8b, 0x08, 0x9d, 0xd2, 0xb0, 0xd0, 0x69, 0x30, 0x8e, 0xe5, 0x77,
	0x67, 0x60, 0x5d, 0x9e, 0x41, 0x15, 0x79, 0xc5, 0x30, 0x7b, 0x1a, 0x11, 0x54, 0x2c, 0x21, 0xcc,
	0x54, 0x3c, 0x21, 0x0c, 0x6f, 0x76, 0x5e, 0x9b, 0x07, 0x4b, 0x8b, 0x5d, 0xe7, 0x75, 0x14, 0x89,
	0x28, 0x14, 0xbe, 0x76, 0x60, 0x1d, 0xa8, 0xea, 0x99, 0xd3, 0x45, 0xa2, 0x36, 0xd3, 0xc3, 0xa0,
	0x76, 0x9b, 0x11, 0x57, 0x74, 0xe9, 0x29, 0x62, 0xb8, 0xb6, 0xba, 0x1a, 0x39, 0x94, 0xd4, 0xca,
	0x9a, 0x82, 0x99, 0x2b, 0xa6, 0xab, 0xc3, 0xfa, 0x10, 0xd6, 0x12, 0xab, 0xfe, 0x58, 0x38, 0xf3,
	0x8a, 0xd9, 0xc5, 0x48, 0xa9, 0x17, 0x18, 0xaf, 0x33, 0x27, 0x4e, 0x2d, 0x05, 0xda, 0xab, 0xc4,
	0x13, 0xc5, 0x14, 0xc6, 0x4f, 0x14, 0x53, 0xcc, 0x4c, 0x14, 0x73, 0x13, 0x96, 0x94, 0xb4, 0x3e,
	0xf4, 0xba, 0x4c, 0xe6, 0x7e, 0xa3, 0x7d, 0x12, 0x4b, 0xb6, 0x3d, 0xf6, 0xba, 0x4c, 0x24, 0x7f,
	0x3b, 0xcf, 0xa5, 0xf4, 0x31, 0xaa, 0x23, 0x84, 0x2c, 0x89, 0x9b, 0xbe, 0x79, 0x9d, 0x00, 0xd1,
	0x25, 0x61, 0xd9, 0x94, 0x84, 0xc3, 0x32, 0x56, 0x34, 0xfe, 0x6a, 0x0e, 0xce, 0xa6, 0x10, 0x86,
	0x91, 0x0b, 0x36, 0x36, 0xbf, 0x53, 0x63, 0xce, 0x6f, 0x6e, 0x82, 0xf9, 0x9d, 0x9e, 0x7c, 0x7e,
	0x67, 0x86, 0xce, 0x6f, 0x46, 0x0a, 0x80, 0x7c, 0x7a, 0x0a, 0x80, 0xc6, 0xef, 0xcc, 0xc0, 0xa9,
	0x21, 0xc3, 0x60, 0x7d, 0xae, 0xd4, 0x5d, 0xfc, 0x18, 0xd7, 0x88, 0xc1, 0x53, 0x6a, 0xef, 0x31,
	0x80, 0x76, 0xff, 0x45, 0x6e, 0x42, 0x2c, 0x5a, 0x5f, 0xeb, 0x31, 0xcc, 0x92, 0x92, 0x17, 0x62,
	0xe9, 0xe6, 0x38, 0x58, 0x36, 0x48, 0xf1, 0x53, 0x36, 0x59, 0xd1, 0xdf, 0xfa, 0x31, 0x54, 0xba,
	0x6e, 0xcf, 0xed, 0xd2, 0x6e, 0x27, 0xc7, 0x48, 0x07, 0xb7, 0xee, 0x8d, 0x85, 0xf1, 0x29, 0x75,
	0xd5, 0x11, 0xcf, 0x77, 0xf5, 0x3a, 0x83, 0x28, 0xf3, 0x06, 0x51, 0xae, 0xb7, 0xa0, 0xa4, 0x75,
	0x4c, 0xc9, 0x28, 0xfb, 0x2b, 0xe6, 0x5d, 0x6a, 0xe3, 0x0f, 0x95, 0x79, 0xd7, 0x76, 0xf2, 0x25,
	0x47, 0x65, 0xaf, 0xcd, 0xe9, 0xd9, 0x6b, 0x7f, 0x96, 0x83, 0xe9, 0xaf, 0xd8, 0x71, 0xda, 0xce,
	0x31, 0x7e, 0x55, 0x4e, 0x4b, 0xbb, 0x77, 0x11, 0x2a, 0xfa, 0xa5, 0xf9, 0xea, 0x60, 0x47, 0xf9,
	0xa5, 0xba, 0x2c, 0x7f, 0xbb, 0x1d, 0xcf, 0xdf, 0x9b, 0x4f, 0xe4, 0xef, 0xd5, 0x8f, 0x8e, 0xcc,
	0x9a, 0x47, 0x47, 0xde, 0xe0, 0x82, 0xd1, 0x8f, 0xa1, 0x24, 0x4e, 0xe7, 0x8d, 0x79, 0x16, 0x0c,
	0x24, 0xf8, 0xae, 0x47, 0x9d, 0xdb, 0x8c, 0x75, 0xc7, 0x4d, 0x39, 0x07, 0x12, 0x7c, 0x33, 0x6c,
	0xfc, 0xf9, 0x1c, 0x54, 0x76, 0x8c, 0x03, 0x44, 0x93, 0x9f, 0xe7, 0x3b, 0x05, 0x45, 0x3a, 0xda,
	0x43, 0xa3, 0x3a, 0xcd, 0xd5, 0x34, 0x55, 0xd0, 0x5d, 0x27, 0xda, 0xd9, 0xd5, 0x99, 0xf8, 0xd9,
	0xd5, 0x3a, 0xcc, 0xed, 0x39, 0x1d, 0x6e, 0x35, 0xca, 0x94, 0x7e, 0xa2, 0x68, 0xe8, 0xfe, 0xd9,
	0x98, 0xee, 0xff, 0xe5, 0x1c, 0xbb, 0x4b, 0x3f, 0x89, 0x5c, 0xcc, 0x3a, 0x89, 0x1c, 0x4b, 0x49,
	0x0d, 0xc9, 0x94, 0xd4, 0x1f, 0x21, 0x44, 0xe8, 0xf6, 0xc8, 0xd6, 0x8e, 0xdf, 0xe7, 0x23, 0x79,
	0xe9, 0xbe, 0xd3, 0x7b, 0xe9, 0xf6, 0x0e, 0x6c, 0x1d, 0xd8, 0xfa, 0x88, 0x4b, 0x5f, 0x31, 0x2b,
	0xce, 0x81, 0xcf, 0xe7, 0xb3, 0xa7, 0xf2, 0x07, 0x97, 0x65, 0x02, 0x36, 0x02, 0xd8, 0x94, 0xed,
	0x22, 0x93, 0xf0, 0x5d, 0x98, 0x13, 0x36, 0x77, 0xe2, 0xea, 0x0b, 0xf9, 0x4c, 0x69, 0x78, 0xf7,
	0xf6, 0x3d, 0x5b, 0x02, 0x6b, 0x11, 0x00, 0x15, 0x23, 0x02, 0x20, 0x16, 0xdb, 0x50, 0x4d, 0xc6,
	0x36, 0x9c, 0x87, 0xf2, 0xbe, 0xe3, 0x76, 0x06, 0x3e, 0x23, 0x79, 0x53, 0x13, 0xf7, 0xc6, 0x52,
	0x1d, 0x2a, 0xc2, 0x2b, 0x50, 0x95, 0x20, 0x5d, 0x16, 0x04, 0xce, 0x81, 0xcc, 0xad, 0x52, 0x11,
	0xd5, 0x4f, 0xa9, 0xd6, 0xba, 0x01, 0x8b, 0x12, 0x50, 0x7f, 0x2a, 0x1d, 0x7f, 0xb1, 0x44, 0x93,
	0x7e, 0xfc, 0xcb, 0x64, 0xcc, 0xfa, 0xc9, 0xa3, 0xf5, 0xd7, 0x26, 0x89, 0xd6, 0xff, 0x14, 0xca,
	0x8e, 0xef, 0xbb, 0x47, 0x8e, 0x38, 0x63, 0xb0, 0x3e, 0x46, 0x2e, 0x02, 0x82, 0xc7, 0x70, 0x08,
	0x2d, 0xd8, 0xff, 0xd4, 0x1b, 0x07, 0xfb, 0xbf, 0x95, 0x19, 0x45, 0xff, 0xaf, 0xa6, 0x60, 0xd9,
	0xe4, 0xff, 0xac, 0xa3, 0x7f, 0xe9, 0x67, 0x10, 0x73, 0x19, 0x67, 0x10, 0x27, 0x3d, 0xfc, 0x97,
	0xcf, 0x3c, 0xfc, 0x37, 0xd1, 0xcd, 0x45, 0xbf, 0x99, 0x83, 0x6a, 0xc4, 0x36, 0x24, 0x48, 0x26,
	0x96, 0x67, 0xc3, 0x4e, 0xa9, 0x2f, 0x41, 0xbe, 0xcd, 0xf6, 0x5c, 0x99, 0x85, 0x81, 0x0a, 0xfc,
	0x6b, 0x5b, 0x3e, 0x6b, 0xbb, 0x2a, 0x79, 0x3d, 0x95, 0x38, 0x4d, 0xc7, 0x4e, 0x5f, 0x8b, 0xb3,
	0x44, 0x15, 0xf3, 0x58, 0x35, 0x47, 0x4b, 0xee, 0x15, 0xb2, 0x73, 0xa9, 0xf0, 0x26, 0xa7, 0x20,
	0xff, 0xf7, 0x0c, 0x94, 0xc9, 0x31, 0x40, 0xf9, 0xc1, 0xf1, 0x3a, 0x41, 0xe1, 0x27, 0x71, 0x5b,
	0xca, 0x4c, 0xa4, 0x80, 0x29, 0x5c, 0xd5, 0x25, 0x4f, 0x3e, 0xe6, 0xc6, 0x38, 0xf9, 0xd8, 0x8e,
	0xee, 0x91, 0x4b, 0x44, 0xf4, 0x50, 0xc6, 0x7d, 0xbc, 0x4d, 0x00, 0x4d, 0x53, 0x71, 0x0b, 0xb5,
	0xa8, 0x43, 0xdb, 0xf4, 0x02, 0xcc, 0xab, 0xb9, 0x40, 0x18, 0xa2, 0x83, 0xb2, 0xac, 0x44, 0xa0,
	0x1b, 0xd2, 0xd5, 0x32, 0x1b, 0xbb, 0x6e, 0x47, 0xff, 0x40, 0xdd, 0xe3, 0x72, 0x1a, 0x80, 0x94,
	0x34, 0x46, 0xf8, 0x50, 0xa8, 0x55, 0x11, 0x6b, 0xf0, 0x44, 0xe6, 0x05, 0x98, 0x57, 0x4a, 0x5e,
	0xbb, 0x86, 0xa8, 0x2c, 0x2b, 0x9f, 0x45, 0x29, 0x97, 0x90, 0xcc, 0xfb, 0x8e, 0x1f, 0xf6, 0xd4,
	0x05, 0xde, 0x32, 0x48, 0x6b, 0x87, 0x6a, 0xcd, 0x35, 0x36, 0xc4, 0xd6, 0xd8, 0xef, 0xc1, 0x32,
	0x6f, 0x74, 0x7b, 0xe2, 0xd2, 0x34, 0x45, 0x57, 0xb4, 0x48, 0xb0, 0x8e, 0x9c, 0x70, 0xbb, 0x87,
	0x9f, 0xa1, 0x6c, 0xe3, 0xdb, 0xb0, 0x22, 0xba, 0x90, 0x55, 0x19, 0x4f, 0xbd, 0xb2, 0x88, 0x7d,
	0xc8, 0x21, 0xa1, 0x67, 0x5f, 0x31, 0x32, 0x49, 0xcc, 0x0b, 0x11, 0xac, 0x25, 0x91, 0x50, 0x20,
	0xc2, 0xef, 0x51, 0xd1, 0x40, 0x84, 0x7b, 0xe3, 0x34, 0xc8, 0x74, 0xf2, 0x51, 0xee, 0xbb, 0xa2,
	0xa8, 0xd9, 0x6e, 0xcb, 0xcb, 0x01, 0x6a, 0xd1, 0xe5, 0x00, 0xfa, 0x79, 0x3c, 0x91, 0x08, 0x4b,
	0x9c, 0xc7, 0x6b, 0x7c, 0x22, 0x22, 0xfc, 0xb4, 0xe9, 0x49, 0x4d, 0x72, 0xb7, 0x04, 0x79, 0xa2,
	0x48, 0x71, 0x37, 0x01, 0x16, 0x1a, 0x0f, 0xa1, 0xfa, 0xd8, 0x51, 0x27, 0x4b, 0xb1, 0xf3, 0xb0,
	0x4b, 0xf8, 0x33, 0x72, 0x87, 0x34, 0xfe, 0x4b, 0x0e, 0xca, 0xe8, 0x36, 0x74, 0xbf, 0x65, 0xed,
	0x6f, 0xfc, 0x0e, 0x97, 0x05, 0x4c, 0xba, 0x2d, 0x72, 0x0c, 0x4f, 0x06, 0xfb, 0x03, 0xd1, 0x29,
	0xe7, 0x0f, 0xb0, 0x3d, 0x10, 0xf4, 0x9c, 0x23, 0x21, 0xa8, 0x12, 0xd7, 0xe6, 0xda, 0x28, 0x4b,
	0xbe, 0x95, 0xc2, 0x2a, 0xf7, 0xed, 0x21, 0x2f, 0xef, 0xfb, 0xc2, 0x3c, 0xc9, 0xed, 0xe3, 0xbd,
	0x2f, 0x8e, 0x2f, 0x28, 0x2e, 0xe7, 0x60, 0xb9, 0x2f, 0x2f, 0x1c, 0xc8, 0xf5, 0xc9, 0xb6, 0x0a,
	0x05, 0x21, 0xe5, 0x5c, 0x2c, 0xf7, 0x3b, 0x82, 0x6a, 0x72, 0x7d, 0x7a, 0xbf, 0x8e, 0x20, 0x8e,
	0x1c, 0xc3, 0xf2, 0x4b, 0x4f, 0x4c, 0x7c, 0xee, 0xa5, 0xc7, 0xcb, 0x3f, 0x71, 0xc4, 0xec, 0xe6,
	0x7e, 0xe2, 0xf0, 0xf2, 0x51, 0x47, 0x4c, 0x65, 0xee, 0x08, 0xe1, 0x0f, 0x65, 0x4a, 0xf5, 0xdc,
	0x21, 0xbe, 0x6f, 0x78, 0x28, 0x66, 0x2c, 0x17, 0xe2, 0xfb, 0xb6, 0x02, 0x31, 0x55, 0xb9, 0x16,
	0x7e, 0xdf, 0xde, 0x81, 0x50, 0x9d, 0xb9, 0xbd, 0x03, 0xfc, 0x1e, 0x57, 0x9c, 0x14, 0xcd, 0xed,
	0xbb, 0xbc, 0x1c, 0x1c, 0x61, 0x88, 0x58, 0xd1, 0xce, 0x05, 0x47, 0x38, 0x1e, 0x8e, 0x38, 0x3b,
	0x96, 0x6b, 0xe3, 0xf3, 0x43, 0x1f, 0x83, 0xb6, 0x38, 0x7e, 0xbf, 0x71, 0x00, 0xd5, 0xed, 0xae,
	0x73, 0xc0, 0xb6, 0xbc, 0x4e, 0x87, 0x8e, 0x25, 0x5a, 0xd7, 0x61, 0xd6, 0xe5, 0x55, 0x74, 0xdb,
	0x89, 0x1e, 0x63, 0xa9, 0xcf, 0x8c, 0x2d, 0x80, 0xac, 0x4b, 0x50, 0x1d, 0x04, 0xac, 0xe9, 0xf5,
	0x18, 0xde, 0x86, 0xe1, 0x74, 0x3a, 0xe2, 0xda, 0x89, 0xf2, 0x20, 0x60, 0x5f, 0xf7, 0xd8, 0x23,
	0xcf, 0xdf, 0xec, 0x74, 0x1a, 0xbf, 0x35, 0x05, 0x65, 0x61, 0xb6, 0x2b, 0xa7, 0xd4, 0xc9, 0x2e,
	0x69, 0x48, 0xc9, 0x40, 0xbd, 0x81, 0xcb, 0xd3, 0xc4, 0x45, 0x1c, 0x74, 0xef, 0xe9, 0x82, 0x1b,
	0xc4, 0xae, 0xe0, 0x68, 0xfc, 0xcf, 0x69, 0x58, 0x11, 0x01, 0xa3, 0xb1, 0x26, 0x4e, 0xf2, 0x1d,
	0xef, 0xc0, 0x93, 0x24, 0xcf, 0x7f, 0x5b, 0x9f, 0xaa, 0x0c, 0x6f, 0xd3, 0xc6, 0x0d, 0xa1, 0xe9,
	0x28, 0x36, 0xb8, 0x38, 0xa2, 0x05, 0x1c, 0x71, 0xcc, 0xaf, 0x41, 0x55, 0x5c, 0x18, 0xa3, 0x0c,
	0x25, 0x5a, 0x6a, 0xde, 0x1e, 0x85, 0xe9, 0x39, 0x75, 0x13, 0x86, 0x14, 0xe1, 0xac, 0x04, 0x46,
	0x25, 0x9f, 0x2e, 0x64, 0x41, 0x99, 0x26, 0xc4, 0x08, 0x89, 0x55, 0xc3, 0x6d, 0x0b, 0x20, 0x75,
	0x1b, 0xfc, 0x80, 0xcb, 0xeb, 0x80, 0x35, 0x69, 0xa5, 0x96, 0x8f, 0x6e, 0x83, 0x17, 0x0d, 0x74,
	0x75, 0x92, 0xbc, 0x0d, 0xde, 0x84, 0x9e, 0x8d, 0x6e, 0x83, 0x37, 0xa0, 0x2f, 0x43, 0x35, 0x60,
	0x9d, 0x0e, 0x39, 0x40, 0x75, 0x59, 0x3e, 0xcf, 0xab, 0xd1, 0xe1, 0xc9, 0xe5, 0xf9, 0xfa, 0x3d,
	0x28, 0xaa, 0x31, 0x9a, 0xe4, 0xf6, 0x93, 0xf5, 0x4d, 0x58, 0x4c, 0x19, 0x92, 0x89, 0x2e, 0x50,
	0xf9, 0x6b, 0x39, 0x58, 0x22, 0xf9, 0x8d, 0xaa, 0xf7, 0xfe, 0xf1, 0x8e, 0x73, 0xdc, 0x71, 0x7b,
	0x2f, 0x31, 0xc9, 0x31, 0xfd, 0x8c, 0x32, 0xe5, 0x14, 0x45, 0x0d, 0xad, 0x23, 0xc9, 0x69, 0xa4,
	0xae, 0x66, 0x9d, 0xc3, 0xf2, 0x76, 0x9f, 0xf7, 0xa4, 0x3d, 0x06, 0x75, 0xcb, 0x0e, 0x5e, 0x9c,
	0xc1, 0x6b, 0xb8, 0x08, 0x3b, 0x0b, 0x25, 0x37, 0x68, 0xaa, 0x3b, 0x59, 0xe4, 0x65, 0xbc, 0xc1,
	0x43, 0x79, 0x2b, 0xcb, 0xcf, 0xfd, 0x42, 0x15, 0x6e, 0xed, 0x78, 0xde, 0x4b, 0x57, 0x2a, 0x4e,
	0x51, 0x6a, 0x3c, 0x01, 0xa0, 0x7b, 0xa3, 0x46, 0xdc, 0x48, 0x9b, 0x76, 0x93, 0xa3, 0xc8, 0x7a,
	0x3f, 0xad, 0xb2, 0xde, 0x37, 0xfe, 0x6c, 0x46, 0xe5, 0x40, 0x7e, 0xe4, 0xf9, 0x5d, 0x8e, 0x93,
	0x4c, 0x53, 0x9b, 0x05, 0x7d, 0xaf, 0x17, 0x30, 0xd4, 0x0a, 0x1f, 0xc3, 0x3a, 0xdd, 0xf5, 0x24,
	0x4e, 0xdf, 0xb7, 0x9d, 0xd0, 0x69, 0xfa, 0xec, 0xa7, 0x03, 0xd7, 0x67, 0x34, 0xec, 0x05, 0x7b,
	0x15, 0xef, 0x7e, 0x22, 0x00, 0xbc, 0x18, 0x55, 0x34, 0x5b, 0xef, 0x43, 0x99, 0x0e, 0xcf, 0xf7,
	0xe9, 0x42, 0xd5, 0x5c, 0xec, 0x82, 0xee, 0xe8, 0x6b, 0x6c, 0xbc, 0x51, 0x4a, 0x7c, 0xd9, 0x12,
	0xe4, 0xf7, 0x7c, 0xa7, 0x27, 0x3d, 0x08, 0x54, 0xb0, 0x3e, 0x80, 0xba, 0xf4, 0xd4, 0x27, 0x6e,
	0x80, 0xa0, 0x49, 0x5a, 0x11, 0xed, 0xf1, 0x0b, 0x20, 0xee, 0xc0, 0x8a, 0xe9, 0xe3, 0x8f, 0x5d,
	0x6e, 0xb2, 0xd4, 0xd2, 0x7d, 0xfb, 0xb2, 0xd7, 0x2a, 0xcc, 0x1d, 0x3a, 0x18, 0xad, 0x2c, 0x12,
	0xf0, 0xcd, 0x1e, 0x3a, 0xc1, 0x0b, 0x27, 0xe4, 0x43, 0x79, 0xe4, 0xc8, 0x23, 0xe9, 0xfc, 0xa7,
	0x26, 0x1b, 0x0b, 0x86, 0x6c, 0x8c, 0x5b, 0x0d, 0x74, 0xfe, 0xdc, 0xb0, 0x1a, 0x74, 0xf1, 0x09,
	0x31, 0xf1, 0xa9, 0xb6, 0xc0, 0x4a, 0xa3, 0xb6, 0xc0, 0xae, 0x40, 0x35, 0xdd, 0x98, 0xa9, 0xb4,
	0x4c, 0x3b, 0xe6, 0x02, 0xcc, 0x0b, 0x40, 0x23, 0xb5, 0x43, 0x99, 0x2a, 0xc5, 0x3b, 0x65, 0x5b,
	0x48, 0x15, 0x3a, 0x93, 0x9e, 0x66, 0x21, 0xe9, 0xa6, 0x4a, 0xd5, 0x48, 0x1d, 0xd0, 0xf8, 0xd9,
	0x0c, 0xd4, 0xbe, 0x8e, 0x2d, 0x8d, 0xc6, 0x4a, 0xed, 0x9c, 0x9d, 0xf6, 0xfe, 0x06, 0x2c, 0x72,
	0x5d, 0x12, 0x84, 0x74, 0x9d, 0xb3, 0x5c, 0x97, 0x93, 0x21, 0x61, 0xe9, 0x4d, 0x62, 0x49, 0x2e,
	0xd2, 0x09, 0x18, 0xf7, 0xff, 0x70, 0xbb, 0x52, 0x34, 0xd7, 0xa3, 0x8b, 0xd4, 0x84, 0xd7, 0x49,
	0x5e, 0x95, 0x26, 0x6e, 0xb0, 0x91, 0xad, 0xc4, 0xae, 0x1c, 0x97, 0x0c, 0x74, 0xbf, 0x04, 0x95,
	0xc0, 0x3d, 0xe8, 0x39, 0xa1, 0xe7, 0x1f, 0xeb, 0xe6, 0xee, 0xbc, 0xaa, 0x45, 0x7b, 0xf7, 0x3a,
	0x58, 0x11, 0x98, 0xda, 0x13, 0x21, 0x4b, 0x65, 0x41, 0xb5, 0xec, 0xc8, 0xcd, 0x91, 0x2b, 0x50,
	0xdd, 0x23, 0xb7, 0x44, 0xb3, 0xcd, 0x42, 0xc7, 0xed, 0x04, 0x82, 0x3c, 0x2a, 0xa2, 0xfa, 0x01,
	0xd5, 0x5a, 0xd7, 0x60, 0x41, 0xda, 0xd1, 0xd1, 0xdd, 0x24, 0x25, 0x74, 0x12, 0xc9, 0x1d, 0x33,
	0x75, 0x89, 0x49, 0x6c, 0xc1, 0x53, 0x3e, 0xf9, 0x4a, 0x7d, 0x7e, 0x92, 0x95, 0xfa, 0x35, 0x58,
	0x30, 0x26, 0xab, 0x2d, 0x93, 0x15, 0x14, 0xed, 0x9a, 0xde, 0x80, 0x8b, 0x1a, 0x75, 0x69, 0x6a,
	0x55, 0xbb, 0x34, 0xb5, 0xf1, 0x47, 0xb4, 0x8c, 0xc6, 0x93, 0x18, 0x6e, 0xef, 0x89, 0xdb, 0x75,
	0xb3, 0x32, 0x82, 0x9e, 0x60, 0x93, 0xec, 0x4d, 0x6e, 0x2e, 0x36, 0x87, 0x25, 0x3f, 0xc1, 0xb0,
	0x34, 0xfe, 0x45, 0x0e, 0x0a, 0x78, 0xee, 0xc2, 0xeb, 0x8c, 0x5c, 0x44, 0x4f, 0xa7, 0xa5, 0xb1,
	0xf5, 0xbd, 0x8e, 0xba, 0xe8, 0x8a, 0xff, 0xd6, 0xfc, 0x47, 0x79, 0xc3, 0x7f, 0xa4, 0x25, 0x31,
	0x99, 0x35, 0x92, 0x98, 0x60, 0xe6, 0x61, 0x3f, 0x10, 0x6b, 0x43, 0xb1, 0x90, 0xc3, 0x1a, 0xa4,
	0xd9, 0x53, 0x50, 0xec, 0x38, 0xb2, 0x95, 0xa8, 0xba, 0xc0, 0x2b, 0x9e, 0x89, 0x85, 0x05, 0x4d,
	0x54, 0x51, 0xbf, 0xdd, 0xd6, 0x1c, 0x4a, 0x38, 0xf9, 0x50, 0x96, 0x26, 0x19, 0xca, 0x5b, 0x50,
	0xe6, 0xa3, 0xf8, 0xc4, 0x0d, 0x68, 0x21, 0x34, 0x86, 0x70, 0xb9, 0xff, 0xd9, 0x0f, 0x3f, 0x3d,
	0x70, 0xc3, 0xc3, 0xc1, 0xde, 0x46, 0xcb, 0xeb, 0xde, 0x90, 0x61, 0x0b, 0xea, 0xc7, 0x75, 0x21,
	0x6c, 0xaf, 0xa3, 0x03, 0xc1, 0xbf, 0xd1, 0x7f, 0x79, 0x70, 0x03, 0x5f, 0xe2, 0x86, 0x68, 0xd8,
	0x9b, 0xc5, 0xe2, 0xed, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xd0, 0xac, 0x50, 0x54, 0xca,
	0x00, 0x00,
}
